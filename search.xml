<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>工作学习总结</title>
    <url>/e487f877/</url>
    <content><![CDATA[<p>前言</p>
<blockquote>
<p>这里简单记录下<code>工作学习</code>知识点总结</p>
</blockquote>
<a id="more"></a>

<p><a href="https://blog.csdn.net/jcjc918/article/details/50434462" target="_blank" rel="noopener">参考博客–常见问题整理</a></p>
<h3 id="c-相关知识点"><a href="#c-相关知识点" class="headerlink" title="c++相关知识点"></a>c++相关知识点</h3><p><a href="https://blog.kang1024.tk/27d62e6f/">c++相关知识点</a></p>
<h3 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h3><ul>
<li>管道</li>
<li>命名管道</li>
<li>消息队列</li>
<li>信号</li>
<li>信号量</li>
<li>共享内存</li>
<li>socket套接字</li>
</ul>
<h3 id="线程间通信"><a href="#线程间通信" class="headerlink" title="线程间通信"></a>线程间通信</h3><ul>
<li>锁机制<blockquote>
<p>互斥锁、读写锁、条件变量</p>
</blockquote>
</li>
<li>信号量</li>
<li>信号</li>
</ul>
<h3 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h3><ul>
<li>临界区</li>
<li>信号量</li>
<li>互斥量</li>
<li>事件</li>
</ul>
<h3 id="topK"><a href="#topK" class="headerlink" title="topK"></a>topK</h3><p>海量数据</p>
<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p>退化改进<br>二分查找</p>
<h3 id="linux五种IO模型"><a href="#linux五种IO模型" class="headerlink" title="linux五种IO模型"></a>linux五种IO模型</h3><p><a href="https://blog.kang1024.tk/7115c338/">linux五种IO模型</a></p>
<h3 id="tcp协议"><a href="#tcp协议" class="headerlink" title="tcp协议"></a>tcp协议</h3><p><a href="https://blog.kang1024.tk/e59437eb/">tcp协议</a></p>
<h3 id="redis常见问题"><a href="#redis常见问题" class="headerlink" title="redis常见问题"></a>redis常见问题</h3><p><a href="https://blog.kang1024.tk/2d495023/">redis常见问题</a></p>
<h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><ul>
<li>大顶堆</li>
<li>小顶堆<br>应用场景</li>
</ul>
<h3 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h3><p>常用容器的底层数据结构和时间复杂度<br>vector和map的底层实现</p>
<h3 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h3><ul>
<li>索引</li>
<li>幻读</li>
</ul>
<h3 id="boost"><a href="#boost" class="headerlink" title="boost"></a>boost</h3><h3 id="stl内存管理"><a href="#stl内存管理" class="headerlink" title="stl内存管理"></a>stl内存管理</h3><ul>
<li>一级配置器</li>
<li>二级配置器</li>
</ul>
<h3 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h3><h4 id="其他问题1"><a href="#其他问题1" class="headerlink" title="其他问题1"></a>其他问题1</h4><blockquote>
<p>迭代器种类和作用，左值引用和右值引用区别，二叉树节点怎么找它的层数，lambda怎么用，容器的配接器有什么作用<br>线程数目是cpu核数<br>红黑树左旋右旋<br>数据一致性，数据库写挂了，怎么处理<br>指针和引用的区别<br>servlet和socket区别<br>哈希冲突</p>
</blockquote>
<h4 id="其他问题2"><a href="#其他问题2" class="headerlink" title="其他问题2"></a>其他问题2</h4><blockquote>
<p>深拷贝浅拷贝<br>设计模式<br>拷贝构造函数的理解<br>智能指针<br>stl的组件(容器 算法 迭代器 仿函数 配接器 适配器)<br>c++11 thread<br>多态(virtual怎么实现的多态)</p>
</blockquote>
<h3 id="leetcode"><a href="#leetcode" class="headerlink" title="leetcode"></a>leetcode</h3><ul>
<li>并查集<br><a href="https://zhuanlan.zhihu.com/p/93647900" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/93647900</a></li>
<li>动态规划</li>
<li>BFS DFS 回溯算法</li>
</ul>
<h3 id="五大算法"><a href="#五大算法" class="headerlink" title="五大算法"></a>五大算法</h3><p><a href="https://www.jianshu.com/p/4abfd96d91e6" target="_blank" rel="noopener">https://www.jianshu.com/p/4abfd96d91e6</a><br><a href="https://www.jianshu.com/p/48a6bdfccff1" target="_blank" rel="noopener">https://www.jianshu.com/p/48a6bdfccff1</a></p>
<ul>
<li>递归分治</li>
<li>回溯法</li>
<li>动态规划</li>
<li>贪心算法</li>
<li>分支界限</li>
</ul>
<h3 id="递归、迭代和动态规划的区别与联系"><a href="#递归、迭代和动态规划的区别与联系" class="headerlink" title="递归、迭代和动态规划的区别与联系"></a>递归、迭代和动态规划的区别与联系</h3><ul>
<li><p>定义<br>递归：程序调用自身，从顶部将问题分解，通过解决所有分解出来的小问题，来解决整个问题。<br>迭代：利用变量的原值推算出变量的一个新值。递归中一定有迭代，但迭代中不一定有递归。<br>动态规划：通常与递归相反，其从底部开始解决问题，将所有小问题解决掉，进而解决整个问题。<br>下面通过斐波那契数列对三者进行对比：</p>
<blockquote>
<p>斐波那契数列：1, 1, 2, 3, 5, 8, 13, 21…<br>递归公式：F[n] = F[n-1] + F[n-2] (n &gt;= 3), 递归结束条件：F[1] = 1, F[2] = 1</p>
</blockquote>
</li>
<li><p>递归<br>自上而下调用函数本身，速度较慢，不推荐。<br>要知道第n个数，必须要先知道第n-1和第n-2个数；<br>而想要知道第n-1个数，必须要知道第n-2和第n-3个数。<br>f(n) = f(n-1) + f(n-2)<br>= f(n-2) + f(n-3) + f(n-3) + f(n-4)<br>= …</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Fibonacci(n - <span class="number">1</span>) + Fibonacci(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>迭代<br>利用原值去求解下一个值，一般比递归速度更快。<br>由第1个数和第2个数去求解第3个数；<br>由第2个数和第3个数去求解第4个数；<br>以此类推：<br>f(3) = f(2) + f(1)<br>f(4) = f(3) + f(2)<br>…</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> f1 = <span class="number">1</span>, f2 = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= <span class="number">3</span>; ++i) &#123;</span><br><span class="line">        res = f1 + f2;</span><br><span class="line">        f1 = f2;</span><br><span class="line">        f2 = res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>动态规划<br>动态规划采用空间换时间的方法，速度比迭代更快一些。<br>子问题可能需要多次计算，即子问题的重接性质；<br>利用额外空间，将子问题的解保存起来，每个子问题只用计算一次，以节省时间。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Fibonacci</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(n)</span></span>;</span><br><span class="line">    dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    dp[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="印象笔记"><a href="#印象笔记" class="headerlink" title="印象笔记"></a>印象笔记</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">变量的命名规则，运算符优先级，函数，递归，贪心算法，回溯，分治，动态规划（0&#x2F;1背包），分支限界kmp，最小生成树，最短路径</span><br><span class="line">关键字C&#x2F;C++区别，动态开辟内存，结构体对齐，权限</span><br><span class="line">指针函数，函数指针，指针数组，数组指针，二维数组传参，最大递增子串，最大公共子串，最大子序列和</span><br><span class="line"></span><br><span class="line">const，inline</span><br><span class="line">引用返回&amp;</span><br><span class="line">作用域，字符常量</span><br><span class="line">地址空间</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">封装，继承（公私保及访问权限），多态</span><br><span class="line">构造函数，友元，重载。</span><br><span class="line">单继承，多继承</span><br><span class="line">虚表，virtual（修饰基类的析构函数）， 静态联编动态联编 （早绑定晚绑定），静多态，动多态</span><br><span class="line">模板函数，函数模板，模板类，类模板</span><br><span class="line">隐藏、覆盖、重载(高质量C++编程)</span><br><span class="line">排序，时间复杂度，空间复杂度</span><br><span class="line"></span><br><span class="line">链表，栈，队列，二叉树，深浅拷贝&#x2F;赋值</span><br><span class="line"></span><br><span class="line">pdf课件，三次握手，tcp，udp，arp，http，dns，拥塞控制，ip</span><br><span class="line"></span><br><span class="line">设计模式(单例模式)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工作学习</category>
      </categories>
      <tags>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title>linux常用命令</title>
    <url>/fe4ef317/</url>
    <content><![CDATA[<p>前言</p>
<blockquote>
<p>这里简单记录下<code>linux常用命令</code>总结</p>
</blockquote>
<a id="more"></a>

<h3 id="linux常用命令"><a href="#linux常用命令" class="headerlink" title="linux常用命令"></a>linux常用命令</h3><p><a href="https://blog.csdn.net/ysuncn/article/details/1721249" target="_blank" rel="noopener">Linux常用命令分类</a><br><a href="https://www.jianshu.com/p/9e2e87cf360f" target="_blank" rel="noopener">linux常用命令大全</a></p>
<h4 id="目录文件类命令"><a href="#目录文件类命令" class="headerlink" title="目录文件类命令"></a>目录文件类命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span>              <span class="comment"># 切换目录</span></span><br><span class="line">dir             <span class="comment"># 显示目录内容</span></span><br><span class="line">ls              <span class="comment"># 显示目录内容</span></span><br><span class="line">cat             <span class="comment"># 显示文件内容，适合小文件</span></span><br><span class="line">less            <span class="comment"># 分屏显示文件内容，可前后翻阅</span></span><br><span class="line">more            <span class="comment"># 分屏显示文件内容，不可向前翻阅</span></span><br><span class="line">head            <span class="comment"># 显示文件头部内容</span></span><br><span class="line">tail            <span class="comment"># 显示文件尾部内容</span></span><br><span class="line">touch           <span class="comment"># 创建文件或更新文件访问时间</span></span><br><span class="line">mkdir           <span class="comment"># 创建目录</span></span><br><span class="line">rmdir           <span class="comment"># 删除目录</span></span><br><span class="line">rm              <span class="comment"># 删除文件或目录(-r)</span></span><br><span class="line">cp              <span class="comment"># 复制文件或目录</span></span><br><span class="line">mv              <span class="comment"># 移动或改名</span></span><br><span class="line">chown           <span class="comment"># 修改文件所有者</span></span><br><span class="line">chgrp           <span class="comment"># 修改文件所属组</span></span><br><span class="line">chmod           <span class="comment"># 修改文件目录权限</span></span><br><span class="line">find            <span class="comment"># 查找文件或目录</span></span><br><span class="line">tar             <span class="comment"># 打包工具</span></span><br><span class="line">gzip/gunzip     <span class="comment"># 压缩工具</span></span><br><span class="line">bzip2/bunzip2   <span class="comment"># 压缩工具</span></span><br><span class="line">vi              <span class="comment"># 文本编辑工具</span></span><br></pre></td></tr></table></figure>

<h4 id="用户类命令"><a href="#用户类命令" class="headerlink" title="用户类命令"></a>用户类命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">useradd         <span class="comment"># 添加用户</span></span><br><span class="line">userdel         <span class="comment"># 删除用户</span></span><br><span class="line">usermod         <span class="comment"># 修改用户属性</span></span><br><span class="line">passwd          <span class="comment"># 设置密码</span></span><br><span class="line">groupadd        <span class="comment"># 添加组</span></span><br><span class="line">groupmod        <span class="comment"># 修改组属性</span></span><br><span class="line">groupdel        <span class="comment"># 删除组</span></span><br><span class="line">gpasswd         <span class="comment"># 将用户添加到组或从组中删除</span></span><br><span class="line">id              <span class="comment"># 显示当前用户ID属性</span></span><br><span class="line">who             <span class="comment"># 显示当前登录的用户</span></span><br><span class="line">w               <span class="comment"># 同上，略有不同</span></span><br><span class="line">chfn            <span class="comment"># 修改用户信息</span></span><br><span class="line">su              <span class="comment"># 切换用户</span></span><br><span class="line">chsh            <span class="comment"># 修改登录Shell</span></span><br></pre></td></tr></table></figure>

<h4 id="帮助类命令"><a href="#帮助类命令" class="headerlink" title="帮助类命令"></a>帮助类命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">help</span>            <span class="comment"># 显示内部命令帮助</span></span><br><span class="line">man             <span class="comment"># 查看手册</span></span><br><span class="line">info            <span class="comment"># 查看texinfo格式手册</span></span><br></pre></td></tr></table></figure>

<h4 id="文件系统类命令"><a href="#文件系统类命令" class="headerlink" title="文件系统类命令"></a>文件系统类命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">fdisk           <span class="comment"># 分区命令</span></span><br><span class="line">mkfs            <span class="comment"># 格式化命令</span></span><br><span class="line">e2label         <span class="comment"># 设置卷标</span></span><br><span class="line">mount           <span class="comment"># 挂载文件系统</span></span><br><span class="line">umount          <span class="comment"># 解除挂载文件系统</span></span><br><span class="line">fsck            <span class="comment"># 文件系统检查</span></span><br><span class="line">mkswap          <span class="comment"># 创建swap文件系统</span></span><br><span class="line">quotacheck      <span class="comment"># 检查配额</span></span><br><span class="line">quotaon         <span class="comment"># 启用配额</span></span><br><span class="line">quotaoff        <span class="comment"># 关闭配额</span></span><br><span class="line">edquota         <span class="comment"># 设置用户磁盘配额</span></span><br></pre></td></tr></table></figure>

<h4 id="软件包管理"><a href="#软件包管理" class="headerlink" title="软件包管理"></a>软件包管理</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rpm             <span class="comment"># redhat包管理工具</span></span><br><span class="line">apt             <span class="comment"># ubuntu包管理工具</span></span><br><span class="line">yum             <span class="comment"># centos包管理工具</span></span><br></pre></td></tr></table></figure>

<h4 id="系统管理命令"><a href="#系统管理命令" class="headerlink" title="系统管理命令"></a>系统管理命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">date            <span class="comment"># 显示/设置系统时间</span></span><br><span class="line">shutdown        <span class="comment"># 关闭系统</span></span><br><span class="line">reboot          <span class="comment"># 重启系统</span></span><br><span class="line">halt            <span class="comment"># 关闭系统</span></span><br><span class="line">runlevel        <span class="comment"># 显示运行级</span></span><br><span class="line">init            <span class="comment"># 切换运行级</span></span><br><span class="line">grub-install    <span class="comment"># 安装GRUB</span></span><br><span class="line">cal             <span class="comment"># 显示日历</span></span><br></pre></td></tr></table></figure>

<h4 id="内核管理类命令"><a href="#内核管理类命令" class="headerlink" title="内核管理类命令"></a>内核管理类命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">lsmod           <span class="comment"># 显示已加载内核模块</span></span><br><span class="line">insmod          <span class="comment"># 添加内核模块</span></span><br><span class="line">modprobe        <span class="comment"># 添加内核模块</span></span><br><span class="line">modinfo         <span class="comment"># 显示内核模块信息</span></span><br><span class="line">rmmod           <span class="comment"># 移除内核模块</span></span><br></pre></td></tr></table></figure>

<h4 id="进程管理类命令"><a href="#进程管理类命令" class="headerlink" title="进程管理类命令"></a>进程管理类命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ps              <span class="comment"># 显示系统进程</span></span><br><span class="line">top             <span class="comment"># 进程管理工具</span></span><br><span class="line">pstree          <span class="comment"># 显示进程树</span></span><br><span class="line">pidof           <span class="comment"># 显示指定程序的进程号</span></span><br><span class="line">nice            <span class="comment"># 设置进程优先级</span></span><br></pre></td></tr></table></figure>

<h4 id="网络基础类命令"><a href="#网络基础类命令" class="headerlink" title="网络基础类命令"></a>网络基础类命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ifconfig        <span class="comment"># 查看／设置网卡参数</span></span><br><span class="line">ifup            <span class="comment"># 启用网络设备</span></span><br><span class="line">ifdown          <span class="comment"># 关闭网络设备</span></span><br><span class="line">lsof            <span class="comment"># 显示指定端口由谁监听</span></span><br><span class="line">sysctl          <span class="comment"># 控制TCP/IP内核参数</span></span><br><span class="line">adsl-setup      <span class="comment"># 设置ADSL连接参数</span></span><br><span class="line">adsl-status     <span class="comment"># 显示ADSL连接状态</span></span><br><span class="line">adsl-connect    <span class="comment"># 启动ADSL连接</span></span><br><span class="line">netstat         <span class="comment"># 显示系统网络状态信息</span></span><br><span class="line">route           <span class="comment"># 查看路由表</span></span><br><span class="line">ip              <span class="comment"># 强大的网络管理工具</span></span><br><span class="line">ping            <span class="comment"># 测试连通性</span></span><br><span class="line">traceroute      <span class="comment"># 路径跟踪</span></span><br></pre></td></tr></table></figure>

<h3 id="gdb调试常用命令"><a href="#gdb调试常用命令" class="headerlink" title="gdb调试常用命令"></a>gdb调试常用命令</h3><p><a href="https://www.cnblogs.com/HKUI/p/8955443.html" target="_blank" rel="noopener">参考博客</a><br><strong>参数列表</strong></p>
<table>
<thead>
<tr>
<th>命令</th>
<th>命令缩写</th>
<th>命令说明</th>
</tr>
</thead>
<tbody><tr>
<td>list</td>
<td>l</td>
<td>显示多行源代码</td>
</tr>
<tr>
<td>break</td>
<td>b</td>
<td>设置断点，程序运行到断点的位置会停下来</td>
</tr>
<tr>
<td>info</td>
<td>i</td>
<td>描述程序的状态</td>
</tr>
<tr>
<td>run</td>
<td>r</td>
<td>开始运行程序</td>
</tr>
<tr>
<td>display</td>
<td>disp</td>
<td>跟踪查看某个变量，每次停下来都显示它的值</td>
</tr>
<tr>
<td>step</td>
<td>s</td>
<td>执行下一行，逐语句，会进入函数内部执行</td>
</tr>
<tr>
<td>next</td>
<td>n</td>
<td>执行下一行，逐过程，不会进入函数内部执行</td>
</tr>
<tr>
<td>print</td>
<td>p</td>
<td>打印内部变量值</td>
</tr>
<tr>
<td>continue</td>
<td>c</td>
<td>继续程序的运行，直到遇到下一个断点</td>
</tr>
<tr>
<td>set var name=v</td>
<td>-</td>
<td>设置变量的值</td>
</tr>
<tr>
<td>start</td>
<td>st</td>
<td>开始执行程序，在main函数的第一条语句前面停下来</td>
</tr>
<tr>
<td>file</td>
<td>-</td>
<td>装入需要调试的程序</td>
</tr>
<tr>
<td>kill</td>
<td>k</td>
<td>终止正在调试的程序</td>
</tr>
<tr>
<td>watch</td>
<td>-</td>
<td>监视变量值的变化</td>
</tr>
<tr>
<td>backtrace</td>
<td>bt</td>
<td>查看函数调用信息(堆栈)</td>
</tr>
<tr>
<td>frame</td>
<td>f</td>
<td>查看栈帧f n切换到编号为n的栈</td>
</tr>
<tr>
<td>quit</td>
<td>q</td>
<td>退出GDB环境</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>工作学习</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>gdb</tag>
      </tags>
  </entry>
  <entry>
    <title>值得推荐的c/c++框架和开源库</title>
    <url>/d1586572/</url>
    <content><![CDATA[<p>前言</p>
<blockquote>
<p>这里简单记录下值得推荐的<code>c/c++框架和开源库</code></p>
</blockquote>
<a id="more"></a>

<p><a href="https://ezlippi.com/blog/2014/12/c-open-project.html" target="_blank" rel="noopener">参考博客</a></p>
]]></content>
      <categories>
        <category>工作学习</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>开源库</tag>
      </tags>
  </entry>
  <entry>
    <title>力扣在线刷题</title>
    <url>/fadc7200/</url>
    <content><![CDATA[<p>前言</p>
<blockquote>
<p>这里简单记录下<code>力扣在线刷题</code>记录</p>
</blockquote>
<a id="more"></a>

<div class="note info"><p><a href="https://leetcode-cn.com/" target="_blank" rel="noopener">力扣官网</a></p>
</div>

<p><strong>面试细节总结</strong></p>
<ul>
<li>面试细节：行为面试(20%) + 技术面试(70%) + 应聘者提问(10%)</li>
</ul>
<ol>
<li>行为面试：跳槽原因；职业规划</li>
<li>技术面试：<blockquote>
<ol>
<li>基础知识点(编程语言，数据结构(50%)，算法)</li>
<li>代码质量要点(规范性，完整性，鲁棒性(健壮性))</li>
<li>复杂题解题思路(画图，举例，分解复杂的问题)</li>
<li>优化效率(时间和空间)</li>
<li>综合能力面(学习、沟通能力，知识迁移能力，抽象建模和发散性思维能力)<br>附加：测试代码：1. 基本功能测试；2. 边界值测试；3. 性能测试</li>
</ol>
</blockquote>
</li>
<li>应聘者提问：自己应聘职位的相关问题</li>
</ol>
<div class="note warning"><p>代码质量要点：规范性，完整性，鲁棒性</p>
</div>

<p><font color=red size=5> 注：文中的难度为LeetCode的标签，不代表如《剑指Offer》原题难度 </font></p>
<style>
table th:nth-of-type(1) {
  width: 10%;
}
table th:nth-of-type(2) {
  width: 35%;
}
table th:nth-of-type(3) {
  width: 25%;
}
table th:nth-of-type(4) {
  width: 15%;
}
table th:nth-of-type(5) {
  width: 15%;
}
table th:nth-of-type(6) {
  width: 10%;
}
</style>

<h3 id="程序员面试金典-第6版"><a href="#程序员面试金典-第6版" class="headerlink" title="程序员面试金典(第6版)"></a>程序员面试金典(第6版)</h3><table>
<thead>
<tr>
<th align="center">#</th>
<th>题名</th>
<th align="center">知识点</th>
<th align="center">难度</th>
<th align="center">提交时间</th>
<th align="center">start</th>
</tr>
</thead>
<tbody><tr>
<td align="center">02.03</td>
<td><a href="https://leetcode-cn.com/problems/delete-middle-node-lcci/" target="_blank" rel="noopener">删除中间节点</a></td>
<td align="center"><code>单链表</code></td>
<td align="center">简单-困难</td>
<td align="center">2020-05-22</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
</tbody></table>
<h3 id="剑指Offer-第2版"><a href="#剑指Offer-第2版" class="headerlink" title="剑指Offer(第2版)"></a>剑指Offer(第2版)</h3><table>
<thead>
<tr>
<th align="center">#</th>
<th>题名</th>
<th align="center">知识点</th>
<th align="center">难度</th>
<th align="center">提交时间</th>
<th align="center">start</th>
</tr>
</thead>
<tbody><tr>
<td align="center">05</td>
<td><a href="https://leetcode-cn.com/problems/ti-huan-kong-ge-lcof/" target="_blank" rel="noopener">替换空格</a></td>
<td align="center"><code>字符串</code></td>
<td align="center">简单</td>
<td align="center">2020-06-09</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">06</td>
<td><a href="https://leetcode-cn.com/problems/cong-wei-dao-tou-da-yin-lian-biao-lcof/" target="_blank" rel="noopener">从尾到头打印链表</a></td>
<td align="center"><code>递归</code> <code>栈</code></td>
<td align="center">简单</td>
<td align="center">2020-06-09</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">10-I</td>
<td><a href="https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/" target="_blank" rel="noopener">斐波那契数列</a></td>
<td align="center"><code>递归</code> <code>迭代</code></td>
<td align="center">简单</td>
<td align="center">2020-06-10</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">10-II</td>
<td><a href="https://leetcode-cn.com/problems/qing-wa-tiao-tai-jie-wen-ti-lcof/" target="_blank" rel="noopener">青蛙跳台阶问题</a></td>
<td align="center"><code>递归</code> <code>迭代</code></td>
<td align="center">简单</td>
<td align="center">2020-06-13</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">17</td>
<td><a href="https://leetcode-cn.com/problems/da-yin-cong-1dao-zui-da-de-nwei-shu-lcof/" target="_blank" rel="noopener">打印从1到最大的n位数</a></td>
<td align="center"><code>大数运算</code></td>
<td align="center">简单</td>
<td align="center">2020-06-06</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">18</td>
<td><a href="https://leetcode-cn.com/problems/shan-chu-lian-biao-de-jie-dian-lcof/" target="_blank" rel="noopener">删除链表的节点</a></td>
<td align="center"><code>单链表</code> <code>双指针</code> <code>哑结点</code></td>
<td align="center">简单</td>
<td align="center">2020-06-05</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">22</td>
<td><a href="https://leetcode-cn.com/problems/lian-biao-zhong-dao-shu-di-kge-jie-dian-lcof/" target="_blank" rel="noopener">链表中倒数第k个节点</a></td>
<td align="center"><code>单链表</code> <code>快慢指针</code></td>
<td align="center">简单</td>
<td align="center">2020-06-05</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">24</td>
<td><a href="https://leetcode-cn.com/problems/fan-zhuan-lian-biao-lcof/" target="_blank" rel="noopener">反转链表</a></td>
<td align="center"><code>双指针</code></td>
<td align="center">简单</td>
<td align="center">2020-06-10</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">27</td>
<td><a href="https://leetcode-cn.com/problems/er-cha-shu-de-jing-xiang-lcof/" target="_blank" rel="noopener">二叉树的镜像</a></td>
<td align="center"><code>二叉树</code> <code>递归</code></td>
<td align="center">简单</td>
<td align="center">2020-06-08</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">55-I</td>
<td><a href="https://leetcode-cn.com/problems/er-cha-shu-de-shen-du-lcof/" target="_blank" rel="noopener">二叉树的深度</a></td>
<td align="center"><code>二叉树</code> <code>递归</code></td>
<td align="center">简单</td>
<td align="center">2020-06-05</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">57</td>
<td><a href="https://leetcode-cn.com/problems/he-wei-sde-liang-ge-shu-zi-lcof/" target="_blank" rel="noopener">和为s的两个数字</a></td>
<td align="center"><code>双指针</code>/<code>二分查找</code></td>
<td align="center">简单</td>
<td align="center">2020-07-09</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center">57-II</td>
<td><a href="https://leetcode-cn.com/problems/he-wei-sde-lian-xu-zheng-shu-xu-lie-lcof/" target="_blank" rel="noopener">和为s的连续正数序列</a></td>
<td align="center">``</td>
<td align="center">简单</td>
<td align="center">2020-07-09</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">58-II</td>
<td><a href="https://leetcode-cn.com/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/" target="_blank" rel="noopener">左旋转字符串</a></td>
<td align="center"><code>字符串</code> <code>三步翻转</code></td>
<td align="center">简单</td>
<td align="center">2020-06-04</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">67</td>
<td><a href="https://leetcode-cn.com/problems/ba-zi-fu-chuan-zhuan-huan-cheng-zheng-shu-lcof/" target="_blank" rel="noopener">把字符串转换成整数</a></td>
<td align="center"><code>isspace</code> <code>isdigit</code></td>
<td align="center">中等</td>
<td align="center">2020-07-08</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
</tbody></table>
<h3 id="LeetCode力扣"><a href="#LeetCode力扣" class="headerlink" title="LeetCode力扣"></a>LeetCode力扣</h3><table>
<thead>
<tr>
<th align="center">#</th>
<th>题名</th>
<th align="center">知识点</th>
<th align="center">难度</th>
<th align="center">提交时间</th>
<th align="center">start</th>
</tr>
</thead>
<tbody><tr>
<td align="center">08</td>
<td><a href="https://leetcode-cn.com/problems/string-to-integer-atoi/" target="_blank" rel="noopener">字符串转换整数 (atoi)</a></td>
<td align="center"><code>isspace</code> <code>isdigit</code></td>
<td align="center">中等</td>
<td align="center">2020-07-11</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center">106</td>
<td><a href="https://leetcode-cn.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/" target="_blank" rel="noopener">从中序与后序遍历序列构造二叉树</a></td>
<td align="center"><code>递归</code></td>
<td align="center">中等</td>
<td align="center">2020-07-09</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">985</td>
<td><a href="https://leetcode-cn.com/problems/sum-of-even-numbers-after-queries/" target="_blank" rel="noopener">查询后的偶数和</a></td>
<td align="center"><code>调整数组和</code></td>
<td align="center">简单</td>
<td align="center">2020-06-08</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
</tbody></table>
<h3 id="每日一题"><a href="#每日一题" class="headerlink" title="每日一题"></a>每日一题</h3><h4 id="2020年6月"><a href="#2020年6月" class="headerlink" title="2020年6月"></a>2020年6月</h4><table>
<thead>
<tr>
<th align="center">#</th>
<th>题名</th>
<th align="center">知识点</th>
<th align="center">难度</th>
<th align="center">提交时间</th>
<th align="center">start</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1431</td>
<td><a href="https://leetcode-cn.com/problems/kids-with-the-greatest-number-of-candies/" target="_blank" rel="noopener">拥有最多糖果的孩子</a></td>
<td align="center"><code>vector最大值</code></td>
<td align="center">简单</td>
<td align="center">2020-06-01</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center">JZ64</td>
<td><a href="https://leetcode-cn.com/problems/qiu-12n-lcof/" target="_blank" rel="noopener">求1+2+…+n</a></td>
<td align="center"><code>递归</code> <code>位运算</code></td>
<td align="center">中等</td>
<td align="center">2020-06-02</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center">837</td>
<td><a href="https://leetcode-cn.com/problems/new-21-game/" target="_blank" rel="noopener">新21点</a></td>
<td align="center"><code>动态规划</code> <code>数学</code></td>
<td align="center">中等</td>
<td align="center">2020-06-03</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">238</td>
<td><a href="https://leetcode-cn.com/problems/product-of-array-except-self/" target="_blank" rel="noopener">除自身以外数组的乘积</a></td>
<td align="center"><code>数组</code> <code>左右累乘</code></td>
<td align="center">中等</td>
<td align="center">2020-06-04</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">JZ29</td>
<td><a href="https://leetcode-cn.com/problems/shun-shi-zhen-da-yin-ju-zhen-lcof/" target="_blank" rel="noopener">顺时针打印矩阵</a></td>
<td align="center"><code>暴力求解</code> <code>边界问题</code></td>
<td align="center">简单</td>
<td align="center">2020-06-05</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">128</td>
<td><a href="https://leetcode-cn.com/problems/longest-consecutive-sequence/" target="_blank" rel="noopener">最长连续序列</a></td>
<td align="center"><code>并查集</code></td>
<td align="center">困难</td>
<td align="center">2020-06-06</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">126</td>
<td><a href="https://leetcode-cn.com/problems/word-ladder-ii/" target="_blank" rel="noopener">单词接龙 II</a></td>
<td align="center"><code>BFS</code> <code>回溯算法</code></td>
<td align="center">困难</td>
<td align="center">2020-06-07</td>
<td align="center"><i class="fa fa-thumbs-down"></i></td>
</tr>
<tr>
<td align="center">990</td>
<td><a href="https://leetcode-cn.com/problems/satisfiability-of-equality-equations/" target="_blank" rel="noopener">等式方程的可满足性</a></td>
<td align="center"><code>并查集</code> <code>路径压缩</code></td>
<td align="center">中等</td>
<td align="center">2020-06-08</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">JZ46</td>
<td><a href="https://leetcode-cn.com/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof/" target="_blank" rel="noopener">把数字翻译成字符串</a></td>
<td align="center"><code>动态规划</code> <code>递归</code></td>
<td align="center">中等</td>
<td align="center">2020-06-09</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">09</td>
<td><a href="https://leetcode-cn.com/problems/palindrome-number/" target="_blank" rel="noopener">回文数</a></td>
<td align="center"><code>数组</code> <code>字符串</code></td>
<td align="center">简单</td>
<td align="center">2020-06-10</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">739</td>
<td><a href="https://leetcode-cn.com/problems/daily-temperatures/" target="_blank" rel="noopener">每日温度</a></td>
<td align="center"><code>暴力求解</code> <code>单调栈</code></td>
<td align="center">中等</td>
<td align="center">2020-06-11</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">15</td>
<td><a href="https://leetcode-cn.com/problems/3sum/" target="_blank" rel="noopener">三数之和</a></td>
<td align="center"><code>排序</code> <code>双指针</code></td>
<td align="center">中等</td>
<td align="center">2020-06-12</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">70</td>
<td><a href="https://leetcode-cn.com/problems/climbing-stairs/" target="_blank" rel="noopener">爬楼梯</a></td>
<td align="center"><code>递归</code> <code>迭代</code></td>
<td align="center">简单</td>
<td align="center">2020-06-13</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">1300</td>
<td><a href="https://leetcode-cn.com/problems/sum-of-mutated-array-closest-to-target/" target="_blank" rel="noopener">转变数组后最接近目标值的数组和</a></td>
<td align="center"><code>数组</code> <code>排序</code></td>
<td align="center">中等</td>
<td align="center">2020-06-14</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">14</td>
<td><a href="https://leetcode-cn.com/problems/longest-common-prefix/" target="_blank" rel="noopener">最长公共前缀</a></td>
<td align="center"><code>字符串</code> <code>纵向扫描</code></td>
<td align="center">中等</td>
<td align="center">2020-06-15</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">297</td>
<td><a href="https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/" target="_blank" rel="noopener">二叉树的序列化与反序列化</a></td>
<td align="center"><code>二叉树</code> <code>递归</code></td>
<td align="center">困难</td>
<td align="center">2020-06-16</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">1014</td>
<td><a href="https://leetcode-cn.com/problems/best-sightseeing-pair/" target="_blank" rel="noopener">最佳观光组合</a></td>
<td align="center"><code>数组</code> <code>调整数组和</code></td>
<td align="center">中等</td>
<td align="center">2020-06-17</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">1028</td>
<td><a href="https://leetcode-cn.com/problems/recover-a-tree-from-preorder-traversal/" target="_blank" rel="noopener">从先序遍历还原二叉树</a></td>
<td align="center"><code>二叉树</code></td>
<td align="center">困难</td>
<td align="center">2020-06-18</td>
<td align="center"><i class="fa fa-thumbs-down"></i></td>
</tr>
<tr>
<td align="center">125</td>
<td><a href="https://leetcode-cn.com/problems/valid-palindrome/" target="_blank" rel="noopener">验证回文串</a></td>
<td align="center"><code>字符串</code> <code>reverse</code></td>
<td align="center">简单</td>
<td align="center">2020-06-19</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center">10</td>
<td><a href="https://leetcode-cn.com/problems/regular-expression-matching/" target="_blank" rel="noopener">正则表达式匹配</a></td>
<td align="center"><code>动态规划</code></td>
<td align="center">困难</td>
<td align="center">2020-06-20</td>
<td align="center"><i class="fa fa-thumbs-down"></i></td>
</tr>
<tr>
<td align="center">124</td>
<td><a href="https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/" target="_blank" rel="noopener">二叉树中的最大路径和</a></td>
<td align="center"><code>二叉树</code> <code>递归</code></td>
<td align="center">困难</td>
<td align="center">2020-06-21</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">JD16.18</td>
<td><a href="https://leetcode-cn.com/problems/pattern-matching-lcci/" target="_blank" rel="noopener">模式匹配</a></td>
<td align="center"><code>字符串枚举</code></td>
<td align="center">中等</td>
<td align="center">2020-06-22</td>
<td align="center"><i class="fa fa-thumbs-down"></i></td>
</tr>
<tr>
<td align="center">67</td>
<td><a href="https://leetcode-cn.com/problems/add-binary/" target="_blank" rel="noopener">二进制求和</a></td>
<td align="center"><code>字符串</code></td>
<td align="center">中等</td>
<td align="center">2020-06-23</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">16</td>
<td><a href="https://leetcode-cn.com/problems/3sum-closest/" target="_blank" rel="noopener">最接近的三数之和</a></td>
<td align="center"><code>排序</code> <code>双指针</code></td>
<td align="center">中等</td>
<td align="center">2020-06-24</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">139</td>
<td><a href="https://leetcode-cn.com/problems/word-break/" target="_blank" rel="noopener">单词拆分</a></td>
<td align="center"><code>动态规划</code></td>
<td align="center">中等</td>
<td align="center">2020-06-25</td>
<td align="center"><i class="fa fa-thumbs-down"></i></td>
</tr>
<tr>
<td align="center">JD02.01</td>
<td><a href="https://leetcode-cn.com/problems/remove-duplicate-node-lcci/" target="_blank" rel="noopener">移除重复节点</a></td>
<td align="center"><code>哈希表</code></td>
<td align="center">简单</td>
<td align="center">2020-06-26</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">41</td>
<td><a href="https://leetcode-cn.com/problems/first-missing-positive/" target="_blank" rel="noopener">缺失的第一个正数</a></td>
<td align="center"><code>哈希表</code></td>
<td align="center">困难</td>
<td align="center">2020-06-27</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">209</td>
<td><a href="https://leetcode-cn.com/problems/minimum-size-subarray-sum/" target="_blank" rel="noopener">长度最小的子数组</a></td>
<td align="center"><code>双指针</code> <code>二分</code></td>
<td align="center">中等</td>
<td align="center">2020-06-28</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">215</td>
<td><a href="https://leetcode-cn.com/problems/kth-largest-element-in-an-array/" target="_blank" rel="noopener">数组中的第K个最大元素</a></td>
<td align="center"><code>堆排序</code></td>
<td align="center">中等</td>
<td align="center">2020-06-29</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">09</td>
<td><a href="https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/" target="_blank" rel="noopener">用两个栈实现队列</a></td>
<td align="center"><code>堆</code> <code>队列</code></td>
<td align="center">简单</td>
<td align="center">2020-06-30</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
</tbody></table>
<h4 id="2020年7月"><a href="#2020年7月" class="headerlink" title="2020年7月"></a>2020年7月</h4><table>
<thead>
<tr>
<th align="center">#</th>
<th>题名</th>
<th align="center">知识点</th>
<th align="center">难度</th>
<th align="center">提交时间</th>
<th align="center">start</th>
</tr>
</thead>
<tbody><tr>
<td align="center">718</td>
<td><a href="https://leetcode-cn.com/problems/maximum-length-of-repeated-subarray/" target="_blank" rel="noopener">最长重复子数组</a></td>
<td align="center"><code>动态规划</code></td>
<td align="center">中等</td>
<td align="center">2020-07-01</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">378</td>
<td><a href="https://leetcode-cn.com/problems/kth-smallest-element-in-a-sorted-matrix/" target="_blank" rel="noopener">有序矩阵中第K小的元素</a></td>
<td align="center"><code>排序</code></td>
<td align="center">中等</td>
<td align="center">2020-07-02</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center">108</td>
<td><a href="https://leetcode-cn.com/problems/convert-sorted-array-to-binary-search-tree/" target="_blank" rel="noopener">将有序数组转换为二叉搜索树</a></td>
<td align="center"><code>二叉树</code> <code>递归</code></td>
<td align="center">简单</td>
<td align="center">2020-07-03</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">32</td>
<td><a href="https://leetcode-cn.com/problems/longest-valid-parentheses/" target="_blank" rel="noopener">最长有效括号</a></td>
<td align="center"><code>动态规划</code> <code>栈</code></td>
<td align="center">困难</td>
<td align="center">2020-07-04</td>
<td align="center"><i class="fa fa-thumbs-down"></i></td>
</tr>
<tr>
<td align="center">44</td>
<td><a href="https://leetcode-cn.com/problems/wildcard-matching/" target="_blank" rel="noopener">通配符匹配</a></td>
<td align="center"><code>动态规划</code></td>
<td align="center">困难</td>
<td align="center">2020-07-05</td>
<td align="center"><i class="fa fa-thumbs-down"></i></td>
</tr>
<tr>
<td align="center">63</td>
<td><a href="https://leetcode-cn.com/problems/unique-paths-ii/" target="_blank" rel="noopener">不同路径 II</a></td>
<td align="center"><code>动态规划</code> <code>滚动数组降维</code></td>
<td align="center">中等</td>
<td align="center">2020-07-06</td>
<td align="center"><i class="fa fa-thumbs-down"></i></td>
</tr>
<tr>
<td align="center">112</td>
<td><a href="https://leetcode-cn.com/problems/path-sum/" target="_blank" rel="noopener">路径总和</a></td>
<td align="center"><code>递归</code></td>
<td align="center">简单</td>
<td align="center">2020-07-07</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">JD16.11</td>
<td><a href="https://leetcode-cn.com/problems/diving-board-lcci/" target="_blank" rel="noopener">跳水板</a></td>
<td align="center"><code>动态规划</code>/<code>数学等差数列</code></td>
<td align="center">简单</td>
<td align="center">2020-07-08</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">JD17.13</td>
<td><a href="https://leetcode-cn.com/problems/re-space-lcci/" target="_blank" rel="noopener">恢复空格</a></td>
<td align="center"><code>动态规划</code> <code>string_view</code></td>
<td align="center">中等</td>
<td align="center">2020-07-09</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">309</td>
<td><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/" target="_blank" rel="noopener">最佳买卖股票时机含冷冻期</a></td>
<td align="center"><code>动态规划</code></td>
<td align="center">中等</td>
<td align="center">2020-07-10</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">315</td>
<td><a href="https://leetcode-cn.com/problems/count-of-smaller-numbers-after-self/" target="_blank" rel="noopener">计算右侧小于当前元素的个数</a></td>
<td align="center"><code>二分查找</code></td>
<td align="center">困难</td>
<td align="center">2020-07-11</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center">174</td>
<td><a href="https://leetcode-cn.com/problems/dungeon-game/" target="_blank" rel="noopener">地下城游戏</a></td>
<td align="center"><code>动态规划</code> <code>滚动数组降维</code></td>
<td align="center">困难</td>
<td align="center">2020-07-12</td>
<td align="center"><i class="fa fa-thumbs-down"></i></td>
</tr>
<tr>
<td align="center">350</td>
<td><a href="https://leetcode-cn.com/problems/intersection-of-two-arrays-ii/" target="_blank" rel="noopener">两个数组的交集 II</a></td>
<td align="center"><code>排序</code>/<code>双指针</code></td>
<td align="center">简单</td>
<td align="center">2020-07-13</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center">120</td>
<td><a href="https://leetcode-cn.com/problems/triangle/" target="_blank" rel="noopener">三角形最小路径和</a></td>
<td align="center"><code>动态规划</code></td>
<td align="center">中等</td>
<td align="center">2020-07-14</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">96</td>
<td><a href="https://leetcode-cn.com/problems/unique-binary-search-trees/" target="_blank" rel="noopener">不同的二叉搜索树</a></td>
<td align="center"><code>动态规划</code>/<code>数学</code></td>
<td align="center">中等</td>
<td align="center">2020-07-15</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">785</td>
<td><a href="https://leetcode-cn.com/problems/is-graph-bipartite/" target="_blank" rel="noopener">判断二分图</a></td>
<td align="center"><code>DFS</code>/<code>BFS</code></td>
<td align="center">中等</td>
<td align="center">2020-07-16</td>
<td align="center"><i class="fa fa-thumbs-down"></i></td>
</tr>
<tr>
<td align="center">35</td>
<td><a href="https://leetcode-cn.com/problems/search-insert-position/" target="_blank" rel="noopener">搜索插入位置</a></td>
<td align="center"><code>二分查找</code></td>
<td align="center">简单</td>
<td align="center">2020-07-17</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center">97</td>
<td><a href="https://leetcode-cn.com/problems/interleaving-string/" target="_blank" rel="noopener">交错字符串</a></td>
<td align="center"><code>动态规划</code></td>
<td align="center">困难</td>
<td align="center">2020-07-18</td>
<td align="center"><i class="fa fa-thumbs-down"></i></td>
</tr>
<tr>
<td align="center">312</td>
<td><a href="https://leetcode-cn.com/problems/burst-balloons/" target="_blank" rel="noopener">戳气球</a></td>
<td align="center"><code>动态规划</code></td>
<td align="center">困难</td>
<td align="center">2020-07-19</td>
<td align="center"><i class="fa fa-thumbs-down"></i></td>
</tr>
<tr>
<td align="center">167</td>
<td><a href="https://leetcode-cn.com/problems/two-sum-ii-input-array-is-sorted/" target="_blank" rel="noopener">两数之和 II - 输入有序数组</a></td>
<td align="center"><code>双指针</code>/<code>二分查找</code></td>
<td align="center">简单</td>
<td align="center">2020-07-20</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center">95</td>
<td><a href="https://leetcode-cn.com/problems/unique-binary-search-trees-ii/" target="_blank" rel="noopener">不同的二叉搜索树 II</a></td>
<td align="center"><code>递归</code></td>
<td align="center">中等</td>
<td align="center">2020-07-21</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">JZ11</td>
<td><a href="https://leetcode-cn.com/problems/xuan-zhuan-shu-zu-de-zui-xiao-shu-zi-lcof/submissions/" target="_blank" rel="noopener">旋转数组的最小数字</a></td>
<td align="center"><code>二分法</code></td>
<td align="center">简单</td>
<td align="center">2020-07-22</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center">64</td>
<td><a href="https://leetcode-cn.com/problems/minimum-path-sum/" target="_blank" rel="noopener">最小路径和</a></td>
<td align="center"><code>动态规划</code></td>
<td align="center">中等</td>
<td align="center">2020-07-23</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">1025</td>
<td><a href="https://leetcode-cn.com/problems/divisor-game/" target="_blank" rel="noopener">除数博弈</a></td>
<td align="center"><code>数学</code> <code>递推</code></td>
<td align="center">简单</td>
<td align="center">2020-07-24</td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center">410</td>
<td><a href="https://leetcode-cn.com/problems/split-array-largest-sum/" target="_blank" rel="noopener">分割数组的最大值</a></td>
<td align="center"><code>TODO</code></td>
<td align="center">困难</td>
<td align="center">2020-07-25</td>
<td align="center"><i class="fa fa-thumbs-down"></i></td>
</tr>
<tr>
<td align="center">329</td>
<td><a href="https://leetcode-cn.com/problems/longest-increasing-path-in-a-matrix/" target="_blank" rel="noopener">矩阵中的最长递增路径</a></td>
<td align="center"><code>TODO</code></td>
<td align="center">困难</td>
<td align="center">2020-07-26</td>
<td align="center"><i class="fa fa-thumbs-down"></i></td>
</tr>
<tr>
<td align="center">392</td>
<td><a href="https://leetcode-cn.com/problems/is-subsequence/" target="_blank" rel="noopener">判断子序列</a></td>
<td align="center"><code>TODO</code></td>
<td align="center">简单</td>
<td align="center">2020-07-27</td>
<td align="center"><i class="fa fa-thumbs-down"></i></td>
</tr>
<tr>
<td align="center">104</td>
<td><a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/" target="_blank" rel="noopener">二叉树的最大深度</a></td>
<td align="center"><code>TODO</code></td>
<td align="center">简单</td>
<td align="center">2020-07-28</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center">LCP13</td>
<td><a href="https://leetcode-cn.com/problems/xun-bao/" target="_blank" rel="noopener">寻宝</a></td>
<td align="center"><code>TODO</code></td>
<td align="center">困难</td>
<td align="center">2020-07-29</td>
<td align="center"><i class="fa fa-thumbs-down"></i></td>
</tr>
<tr>
<td align="center">343</td>
<td><a href="https://leetcode-cn.com/problems/integer-break/" target="_blank" rel="noopener">整数拆分</a></td>
<td align="center"><code>TODO</code></td>
<td align="center">中等</td>
<td align="center">2020-07-30</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center">JD08.03</td>
<td><a href="https://leetcode-cn.com/problems/magic-index-lcci/" target="_blank" rel="noopener">魔术索引</a></td>
<td align="center"><code>TODO</code></td>
<td align="center">简单</td>
<td align="center">2020-07-31</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
</tbody></table>
<h4 id="2020年8月"><a href="#2020年8月" class="headerlink" title="2020年8月"></a>2020年8月</h4><table>
<thead>
<tr>
<th align="center">#</th>
<th>题名</th>
<th align="center">知识点</th>
<th align="center">难度</th>
<th align="center">提交时间</th>
<th align="center">start</th>
</tr>
</thead>
<tbody><tr>
<td align="center">632</td>
<td><a href="https://leetcode-cn.com/problems/smallest-range-covering-elements-from-k-lists/" target="_blank" rel="noopener">最小区间</a></td>
<td align="center"><code>TODO</code></td>
<td align="center">困难</td>
<td align="center">2020-08-01</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center">114</td>
<td><a href="https://leetcode-cn.com/problems/flatten-binary-tree-to-linked-list/" target="_blank" rel="noopener">二叉树展开为链表</a></td>
<td align="center"><code>TODO</code></td>
<td align="center">中等</td>
<td align="center">2020-08-02</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center">415</td>
<td><a href="https://leetcode-cn.com/problems/add-strings/" target="_blank" rel="noopener">字符串相加</a></td>
<td align="center"><code>TODO</code></td>
<td align="center">简单</td>
<td align="center">2020-08-03</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center">207</td>
<td><a href="https://leetcode-cn.com/problems/course-schedule/" target="_blank" rel="noopener">课程表</a></td>
<td align="center"><code>TODO</code></td>
<td align="center">中等</td>
<td align="center">2020-08-04</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center">337</td>
<td><a href="https://leetcode-cn.com/problems/house-robber-iii/" target="_blank" rel="noopener">打家劫舍 III</a></td>
<td align="center"><code>TODO</code></td>
<td align="center">中等</td>
<td align="center">2020-08-05</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center">336</td>
<td><a href="https://leetcode-cn.com/problems/palindrome-pairs/" target="_blank" rel="noopener">回文对</a></td>
<td align="center"><code>TODO</code></td>
<td align="center">困难</td>
<td align="center">2020-08-06</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center">100</td>
<td><a href="https://leetcode-cn.com/problems/same-tree/" target="_blank" rel="noopener">相同的树</a></td>
<td align="center"><code>TODO</code></td>
<td align="center">简单</td>
<td align="center">2020-08-07</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center">99</td>
<td><a href="https://leetcode-cn.com/problems/recover-binary-search-tree/" target="_blank" rel="noopener">恢复二叉搜索树</a></td>
<td align="center"><code>TODO</code></td>
<td align="center">困难</td>
<td align="center">2020-08-08</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center">93</td>
<td><a href="https://leetcode-cn.com/problems/restore-ip-addresses/" target="_blank" rel="noopener">复原IP地址</a></td>
<td align="center"><code>递归</code></td>
<td align="center">中等</td>
<td align="center">2020-08-09</td>
<td align="center"><i class="fa fa-thumbs-down"></i></td>
</tr>
<tr>
<td align="center">696</td>
<td><a href="https://leetcode-cn.com/problems/count-binary-substrings/" target="_blank" rel="noopener">计数二进制子串</a></td>
<td align="center"><code>TODO</code></td>
<td align="center">简单</td>
<td align="center">2020-08-10</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center">130</td>
<td><a href="https://leetcode-cn.com/problems/surrounded-regions/" target="_blank" rel="noopener">被围绕的区域</a></td>
<td align="center"><code>TODO</code></td>
<td align="center">中等</td>
<td align="center">2020-08-11</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center">133</td>
<td><a href="https://leetcode-cn.com/problems/clone-graph/" target="_blank" rel="noopener">克隆图</a></td>
<td align="center"><code>TODO</code></td>
<td align="center">中等</td>
<td align="center">2020-08-12</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center">43</td>
<td><a href="https://leetcode-cn.com/problems/multiply-strings/" target="_blank" rel="noopener">字符串相乘</a></td>
<td align="center"><code>TODO</code></td>
<td align="center">中等</td>
<td align="center">2020-08-13</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center">20</td>
<td><a href="https://leetcode-cn.com/problems/valid-parentheses/" target="_blank" rel="noopener">有效的括号</a></td>
<td align="center"><code>字符串</code> <code>栈</code></td>
<td align="center">简单</td>
<td align="center">2020-08-14</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center">546</td>
<td><a href="https://leetcode-cn.com/problems/remove-boxes/" target="_blank" rel="noopener">移除盒子</a></td>
<td align="center"><code>TODO</code></td>
<td align="center">困难</td>
<td align="center">2020-08-15</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center">733</td>
<td><a href="https://leetcode-cn.com/problems/flood-fill/" target="_blank" rel="noopener">图像渲染</a></td>
<td align="center"><code>TODO</code></td>
<td align="center">简单</td>
<td align="center">2020-08-16</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center">110</td>
<td><a href="https://leetcode-cn.com/problems/balanced-binary-tree/" target="_blank" rel="noopener">平衡二叉树</a></td>
<td align="center"><code>二叉树</code> <code>递归</code></td>
<td align="center">简单</td>
<td align="center">2020-08-17</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center">109</td>
<td><a href="https://leetcode-cn.com/problems/convert-sorted-list-to-binary-search-tree/" target="_blank" rel="noopener">有序链表转换二叉搜索树</a></td>
<td align="center"><code>TODO</code></td>
<td align="center">中等</td>
<td align="center">2020-08-18</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center">647</td>
<td><a href="https://leetcode-cn.com/problems/palindromic-substrings/" target="_blank" rel="noopener">回文子串</a></td>
<td align="center"><code>TODO</code></td>
<td align="center">中等</td>
<td align="center">2020-08-19</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center">529</td>
<td><a href="https://leetcode-cn.com/problems/minesweeper/" target="_blank" rel="noopener">扫雷游戏</a></td>
<td align="center"><code>TODO</code></td>
<td align="center">中等</td>
<td align="center">2020-08-20</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center">111</td>
<td><a href="https://leetcode-cn.com/problems/minimum-depth-of-binary-tree/" target="_blank" rel="noopener">二叉树的最小深度</a></td>
<td align="center"><code>二叉树</code> <code>dfs</code></td>
<td align="center">简单</td>
<td align="center">2020-08-21</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center">679</td>
<td><a href="https://leetcode-cn.com/problems/24-game/" target="_blank" rel="noopener">24 点游戏</a></td>
<td align="center"><code>TODO</code></td>
<td align="center">困难</td>
<td align="center">2020-08-22</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center">201</td>
<td><a href="https://leetcode-cn.com/problems/bitwise-and-of-numbers-range/" target="_blank" rel="noopener">数字范围按位与</a></td>
<td align="center"><code>TODO</code></td>
<td align="center">中等</td>
<td align="center">2020-08-23</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center">459</td>
<td><a href="https://leetcode-cn.com/problems/repeated-substring-pattern/" target="_blank" rel="noopener">重复的子字符串</a></td>
<td align="center"><code>字符串</code> <code>kmp?</code></td>
<td align="center">简单</td>
<td align="center">2020-08-24</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center">491</td>
<td><a href="https://leetcode-cn.com/problems/increasing-subsequences/" target="_blank" rel="noopener">递增子序列</a></td>
<td align="center"><code>TODO</code></td>
<td align="center">中等</td>
<td align="center">2020-08-25</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center">17</td>
<td><a href="https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/" target="_blank" rel="noopener">电话号码的字母组合</a></td>
<td align="center"><code>TODO</code></td>
<td align="center">中等</td>
<td align="center">2020-08-26</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center">332</td>
<td><a href="https://leetcode-cn.com/problems/reconstruct-itinerary/" target="_blank" rel="noopener">重新安排行程</a></td>
<td align="center"><code>TODO</code></td>
<td align="center">中等</td>
<td align="center">2020-08-27</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center">657</td>
<td><a href="https://leetcode-cn.com/problems/robot-return-to-origin/" target="_blank" rel="noopener">机器人能否返回原点</a></td>
<td align="center"><code>哈希表</code>/<code>算术模拟</code></td>
<td align="center">简单</td>
<td align="center">2020-08-28</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center"></td>
<td><a href=""></a></td>
<td align="center"><code>TODO</code></td>
<td align="center">简单</td>
<td align="center">2020-08-29</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center"></td>
<td><a href=""></a></td>
<td align="center"><code>TODO</code></td>
<td align="center">简单</td>
<td align="center">2020-08-30</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center"></td>
<td><a href=""></a></td>
<td align="center"><code>TODO</code></td>
<td align="center">简单</td>
<td align="center">2020-08-31</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
</tbody></table>
<h4 id="2020年9月"><a href="#2020年9月" class="headerlink" title="2020年9月"></a>2020年9月</h4><table>
<thead>
<tr>
<th align="center">#</th>
<th>题名</th>
<th align="center">知识点</th>
<th align="center">难度</th>
<th align="center">提交时间</th>
<th align="center">start</th>
</tr>
</thead>
<tbody><tr>
<td align="center"></td>
<td><a href=""></a></td>
<td align="center"><code>TODO</code></td>
<td align="center">简单</td>
<td align="center">2020-09-01</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center"></td>
<td><a href=""></a></td>
<td align="center"><code>TODO</code></td>
<td align="center">简单</td>
<td align="center">2020-09-02</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center"></td>
<td><a href=""></a></td>
<td align="center"><code>TODO</code></td>
<td align="center">简单</td>
<td align="center">2020-09-03</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center"></td>
<td><a href=""></a></td>
<td align="center"><code>TODO</code></td>
<td align="center">简单</td>
<td align="center">2020-09-04</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center"></td>
<td><a href=""></a></td>
<td align="center"><code>TODO</code></td>
<td align="center">简单</td>
<td align="center">2020-09-05</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center"></td>
<td><a href=""></a></td>
<td align="center"><code>TODO</code></td>
<td align="center">简单</td>
<td align="center">2020-09-06</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center"></td>
<td><a href=""></a></td>
<td align="center"><code>TODO</code></td>
<td align="center">简单</td>
<td align="center">2020-09-07</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center"></td>
<td><a href=""></a></td>
<td align="center"><code>TODO</code></td>
<td align="center">简单</td>
<td align="center">2020-09-08</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center"></td>
<td><a href=""></a></td>
<td align="center"><code>TODO</code></td>
<td align="center">简单</td>
<td align="center">2020-09-09</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center"></td>
<td><a href=""></a></td>
<td align="center"><code>TODO</code></td>
<td align="center">简单</td>
<td align="center">2020-09-10</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center"></td>
<td><a href=""></a></td>
<td align="center"><code>TODO</code></td>
<td align="center">简单</td>
<td align="center">2020-09-11</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center"></td>
<td><a href=""></a></td>
<td align="center"><code>TODO</code></td>
<td align="center">简单</td>
<td align="center">2020-09-12</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center"></td>
<td><a href=""></a></td>
<td align="center"><code>TODO</code></td>
<td align="center">简单</td>
<td align="center">2020-09-13</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center"></td>
<td><a href=""></a></td>
<td align="center"><code>TODO</code></td>
<td align="center">简单</td>
<td align="center">2020-09-14</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center"></td>
<td><a href=""></a></td>
<td align="center"><code>TODO</code></td>
<td align="center">简单</td>
<td align="center">2020-09-15</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center"></td>
<td><a href=""></a></td>
<td align="center"><code>TODO</code></td>
<td align="center">简单</td>
<td align="center">2020-09-16</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center"></td>
<td><a href=""></a></td>
<td align="center"><code>TODO</code></td>
<td align="center">简单</td>
<td align="center">2020-09-17</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center"></td>
<td><a href=""></a></td>
<td align="center"><code>TODO</code></td>
<td align="center">简单</td>
<td align="center">2020-09-18</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center"></td>
<td><a href=""></a></td>
<td align="center"><code>TODO</code></td>
<td align="center">简单</td>
<td align="center">2020-09-19</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center"></td>
<td><a href=""></a></td>
<td align="center"><code>TODO</code></td>
<td align="center">简单</td>
<td align="center">2020-09-20</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center"></td>
<td><a href=""></a></td>
<td align="center"><code>TODO</code></td>
<td align="center">简单</td>
<td align="center">2020-09-21</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center"></td>
<td><a href=""></a></td>
<td align="center"><code>TODO</code></td>
<td align="center">简单</td>
<td align="center">2020-09-22</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center"></td>
<td><a href=""></a></td>
<td align="center"><code>TODO</code></td>
<td align="center">简单</td>
<td align="center">2020-09-23</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center"></td>
<td><a href=""></a></td>
<td align="center"><code>TODO</code></td>
<td align="center">简单</td>
<td align="center">2020-09-24</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center"></td>
<td><a href=""></a></td>
<td align="center"><code>TODO</code></td>
<td align="center">简单</td>
<td align="center">2020-09-25</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center"></td>
<td><a href=""></a></td>
<td align="center"><code>TODO</code></td>
<td align="center">简单</td>
<td align="center">2020-09-26</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center"></td>
<td><a href=""></a></td>
<td align="center"><code>TODO</code></td>
<td align="center">简单</td>
<td align="center">2020-09-27</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center"></td>
<td><a href=""></a></td>
<td align="center"><code>TODO</code></td>
<td align="center">简单</td>
<td align="center">2020-09-28</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center"></td>
<td><a href=""></a></td>
<td align="center"><code>TODO</code></td>
<td align="center">简单</td>
<td align="center">2020-09-29</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center"></td>
<td><a href=""></a></td>
<td align="center"><code>TODO</code></td>
<td align="center">简单</td>
<td align="center">2020-09-30</td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
</tbody></table>
<h3 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h3><h4 id="滚动数组"><a href="#滚动数组" class="headerlink" title="滚动数组"></a>滚动数组</h4><blockquote>
<p>滚动数组是<code>DP</code>中的一种编程思想。简单的理解就是让数组滚动起来，每次都使用固定的几个存储空间，来达到压缩，节省存储空间的作用。起到优化空间，主要应用在递推或动态规划中(如01背包问题)。因为DP题目是一个自底向上的扩展过程，我们常常需要用到的是连续的解，前面的解往往可以舍去。所以用滚动数组优化是很有效的。利用滚动数组的话在N很大的情况下可以达到压缩存储的作用。</p>
</blockquote>
<h4 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h4>]]></content>
      <categories>
        <category>在线编程</category>
      </categories>
      <tags>
        <tag>剑指offer</tag>
        <tag>程序员面试金典</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>牛客在线刷题</title>
    <url>/c8d023e3/</url>
    <content><![CDATA[<p>前言</p>
<blockquote>
<p>这里简单记录下<code>牛客在线刷题</code>记录</p>
</blockquote>
<a id="more"></a>

<div class="note info"><p><a href="https://www.nowcoder.com/" target="_blank" rel="noopener">牛客官网</a></p>
</div>

<h3 id="华为机试"><a href="#华为机试" class="headerlink" title="华为机试"></a>华为机试</h3><p><a href="https://www.nowcoder.com/ta/huawei" target="_blank" rel="noopener">在线练习</a></p>
<table>
<thead>
<tr>
<th align="center">题号</th>
<th>题名</th>
<th align="center">知识点</th>
<th align="center">难度</th>
<th align="center">提交时间</th>
</tr>
</thead>
<tbody><tr>
<td align="center">JC001</td>
<td>字符串最后一个单词的长度</td>
<td align="center"><code>字符串</code></td>
<td align="center">较难</td>
<td align="center">2020-06-28</td>
</tr>
<tr>
<td align="center">JC002</td>
<td>计算字符个数</td>
<td align="center"><code>字符串</code> <code>哈希表</code></td>
<td align="center">较难</td>
<td align="center">2020-06-28</td>
</tr>
<tr>
<td align="center">JC003</td>
<td>明明的随机数</td>
<td align="center"><code>数组</code></td>
<td align="center">较难</td>
<td align="center">2020-06-28</td>
</tr>
<tr>
<td align="center">JC004</td>
<td>字符串分隔</td>
<td align="center"><code>字符串</code></td>
<td align="center">较难</td>
<td align="center">2020-06-29</td>
</tr>
<tr>
<td align="center">JC005</td>
<td>进制转换</td>
<td align="center"><code>字符串</code></td>
<td align="center">中等</td>
<td align="center">2020-06-29</td>
</tr>
<tr>
<td align="center">JC006</td>
<td>质数因子</td>
<td align="center"><code>质数</code></td>
<td align="center">中等</td>
<td align="center">2020-06-29</td>
</tr>
<tr>
<td align="center">JC007</td>
<td>取近似值</td>
<td align="center"><code>数学</code></td>
<td align="center">入门</td>
<td align="center">2020-06-29</td>
</tr>
<tr>
<td align="center">JC008</td>
<td>合并表记录</td>
<td align="center"><code>字典</code></td>
<td align="center">中等</td>
<td align="center">2020-06-29</td>
</tr>
<tr>
<td align="center">JC009</td>
<td>提取不重复的整数</td>
<td align="center"><code>数组</code> <code>哈希</code></td>
<td align="center">中等</td>
<td align="center">2020-06-29</td>
</tr>
<tr>
<td align="center">JC010</td>
<td>字符个数统计</td>
<td align="center"><code>字符串</code> <code>哈希</code></td>
<td align="center">中等</td>
<td align="center">2020-06-29</td>
</tr>
<tr>
<td align="center">JC011</td>
<td>数字颠倒</td>
<td align="center"><code>字符串</code></td>
<td align="center">简单</td>
<td align="center">2020-06-29</td>
</tr>
</tbody></table>
<h3 id="面试宝典"><a href="#面试宝典" class="headerlink" title="面试宝典"></a>面试宝典</h3><p><a href="https://www.nowcoder.com/tutorial/93/8ba2828006dd42879f3a9029eabde9f1" target="_blank" rel="noopener">https://www.nowcoder.com/tutorial/93/8ba2828006dd42879f3a9029eabde9f1</a></p>
<h4 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h4><h5 id="基础语言I"><a href="#基础语言I" class="headerlink" title="基础语言I"></a>基础语言I</h5><ul>
<li>static关键字</li>
<li>c++和c的区别</li>
<li>c++的四种强制类型转换</li>
<li>指针和引用的区别</li>
<li>给定三角形ABC和P，判断P时候在ABC内<blockquote>
<p>面积法、向量叉乘</p>
</blockquote>
</li>
<li>智能指针<strong>shared_ptr</strong></li>
<li>数组和指针</li>
<li>指针和引用</li>
</ul>
<h5 id="基础语言II"><a href="#基础语言II" class="headerlink" title="基础语言II"></a>基础语言II</h5><ul>
<li>析构函数<blockquote>
<p><code>virtual</code>、虚表、虚指针<br>析构函数默认非<code>virtual</code><br>析构函数的作用：</p>
</blockquote>
</li>
<li>函数指针和指针函数<blockquote>
<p>指针函数：int*   fun(int x, int y);<br>函数指针：int (*fun)(int x, int y);</p>
</blockquote>
</li>
<li>静态函数和虚函数<blockquote>
<p>静态绑定、动态绑定、虚函数表</p>
</blockquote>
</li>
<li>重载、重写(覆盖)、隐藏<blockquote>
<p>重载(overload)：在同一作用域中，同名函数的形式参数(参数个数、类型或者顺序)不同时，构成函数重载，与返回值类型无关<br>重写/覆盖(override)：派生类中与基类同返回值类型、同名和同参数的虚函数重定义，构成虚函数覆盖，也叫虚函数重写，基类中被重写的函数必须有<code>virtual</code>修饰<br>隐藏(hiding)：指派生类的函数屏蔽了与其同名的基类函数。注意只要同名函数，不管参数列表是否相同，基类函数都会被隐藏</p>
</blockquote>
</li>
<li><code>strcpy</code>和<code>strlen</code><blockquote>
<p>以’\0’为结束符</p>
</blockquote>
</li>
<li>虚函数和多态<blockquote>
<p>静态多态：重载、模板多态<br>动态多态：用虚函数机制实现的，在运行期间动态绑定，使用了虚函数，会增加访问内存开销，降低效率</p>
</blockquote>
</li>
<li><code>++i</code>和<code>i++</code><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>&amp; <span class="keyword">int</span>::<span class="keyword">operator</span>++()</span><br><span class="line">&#123;</span><br><span class="line">    *<span class="keyword">this</span> += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">int</span> <span class="title">int::operator</span><span class="params">(<span class="keyword">int</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> oldValue = *<span class="keyword">this</span>;</span><br><span class="line">    ++(*<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>写个函数在<code>main</code>函数执行前先运行<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> __<span class="title">attribute__</span><span class="params">((constructor))</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> __<span class="title">attribute__</span><span class="params">((destructor))</span></span>;</span><br></pre></td></tr></table></figure></li>
<li>四行代码的区别<blockquote>
<p><a href="https://blog.csdn.net/u012306391/article/details/102837750" target="_blank" rel="noopener">https://blog.csdn.net/u012306391/article/details/102837750</a></p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* arr = <span class="string">"123"</span>;</span><br><span class="line"><span class="keyword">char</span>* brr = <span class="string">"123"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> crr[] = <span class="string">"123"</span>;</span><br><span class="line"><span class="keyword">char</span> drr[] = <span class="string">"123"</span>;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h5 id="基础语言III"><a href="#基础语言III" class="headerlink" title="基础语言III"></a>基础语言III</h5><ul>
<li>栈空间的最大值<blockquote>
<p>Windows下，默认栈空间大小为2MB<br>Linux下，默认栈空间大小为8MB，可通过<code>ulimit -s</code>来设置<br>Windows更改栈空间大小的方法：<br>link时用<code>/STACK</code>指定它的大小，或者在.def中使用<code>STACKSIZE</code>指定它的大小。<br>使用控制台命令<code>EDITBIN</code>更改exe的栈空间大小</p>
</blockquote>
</li>
<li>extern “C”</li>
<li>new/delete与malloc/free区别</li>
<li>RTTI(运行期类型识别)和RAII(以对象管理资源)<blockquote>
<p><a href="https://blog.csdn.net/speargod/article/details/100127395" target="_blank" rel="noopener">https://blog.csdn.net/speargod/article/details/100127395</a></p>
</blockquote>
</li>
<li>c++虚函数表怎么实现运行时多态 虚函数表指针</li>
<li>c语言怎么进行函数调用 函数栈</li>
<li>c语言参数压栈顺序 从右往左</li>
<li>c++如何处理返回值 生成临时变量，把它的引用作为函数参数传入函数内</li>
<li>select模型</li>
<li>fork、wait和exec函数</li>
</ul>
<h5 id="容器和算法"><a href="#容器和算法" class="headerlink" title="容器和算法"></a>容器和算法</h5><ul>
<li>map和set的区别，底层实现<blockquote>
<p>都是关联式容器，底层实现都是红黑树(RB-Tree)，一种平衡二叉搜索树<br>map：所有元素都是pair(key-value)，会根据元素的value自动排序，key不允许重复<br>set：所有元素会根据元素的值(key即value)自动排序，且不允许重复</p>
</blockquote>
</li>
<li>STL的allocaotr<br>c++的内存配置和释放：<blockquote>
<p>new运算分为两个阶段：(1)调用operator new配置内存；(2)调用对象的构造函数构造对象内容<br>delete运算分为两个阶段：(1)调用对象的析构函数；(2)调用operator delete释放内存</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">STL allocator将两个阶段操作区分开来：内存配置有alloc::allocate()负责，内存释放由alloc::deallocate()</span><br><span class="line">负责；对象构造由::construct()负责，对象析构由::destroy()负责</span><br><span class="line"></span><br><span class="line">同时为了提升内存管理的效率，减少申请小内存造成的内存碎片问题，SGI STL采用了两级配置器，当分配的空间大小</span><br><span class="line">超过128B时，会使用第一级空间配置器；当分配的空间大小小于128B时，将使用第二级空间配置器。第一级空间配置器</span><br><span class="line">直接使用malloc()、realloc()、free()函数进行内存空间的分配和释放，而第二级空间配置器采用了内存池技术，</span><br><span class="line">通过空闲链表来管理内存</span><br></pre></td></tr></table></figure></li>
<li>迭代器删除元素<blockquote>
<p>迭代器失效问题</p>
</blockquote>
</li>
<li>STL中map数据存放形式<blockquote>
<p>map底层是红黑树；unordered_map底层是哈希表</p>
</blockquote>
</li>
<li>STL的基本组成<blockquote>
<p>容器、迭代器、仿函数、算法、分配器和配接器</p>
</blockquote>
</li>
<li>STL中map与unordered_map<blockquote>
<p>map(有序)底层是红黑树；unordered_map(无序)底层是哈希表</p>
</blockquote>
</li>
<li>vector与list的区别及应用<blockquote>
<p>vector：动态数组，经常随机访问，不经常对非尾节点进行插入删除<br>list：动态链表，经常插入删除，随机访问效率差</p>
</blockquote>
</li>
<li>STL中迭代器的作用，有指针为何还有迭代器<blockquote>
<p>迭代器不是指针，是类模板，表现的像指针<br>迭代器返回的是对象引用而不是对象的值，所以cout只能输出迭代器使用<code>*</code>解引用后的值而不能直接输出迭代器本身</p>
</blockquote>
</li>
<li>epoll模型的原理<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_create</span><span class="params">(<span class="keyword">int</span> size)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_ctl</span><span class="params">(<span class="keyword">int</span> epfd, <span class="keyword">int</span> op, <span class="keyword">int</span> fd, struct epoll_event *event)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_wait</span><span class="params">(<span class="keyword">int</span> epfd, struct epoll_event *events, <span class="keyword">int</span> maxevents, <span class="keyword">int</span> timeout)</span></span>;</span><br></pre></td></tr></table></figure></li>
<li>STL迭代器是怎么删除元素的<blockquote>
<p>迭代器失效问题</p>
</blockquote>
</li>
<li>STL的resize和reservere的区别<blockquote>
<p>resize()：改变当前容器内含有元素的数量(size())，会新增len-size个元素，默认值为0<br>reserve()：改变当前容器的最大容量(capacity())，不会生成元素<br>ps. vector一次性分配好内存，内存不够时才进行2倍扩容(win+vs2019下测试与该说法不一致，如下)</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    v.reserve(<span class="number">100</span>);</span><br><span class="line">    v.resize(<span class="number">50</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; v.size() &lt;&lt; <span class="string">"  "</span> &lt;&lt; v.capacity() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">//50  100</span></span><br><span class="line"></span><br><span class="line">    v.resize(<span class="number">150</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; v.size() &lt;&lt; <span class="string">"  "</span> &lt;&lt; v.capacity() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">//150  150</span></span><br><span class="line"></span><br><span class="line">    v.reserve(<span class="number">50</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; v.size() &lt;&lt; <span class="string">"  "</span> &lt;&lt; v.capacity() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">//150  150</span></span><br><span class="line"></span><br><span class="line">    v.resize(<span class="number">50</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; v.size() &lt;&lt; <span class="string">"  "</span> &lt;&lt; v.capacity() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">//50  150</span></span><br><span class="line"></span><br><span class="line">    v.shrink_to_fit();</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; v.size() &lt;&lt; <span class="string">"  "</span> &lt;&lt; v.capacity() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>; <span class="comment">//50  50</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><em>O(n)实现无需数组，查找每个元素后比它大的第一个数</em></li>
</ul>
<h5 id="类和数据抽象"><a href="#类和数据抽象" class="headerlink" title="类和数据抽象"></a>类和数据抽象</h5><ul>
<li>类成员的访问权限<blockquote>
<p>private：只能在类的成员函数和友元函数中访问，不能被其他访问，类的对象也不能访问<br>protected：可以在类的成员函数、子类的成员函数和友元函数访问，但不能被该类的对象访问<br>public：可以在类的成员函数、子类的成员函数和友元函数访问，也可以被该类的对象访问</p>
</blockquote>
</li>
<li>struct和class的区别<blockquote>
<p>struct默认继承权限和默认访问权限是public，而class的默认继承权限和默认访问权限是private<br>初次之外，二者没有其他区别，struct多用于定义数据类型，class多用于定义对象类型</p>
</blockquote>
</li>
<li>c++类内如何定义引用数据成员<br>c++类内可以定义引用成员变量，但要遵循以下三个规则：<blockquote>
<p>不能用默认构造函数初始化，必须提供构造函数来初始化引用成员变量，否则会造成引用未初始化错误<br>构造函数的形参也必须是引用类型<br>不能在构造函数里初始化，必须在初始化列表中进行初始化</p>
</blockquote>
</li>
</ul>
<h5 id="面向对象与泛型编程"><a href="#面向对象与泛型编程" class="headerlink" title="面向对象与泛型编程"></a>面向对象与泛型编程</h5><ul>
<li>右值引用、移动语义和完美转发</li>
</ul>
<h5 id="编译与底层"><a href="#编译与底层" class="headerlink" title="编译与底层"></a>编译与底层</h5><h5 id="c-11"><a href="#c-11" class="headerlink" title="c++11"></a>c++11</h5><h4 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h4><h4 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h4><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><h4 id="算法与数据结构"><a href="#算法与数据结构" class="headerlink" title="算法与数据结构"></a>算法与数据结构</h4><h4 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h4>]]></content>
      <categories>
        <category>在线编程</category>
      </categories>
      <tags>
        <tag>nowcoder</tag>
        <tag>剑指offer</tag>
        <tag>程序员面试金典</tag>
      </tags>
  </entry>
  <entry>
    <title>谷歌上网助手安装教程</title>
    <url>/9818f6ba/</url>
    <content><![CDATA[<p>前言</p>
<blockquote>
<p>这里简单记录下<code>谷歌上网助手Ghelper</code>安装教程</p>
</blockquote>
<a id="more"></a>

<p><a href="https://zhuanlan.zhihu.com/p/138167691" target="_blank" rel="noopener">参考教程</a></p>
<h3 id="教程背景"><a href="#教程背景" class="headerlink" title="教程背景"></a>教程背景</h3><p>之前使用过谷歌访问助手，因为官网停止维护，<a href="https://github.com/haotian-wang/google-access-helper" target="_blank" rel="noopener">Github</a>上破解版本的repo也已经清空，虽然网上可能还能找到历史版本，但是使用很不稳定，这里介绍下目前还在维护的谷歌上网助手<a href="http://googlehelper.net/" target="_blank" rel="noopener">Ghelper</a>，可以百度搜索<code>谷歌上网助手</code></p>
<p><img src="/images/%E5%B7%A5%E5%85%B7%E6%96%87%E6%A1%A3/2020-06-01_233158.png" alt=""></p>
<h3 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h3><p>选选择<code>Download For Chrome</code>下载<br>下载完成后，解压，然后打开Chrome，选择 更多工具-&gt;扩展程序，或者在网址输入：<code>chrome://extensions/</code>，开启开发者模式，选择“加载已解压的扩展程序”，选择解压出的<code>ghelper_source</code>，点击确定即可安装成功。</p>
<p><img src="/images/%E5%B7%A5%E5%85%B7%E6%96%87%E6%A1%A3/2020-06-01_235408.png" alt=""></p>
<h3 id="账号注册"><a href="#账号注册" class="headerlink" title="账号注册"></a>账号注册</h3><p>点击<code>Ghelper</code>，根据提示注册账号，完成登录，即可在Chrome访问google搜索、gmail邮箱。<strong>这里我主要是登录谷歌账号，同步书签。</strong></p>
<p><img src="/images/%E5%B7%A5%E5%85%B7%E6%96%87%E6%A1%A3/2020-06-01_235911.png" alt=""></p>
<h3 id="商店安装"><a href="#商店安装" class="headerlink" title="商店安装"></a>商店安装</h3><p>现在就可以访问谷歌应用商店了，如果找不到谷歌应用商店，可以在扩展程序界面点击主菜单，然后“打开Chrome网上应用店”</p>
<p><img src="/images/%E5%B7%A5%E5%85%B7%E6%96%87%E6%A1%A3/2020-06-02_000529.png" alt=""></p>
<p>在应用商店搜索<code>Ghelper</code>，选择“添加至Chrome”</p>
<p><img src="/images/%E5%B7%A5%E5%85%B7%E6%96%87%E6%A1%A3/2020-06-02_000829.png" alt=""></p>
<p>商店安装线上正式版本的好处是，当插件更新时，本地插件也会升级。所以选择商店安装线上版本，现在可以回到扩展程序界面，将<code>谷歌上网助手-源码版</code>删除或停止，保留线上版本即可。</p>
<p><img src="/images/%E5%B7%A5%E5%85%B7%E6%96%87%E6%A1%A3/2020-06-02_001244.png" alt=""></p>
]]></content>
      <categories>
        <category>工具文档</category>
      </categories>
      <tags>
        <tag>谷歌上网助手</tag>
      </tags>
  </entry>
  <entry>
    <title>使用shields.io生成Github徽章图标</title>
    <url>/59189cac/</url>
    <content><![CDATA[<p>前言</p>
<blockquote>
<p>这里简单记录下<code>使用shields.io生成Github徽章图标</code>的教程</p>
</blockquote>
<a id="more"></a>

<p><a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/Node.js-v13.x.x-brightgreen" alt="Node.js version"></a>  <a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1023025597810528" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/npm%20package-v6.x.x-green" alt="NPM version"></a>  <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/Hexo-v4.x.x-red" alt="Hexo version"></a>  <a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/NexT-v8.x.x-blue" alt="NexT version"></a>  <a href="https://opensource.org/licenses/MIT" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/License-MIT-orange" alt="License"></a></p>
<p>Github徽章生成</p>
<ul>
<li><a href="https://shields.io/" target="_blank" rel="noopener">shields.io官网</a></li>
<li><a href="https://www.jianshu.com/p/b8250af73744" target="_blank" rel="noopener">工具资源系列之 github 上各式各样的小徽章从何而来?</a></li>
<li><a href="https://www.jianshu.com/p/f1d931b5df70" target="_blank" rel="noopener">shields.io 使用教程</a></li>
</ul>
]]></content>
      <categories>
        <category>工具文档</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>shields.io</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客和Next主题配置文件_config说明</title>
    <url>/850702d7/</url>
    <content><![CDATA[<p>前言</p>
<blockquote>
<p>这里简单记录下<code>Hexo博客和Next主题配置文件_config</code>说明</p>
</blockquote>
<a id="more"></a>

<h3 id="站点配置文件"><a href="#站点配置文件" class="headerlink" title="站点配置文件"></a>站点配置文件</h3><p>这里是下面配置介绍的环境版本，可能与本博客搭建环境稍有不同：</p>
<blockquote>
<p>Hexo: <code>v4.2.1</code><br>NexT: <code>v7.8.0</code></p>
</blockquote>
<ul>
<li><a href="https://www.xiaocoder.com/2018/07/07/hexo-blog-basis-guide/" target="_blank" rel="noopener">站点配置文件 - 3.2 目录介绍</a></li>
</ul>
<details>
<summary>点击查看</summary>
<figure class="highlight yml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html, 允许自行更换页面语言</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site: 网站配置</span></span><br><span class="line"><span class="comment">## 标题</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">"Xiao's Blog"</span></span><br><span class="line"><span class="comment">## 副标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">"不忘初心, 方得始终"</span></span><br><span class="line"><span class="comment">## 网站描述</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">"不忘初心, 方得始终"</span></span><br><span class="line"><span class="comment">## 网站关键字</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">"Linux,Python"</span></span><br><span class="line"><span class="comment">## 作者</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">"YuXiao"</span></span><br><span class="line"><span class="comment">## 网站语言</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">"zh-CN"</span></span><br><span class="line"><span class="comment">## 时区</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">'Asia/Shanghai'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL: 网址配置</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="comment">## 文章链接地址格式</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory: 目录设置</span></span><br><span class="line"><span class="comment">## 资源目录</span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span></span><br><span class="line"><span class="comment">## 公共目录, 存放生成的静态文件</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span></span><br><span class="line"><span class="comment">## 标签目录, 默认是tags, 实际存放在source/tags中</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span></span><br><span class="line"><span class="comment">## 档案目录, 默认是archives, 实际存放在source/archives中</span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span></span><br><span class="line"><span class="comment">## 分类目录, 默认是categories, 实际存放在source/categories中</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span></span><br><span class="line"><span class="comment">## 代码目录, 默认是downloads/code</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span></span><br><span class="line"><span class="comment">## 国际化目录, 默认跟language相同</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span></span><br><span class="line"><span class="comment">## 不需要渲染的文件或文件夹</span></span><br><span class="line"><span class="attr">skip_render:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">'robots.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing: 写作配置</span></span><br><span class="line"><span class="comment">## 新建博文的默认名称</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span></span><br><span class="line"><span class="comment">## 默认布局模板</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span></span><br><span class="line"><span class="comment">## 是否将标题转换成标题形式（首字母大写）</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">external_link:</span></span><br><span class="line">  <span class="comment">## 在新标签页面中打开网页</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span></span><br><span class="line">  <span class="attr">exclude:</span> <span class="string">''</span></span><br><span class="line"><span class="comment">## 把文件名称转换为禁用(0)、小写(1)、大写(2)</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="comment">## 是否显示草稿</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment">## 启用Asset目录, 文章资源目录</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">## 将链接改为与根目录的相对路径</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment">## 显示未来的文章</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">## 代码块的配置</span></span><br><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="comment">### 是否启用代码块</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">### 是否显示行数</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">### 是否自动检测语言</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">### 将tab替换为N个空格</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="number">4</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Home page setting: 主页设置</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="comment">### 索引页的根路径</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">''</span></span><br><span class="line">  <span class="comment">### 每页的文章数</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">5</span></span><br><span class="line">  <span class="comment">### 排序方式</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag: 分类与标签</span></span><br><span class="line"><span class="comment">## 默认分类</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span></span><br><span class="line"><span class="attr">tag_map:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Metadata elements: 元数据元素</span></span><br><span class="line"><span class="attr">meta_generator:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo 使用 Moment.js 来解析与显示时间</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span></span><br><span class="line"><span class="comment">## 若未提供更新日期，则使用发布日期</span></span><br><span class="line"><span class="attr">use_date_for_updated:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination: 分页配置</span></span><br><span class="line"><span class="comment">## 设置 per_page 值为 0 则禁用分页</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 归档页的分页设置</span></span><br><span class="line"><span class="attr">archive_generator:</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">yearly:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">monthly:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 标签页的分页设置</span></span><br><span class="line"><span class="attr">tag_generator:</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions: 拓展配置</span></span><br><span class="line"><span class="comment">## 主题</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Sitemap: 站点地图</span></span><br><span class="line"><span class="comment">## 谷歌站点地图</span></span><br><span class="line"><span class="comment">## 依赖插件: npm install --no-optional --save hexo-generator-sitemap</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line"><span class="comment">## 百度站点地图</span></span><br><span class="line"><span class="comment">## 依赖插件: npm install --no-optional --save hexo-generator-baidu-sitemap</span></span><br><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidusitemap.xml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Local Search: 本地搜索插件</span></span><br><span class="line"><span class="comment">## 依赖插件: npm install --no-optional --save hexo-generator-search</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment: 部署配置</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">"rsync"</span></span><br><span class="line">  <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">user:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">root:</span> <span class="string">/data/www</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">22</span></span><br></pre></td></tr></table></figure>
</details>

<h3 id="主题配置文件"><a href="#主题配置文件" class="headerlink" title="主题配置文件"></a>主题配置文件</h3><ul>
<li><a href="https://www.xiaocoder.com/2018/07/15/hexo-blog-optimizing-guide/" target="_blank" rel="noopener">主题配置文件 - 2 配置文件</a></li>
</ul>
<details>
<summary>点击查看</summary>
<figure class="highlight yml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># Hexo's Version: 4.2.0</span></span><br><span class="line"><span class="comment"># NexT's Version: 7.8.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否覆盖NexT主题的默认配置</span></span><br><span class="line"><span class="comment">## true: 覆盖默认配置, 必须包含所有的配置项</span></span><br><span class="line"><span class="comment">## false: 合并默认配置, 无需包含所有的配置项</span></span><br><span class="line"><span class="attr">override:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否提醒有新版本</span></span><br><span class="line"><span class="attr">reminder:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除垃圾文件</span></span><br><span class="line"><span class="attr">minify:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义配置文件的路径</span></span><br><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br><span class="line">  <span class="attr">footer:</span> <span class="string">source/_data/footer.swig</span></span><br><span class="line">  <span class="attr">variable:</span> <span class="string">source/_data/variables.styl</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自定义站点图标</span></span><br><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">images/favicon.png</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">images/favicon.png</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">images/favicon.png</span></span><br><span class="line">  <span class="attr">safari_pinned_tab:</span> <span class="string">images/favicon.svg</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 页脚 - 是否显示语言切换</span></span><br><span class="line"><span class="attr">language_switcher:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 页脚 - 配置信息</span></span><br><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="comment">## 指定站点的起始年</span></span><br><span class="line">  <span class="attr">since:</span> <span class="number">2017</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">## 配置年份与版权信息之间的图标</span></span><br><span class="line">  <span class="attr">icon:</span></span><br><span class="line">    <span class="comment">### Font Awesome字体图标中的名称</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">heartbeat</span></span><br><span class="line">    <span class="comment">### 设置图标为动态的</span></span><br><span class="line">    <span class="attr">animated:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">### 图标颜色</span></span><br><span class="line">    <span class="attr">color:</span> <span class="string">"#CB1B45"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">## 版权信息</span></span><br><span class="line">  <span class="attr">copyright:</span> <span class="string">YuXiao</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">## 由 Hexo&amp;NexT 提供支持</span></span><br><span class="line">  <span class="attr">powered:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 主题样式</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Pisces</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 暗黑模式</span></span><br><span class="line"><span class="attr">darkmode:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导航栏</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">/about/</span> <span class="string">||</span> <span class="string">user</span></span><br><span class="line">  <span class="attr">messages:</span> <span class="string">/messages/</span> <span class="string">||</span> <span class="string">comments</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 图标和勋章</span></span><br><span class="line"><span class="attr">menu_settings:</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">badges:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 侧边栏头像</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">images/favicon.png</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 社交链接</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">QQ:</span> <span class="string">https://www.xiaocoder.com/images/QQ.png</span> <span class="string">||</span> <span class="string">qq</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/YuXiaoCoder</span> <span class="string">||</span> <span class="string">github</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="string">mailto:xiao.950901@gmail.com</span> <span class="string">||</span> <span class="string">envelope</span></span><br><span class="line"></span><br><span class="line"><span class="attr">social_icons:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">icons_only:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">transition:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">links_settings:</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">link</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">友链</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="string">block</span></span><br><span class="line"></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line">  <span class="attr">WordJian:</span> <span class="string">http://wordjian.com/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文章底部 - 标签是否使用图标</span></span><br><span class="line"><span class="attr">tag_icon:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打赏</span></span><br><span class="line"><span class="attr">reward_settings:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">animation:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">comment:</span> <span class="string">"请作者喝瓶肥宅快乐水"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="attr">wechatpay:</span> <span class="string">images/wechat-reward-image.png</span></span><br><span class="line">  <span class="attr">alipay:</span> <span class="string">images/alipay-reward-image.png</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自适应移动设备</span></span><br><span class="line"><span class="attr">mobile_layout_economy:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 代码块</span></span><br><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="attr">highlight_theme:</span> <span class="string">"night eighties"</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">style:</span> <span class="string">default</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 回到顶部</span></span><br><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 阅读进度条</span></span><br><span class="line"><span class="attr">reading_progress:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available values: top | bottom</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">"#37c6c0"</span></span><br><span class="line">  <span class="attr">height:</span> <span class="string">3px</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 书签</span></span><br><span class="line"><span class="attr">bookmark:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">"#222"</span></span><br><span class="line">  <span class="attr">save:</span> <span class="string">auto</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索引擎</span></span><br><span class="line"><span class="comment">## 在移动设备上禁止百度转换</span></span><br><span class="line"><span class="attr">disable_baidu_transformation:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 将站点信息添加到索引</span></span><br><span class="line"><span class="attr">index_with_subtitle:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动对外部 URL 使用 Base64 加密/解密</span></span><br><span class="line"><span class="attr">exturl:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 百度站长验证</span></span><br><span class="line"><span class="attr">baidu_site_verification:</span> <span class="string">"twxo1mIvsV"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 自动推送给百度，方便收录</span></span><br><span class="line"><span class="attr">baidu_push:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 支持图片的缩放功能</span></span><br><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 延迟加载</span></span><br><span class="line"><span class="attr">lazyload:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 支持空白字符</span></span><br><span class="line"><span class="attr">pangu:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 快速链接</span></span><br><span class="line"><span class="attr">quicklink:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">home:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">archive:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">delay:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">3000</span></span><br><span class="line">  <span class="attr">priority:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">ignores:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Valine - 评论</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">appid:</span> <span class="string">"&lt;LeanCloud ID&gt;"</span></span><br><span class="line">  <span class="attr">appkey:</span> <span class="string">"&lt;LeanCloud KEY&gt;"</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="literal">true</span> <span class="comment"># Mail notifier</span></span><br><span class="line">  <span class="attr">verify:</span> <span class="literal">true</span> <span class="comment"># Verification code</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">"ヾﾉ≧∀≦)o来啊，快活啊!"</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">robohash</span></span><br><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,mail</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">5</span> <span class="comment"># Pagination size</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">zh-cn</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">comment_count:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">recordIP:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不蒜子 - 网站计数</span></span><br><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors_icon:</span> <span class="string">user</span></span><br><span class="line">  <span class="attr">total_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_views_icon:</span> <span class="string">eye</span></span><br><span class="line">  <span class="attr">post_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_views_icon:</span> <span class="string">eye</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地搜索</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">trigger:</span> <span class="string">auto</span></span><br><span class="line">  <span class="attr">top_n_per_article:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">unescape:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注释标签</span></span><br><span class="line"><span class="attr">note:</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">flat</span></span><br><span class="line">  <span class="attr">icons:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">light_bg_offset:</span> <span class="number">-18</span> <span class="string">|</span> <span class="number">6</span></span><br></pre></td></tr></table></figure>
</details>
]]></content>
      <categories>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客的NexT主题美化和功能增强(二)</title>
    <url>/21493ef0/</url>
    <content><![CDATA[<p>前言</p>
<blockquote>
<p>这里简单记录下<code>Hexo博客的NexT主题</code>美化和功能增强</p>
</blockquote>
<a id="more"></a>

<div class="note info"><p>Hexo博客的NexT主题美化和功能增强(一) <a href="https://blog.kang1024.tk/b7a7c499/">去看看</a></p>
</div>

<p><strong>环境版本说明</strong></p>
<blockquote>
<p>Hexo: <code>v4.2.1</code><br>NexT: <code>v8.0.0_rc.3</code></p>
</blockquote>
<h3 id="标签插件应用"><a href="#标签插件应用" class="headerlink" title="标签插件应用"></a>标签插件应用</h3><ul>
<li><a href="http://nobug.live/posts/6b216eb7/" target="_blank" rel="noopener">Hexo-Next 主题内置标签的使用</a></li>
</ul>
<div class="note info"><p>完整标签列表：详见<a href="https://hexo.io/zh-cn/docs/tag-plugins.html" target="_blank" rel="noopener">Hexo官网</a></p>
</div>

<ul>
<li><p>文本居中引用，使用<code>centerquote</code>简写<code>cq</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 标签别名 --&gt;</span><br><span class="line">&#123;% cq %&#125;</span><br><span class="line">人的一切痛苦，本质上都是对自己的无能的愤怒。</span><br><span class="line">——王小波</span><br><span class="line">&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>
<p>效果展示：</p>
<!-- 标签别名 -->
<blockquote class="blockquote-center">
<i class="fa fa-quote-left"></i>
<p>人的一切痛苦，本质上都是对自己的无能的愤怒。<br>——王小波</p>

<i class="fa fa-quote-right"></i>
</blockquote>
</li>
<li><p><code>Bootstrap Callout</code>的使用方法</p>
</li>
</ul>
<p>修改主题配置<code>_config.yml</code>，有几种style可选，这里我选择<code>flat</code>，设置图标显示<code>icons: true</code></p>
<figure class="highlight diff"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"># Note tag (bs-callout)</span><br><span class="line">note:</span><br><span class="line">  # Note tag style values:</span><br><span class="line">  #  - simple    bs-callout old alert style. Default.</span><br><span class="line">  #  - modern    bs-callout new (v2-v3) alert style.</span><br><span class="line">  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br><span class="line">  #  - disabled  disable all CSS styles import of note tag.</span><br><span class="line"><span class="deletion">-  style: simple</span></span><br><span class="line"><span class="addition">+   style: flat</span></span><br><span class="line"><span class="deletion">-  icons: false</span></span><br><span class="line"><span class="addition">+  icons: true</span></span><br><span class="line">  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span><br><span class="line">  # Offset also applied to label tag variables. This option can work with disabled note tag.</span><br><span class="line">  light_bg_offset: 0</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% note class_name %&#125;</span><br><span class="line">这是一个 class_name 批注。</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>
<p>其中，<code>class_name</code>可以是以下列表中的一个值：</p>
<blockquote>
<p><code>default</code><br><code>primary</code><br><code>success</code><br><code>info</code><br><code>warning</code><br><code>danger</code></p>
</blockquote>
<p>效果展示：</p>
<div class="note default"><p>这是一个 default 批注。</p>
</div>

<div class="note primary"><p>这是一个 primary 批注。</p>
</div>

<div class="note success"><p>这是一个 success 批注。</p>
</div>

<div class="note info"><p>这是一个 info 批注。</p>
</div>

<div class="note warning"><p>这是一个 warning 批注。</p>
</div>

<div class="note danger"><p>这是一个 danger 批注。</p>
</div>

<h3 id="添加颜色块和边框颜色"><a href="#添加颜色块和边框颜色" class="headerlink" title="添加颜色块和边框颜色"></a>添加颜色块和边框颜色</h3><p>在主题的<code>custom.styl</code>文件中新增css样式配置，修改如下：</p>
<details>
<summary>点击查看</summary>
<figure class="highlight styl"><figcaption><span>themes\next\source\css\_custom\custom.styl</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// 颜色块红色</span></span><br><span class="line">span<span class="selector-id">#inline-red</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline;</span><br><span class="line">  padding: .1em .6em .1em;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">80%</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">vertical-align</span>: baseline;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#df3e3e</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 颜色块黄色</span></span><br><span class="line">span<span class="selector-id">#inline-yellow</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline;</span><br><span class="line">  padding: .1em .6em .1em;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">80%</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">vertical-align</span>: baseline;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f0ad4e</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 颜色块绿色</span></span><br><span class="line">span<span class="selector-id">#inline-green</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline;</span><br><span class="line">  padding: .1em .6em .1em;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">80%</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">vertical-align</span>: baseline;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#5cb85c</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 颜色块蓝色</span></span><br><span class="line">span<span class="selector-id">#inline-blue</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline;</span><br><span class="line">  padding: .1em .6em .1em;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">80%</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">vertical-align</span>: baseline;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#2780e3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 颜色块紫色</span></span><br><span class="line">span<span class="selector-id">#inline-purple</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline;</span><br><span class="line">  padding: .1em .6em .1em;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">80%</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">vertical-align</span>: baseline;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#9954bb</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 左侧边框红色</span></span><br><span class="line">p<span class="selector-id">#div-border-left-red</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">border-left-width</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">border-left-color</span>: <span class="number">#df3e3e</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 左侧边框黄色</span></span><br><span class="line">p<span class="selector-id">#div-border-left-yellow</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">border-left-width</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">border-left-color</span>: <span class="number">#f0ad4e</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 左侧边框绿色</span></span><br><span class="line">p<span class="selector-id">#div-border-left-green</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">border-left-width</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">border-left-color</span>: <span class="number">#5cb85c</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 左侧边框蓝色</span></span><br><span class="line">p<span class="selector-id">#div-border-left-blue</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">border-left-width</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">border-left-color</span>: <span class="number">#2780e3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 左侧边框紫色</span></span><br><span class="line">p<span class="selector-id">#div-border-left-purple</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">border-left-width</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">border-left-color</span>: <span class="number">#9954bb</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 右侧边框红色</span></span><br><span class="line">p<span class="selector-id">#div-border-right-red</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">border-right-width</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">border-right-color</span>: <span class="number">#df3e3e</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 右侧边框黄色</span></span><br><span class="line">p<span class="selector-id">#div-border-right-yellow</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">border-right-width</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">border-right-color</span>: <span class="number">#f0ad4e</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 右侧边框绿色</span></span><br><span class="line">p<span class="selector-id">#div-border-right-green</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">border-right-width</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">border-right-color</span>: <span class="number">#5cb85c</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 右侧边框蓝色</span></span><br><span class="line">p<span class="selector-id">#div-border-right-blue</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">border-right-width</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">border-right-color</span>: <span class="number">#2780e3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 右侧边框紫色</span></span><br><span class="line">p<span class="selector-id">#div-border-right-purple</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">border-right-width</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">border-right-color</span>: <span class="number">#9954bb</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 上侧边框红色</span></span><br><span class="line">p<span class="selector-id">#div-border-top-red</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">border-top-width</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">border-top-color</span>: <span class="number">#df3e3e</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 上侧边框黄色</span></span><br><span class="line">p<span class="selector-id">#div-border-top-yellow</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">border-top-width</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">border-top-color</span>: <span class="number">#f0ad4e</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 上侧边框绿色</span></span><br><span class="line">p<span class="selector-id">#div-border-top-green</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">border-top-width</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">border-top-color</span>: <span class="number">#5cb85c</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 上侧边框蓝色</span></span><br><span class="line">p<span class="selector-id">#div-border-top-blue</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">border-top-width</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">border-top-color</span>: <span class="number">#2780e3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 上侧边框紫色</span></span><br><span class="line">p<span class="selector-id">#div-border-top-purple</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">border-top-width</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">border-top-color</span>: <span class="number">#9954bb</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<p>支持颜色为：<code>red</code>、<code>yellow</code>、<code>green</code>、<code>blue</code>、<code>purple</code>，也可自己根据配置格式增加</p>
<table>
<thead>
<tr>
<th align="center">描述</th>
<th>语法</th>
</tr>
</thead>
<tbody><tr>
<td align="center">颜色块</td>
<td><code>&lt;span id=&quot;inline-red&quot;&gt; 这里是红色块 &lt;/span&gt;</code></td>
</tr>
<tr>
<td align="center">颜色块</td>
<td><code>&lt;span id=&quot;inline-blue&quot;&gt; 这里是蓝色块 &lt;/span&gt;</code></td>
</tr>
<tr>
<td align="center">左侧边框</td>
<td><code>&lt;p id=&quot;div-border-left-yellow&quot;&gt; 这里是黄色左侧边框 &lt;/p&gt;</code></td>
</tr>
<tr>
<td align="center">右侧边框</td>
<td><code>&lt;p id=&quot;div-border-right-green&quot;&gt; 这里是绿色右侧边框 &lt;/p&gt;</code></td>
</tr>
<tr>
<td align="center">上侧边框</td>
<td><code>&lt;p id=&quot;div-border-top-purple&quot;&gt; 这里是紫色上侧边框 &lt;/p&gt;</code></td>
</tr>
</tbody></table>
<p>效果展示：<br><span id="inline-red"> 这里是红色块 </span><br><span id="inline-blue"> 这里是蓝色块 </span></p>
<p id="div-border-left-yellow"> 这里是黄色左侧边框 </p>
<p id="div-border-right-green"> 这里是绿色右侧边框 </p>
<p id="div-border-top-purple"> 这里是紫色上侧边框 </p>

<h3 id="动态背景和鼠标特效"><a href="#动态背景和鼠标特效" class="headerlink" title="动态背景和鼠标特效"></a>动态背景和鼠标特效</h3><h4 id="动态线条背景"><a href="#动态线条背景" class="headerlink" title="动态线条背景"></a>动态线条背景</h4><p>修改主题配置<code>_config.yml</code>，新增配置：</p>
<figure class="highlight diff"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="addition">+ # Canvas-nest</span></span><br><span class="line"><span class="addition">+ # Dependencies: https://github.com/theme-next/theme-next-canvas-nest</span></span><br><span class="line"><span class="addition">+ # For more information: https://github.com/hustcc/canvas-nest.js</span></span><br><span class="line"><span class="addition">+ canvas_nest:</span></span><br><span class="line"><span class="addition">+   enable: false</span></span><br><span class="line"><span class="addition">+   enable: true</span></span><br><span class="line"><span class="addition">+   onmobile: true # Display on mobile or not</span></span><br><span class="line"><span class="addition">+   color: "0,0,255" # RGB values, use `,` to separate</span></span><br><span class="line"><span class="addition">+   opacity: 0.5 # The opacity of line: 0~1</span></span><br><span class="line"><span class="addition">+   zIndex: -1 # z-index property of the background</span></span><br><span class="line"><span class="addition">+   count: 99 # The number of lines</span></span><br><span class="line"></span><br><span class="line">  canvas_ribbon:</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line"><span class="addition">+   # Internal version: 1.0.0</span></span><br><span class="line"><span class="addition">+   # canvas_nest: //cdn.jsdelivr.net/gh/theme-next/theme-next-canvas-nest@1/canvas-nest.min.js</span></span><br><span class="line"><span class="addition">+   # canvas_nest_nomobile: //cdn.jsdelivr.net/gh/theme-next/theme-next-canvas-nest@1/canvas-nest-nomobile.min.js</span></span><br><span class="line"><span class="addition">+   canvas_nest: //cdn.jsdelivr.net/gh/theme-next/theme-next-canvas-nest@1/canvas-nest.min.js</span></span><br><span class="line"><span class="addition">+   canvas_nest_nomobile: //cdn.jsdelivr.net/gh/theme-next/theme-next-canvas-nest@1/canvas-nest.min.js</span></span><br><span class="line"></span><br><span class="line">  canvas_ribbon:</span><br></pre></td></tr></table></figure>
<p>在<code>themes/next/layout/_scripts/vendors.njk</code>(<code>7.x</code>已有该部分代码)中添加代码：</p>
<figure class="highlight diff"><figcaption><span>themes/next/layout/_scripts/vendors.njk</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="addition">+ &#123;%- if theme.canvas_nest.enable %&#125;</span></span><br><span class="line"><span class="addition">+   &#123;%- if theme.canvas_nest.onmobile %&#125;</span></span><br><span class="line"><span class="addition">+     &#123;%- set canvas_nest_uri = theme.vendors.canvas_nest or next_vendors('canvas-nest/canvas-nest.min.js') %&#125;</span></span><br><span class="line"><span class="addition">+   &#123;% else %&#125;</span></span><br><span class="line"><span class="addition">+     &#123;%- set canvas_nest_uri = theme.vendors.canvas_nest_nomobile or next_vendors('canvas-nest/canvas-nest-nomobile.min.js') %&#125;</span></span><br><span class="line"><span class="addition">+   &#123;%- endif %&#125;</span></span><br><span class="line"><span class="addition">+   &lt;script color='&#123;&#123; theme.canvas_nest.color &#125;&#125;' opacity='&#123;&#123; theme.canvas_nest.opacity &#125;&#125;' zIndex='&#123;&#123; theme.canvas_nest.zIndex &#125;&#125;' count='&#123;&#123; theme.canvas_nest.count &#125;&#125;' src="&#123;&#123; canvas_nest_uri &#125;&#125;"&gt;&lt;/script&gt;</span></span><br><span class="line"><span class="addition">+ &#123;%- endif %&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;%- if theme.canvas_ribbon.enable %&#125;</span><br></pre></td></tr></table></figure>

<h4 id="鼠标特效"><a href="#鼠标特效" class="headerlink" title="鼠标特效"></a>鼠标特效</h4><ul>
<li><a href="https://hasaik.com/posts/9c9b482b.html" target="_blank" rel="noopener">Hexo博客+Next主题鼠标点击特效</a></li>
</ul>
<h3 id="其他配置修改"><a href="#其他配置修改" class="headerlink" title="其他配置修改"></a>其他配置修改</h3><h4 id="修改单引号-包含的代码块字体颜色"><a href="#修改单引号-包含的代码块字体颜色" class="headerlink" title="修改单引号(``)包含的代码块字体颜色"></a>修改单引号(``)包含的代码块字体颜色</h4><figure class="highlight diff"><figcaption><span>themes/next/source/css/_variables/base.styl</span></figcaption><table><tr><td class="code"><pre><span class="line">// Code &amp; Code Blocks</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">$code-font-family               = $font-family-monospace;</span><br><span class="line">$code-border-radius             = 3px;</span><br><span class="line"><span class="deletion">- $code-foreground                = $black-light;</span></span><br><span class="line"><span class="addition">+ $code-foreground                = #009AFF;</span></span><br><span class="line">$code-background                = $gainsboro;</span><br></pre></td></tr></table></figure>

<h4 id="修改超链接字体颜色"><a href="#修改超链接字体颜色" class="headerlink" title="修改超链接字体颜色"></a>修改超链接字体颜色</h4><ul>
<li><a href="https://www.sioe.cn/yingyong/yanse-rgb-16/" target="_blank" rel="noopener">RGB颜色值与十六进制</a></li>
</ul>
<p>方案一：<a href="https://www.jianshu.com/p/15479544e781" target="_blank" rel="noopener">Next主题修改超链接样式</a><br>在<code>themes\next\source\css\_common\components\post\post.styl</code>中添加如下字段：</p>
<figure class="highlight diff"><figcaption><span>themes\next\source\css\_common\components\post\post.styl</span></figcaption><table><tr><td class="code"><pre><span class="line">.post-button &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="addition">+ .post-body a &#123;</span></span><br><span class="line"><span class="addition">+   color: #7B68EE;</span></span><br><span class="line"><span class="addition">+   font-weight: bold;</span></span><br><span class="line"><span class="addition">+ &#125;</span></span><br><span class="line"></span><br><span class="line">.use-motion &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方案二：<a href="https://blog.csdn.net/qw8880000/article/details/80235648" target="_blank" rel="noopener">修改文章内链接样式</a><br>在<code>themes/next/_config.yml</code>和<code>themes/next/source/css/_custom/custom.styl</code>中添加如下字段和代码：</p>
<figure class="highlight diff"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">custom_css:</span><br><span class="line">  # the style of post body link</span><br><span class="line">  post_body_a:</span><br><span class="line">    enable: true</span><br><span class="line">    normal_color: "#0000FF"</span><br><span class="line">    hover_color: "#0000AF"</span><br></pre></td></tr></table></figure>

<figure class="highlight styl"><figcaption><span>themes/next/source/css/_custom/custom.styl</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> hexo-config(<span class="string">"custom_css.post_body_a.enable"</span>) &#123;</span><br><span class="line">  <span class="selector-class">.post-body</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">      <span class="attribute">color</span>: convert(hexo-config(<span class="string">"custom_css.post_body_a.normal_color"</span>));</span><br><span class="line">      <span class="attribute">border-bottom</span>: none;</span><br><span class="line">      &amp;:hover &#123;</span><br><span class="line">        <span class="attribute">color</span>: convert(hexo-config(<span class="string">"custom_css.post_body_a.hover_color"</span>));</span><br><span class="line">        <span class="attribute">text-decoration</span>: underline;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="修改hexo-n-file创建文件模板"><a href="#修改hexo-n-file创建文件模板" class="headerlink" title="修改hexo n file创建文件模板"></a>修改<code>hexo n file</code>创建文件模板</h4><figure class="highlight diff"><figcaption><span>scaffolds/post.md</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">---</span></span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line"><span class="addition">+ categories:</span></span><br><span class="line">tags:</span><br><span class="line"><span class="addition">+ comments: false</span></span><br><span class="line"><span class="addition">+ abbrlink:</span></span><br><span class="line"><span class="comment">---</span></span><br></pre></td></tr></table></figure>

<h4 id="博客文章加密"><a href="#博客文章加密" class="headerlink" title="博客文章加密"></a>博客文章加密</h4><ul>
<li><a href="https://www.jianshu.com/p/e4203ee066e5" target="_blank" rel="noopener">Hexo博客文章加密</a></li>
</ul>
<h3 id="更多美化增强参考"><a href="#更多美化增强参考" class="headerlink" title="更多美化增强参考"></a>更多美化增强参考</h3><ul>
<li><p><a href="https://www.chingow.cn/posts/c7372a12.html" target="_blank" rel="noopener">Hexo+NexT(v7.0+) 搭建博客：主题美化</a><br>Hexo: <code>v3.8.0</code>, NexT: <code>v7.1.0</code><br><a href="https://github.com/chingov/hexo-blog-chingow.git" target="_blank" rel="noopener">chingow 博客源码</a></p>
</li>
<li><p><a href="http://yearito.cn/posts/hexo-writing-skills.html" target="_blank" rel="noopener">Hexo 搭建个人博客系列：写作技巧篇</a><br>Hexo: <code>v3.7.1</code>, NexT: <code>v6.4.2</code><br><a href="https://github.com/Coodool/hexo-blog-yearito.git" target="_blank" rel="noopener">yearito 博客源码</a></p>
</li>
</ul>
<h3 id="NexT主题升级记录"><a href="#NexT主题升级记录" class="headerlink" title="NexT主题升级记录"></a>NexT主题升级记录</h3><ul>
<li>主题自定义修改</li>
</ul>
<div class="note info"><p>自定义修改在<code>source/_data</code>中实现，尽量保持主题纯净</p>
</div>

<ol>
<li>网站运行时长</li>
<li>文章置顶功能</li>
<li>动态背景和鼠标特效</li>
<li>修改``代码块和超链接颜色</li>
<li>对比<code>_config.yml</code>修改</li>
</ol>
<ul>
<li>主题升级记录</li>
</ul>
<div class="note info"><p><strong>【必读】</strong><a href="https://github.com/next-theme/hexo-theme-next/issues/4" target="_blank" rel="noopener">更新说明及常见问题</a></p>
</div>

<blockquote>
<p>v4.7.0 –&gt; v8.0.0-rc.3</p>
</blockquote>
<ol>
<li><code>canvas_nest</code>字段丢失导致自定义动态背景失效</li>
<li>自带的<a href="https://fa5.dashgame.com/" target="_blank" rel="noopener">Font Awesome5</a>图标由<a href="https://fontawesome.com/v4.7.0/icons/" target="_blank" rel="noopener">4.7.0</a>版本升级为5.13.0版本，注意：<code>fa</code>、<code>fas</code>、<code>far</code>和<code>fab</code>的区别</li>
</ol>
]]></content>
      <categories>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客的NexT主题美化和功能增强(一)</title>
    <url>/b7a7c499/</url>
    <content><![CDATA[<p>前言</p>
<blockquote>
<p>这里简单记录下<code>Hexo博客的NexT主题</code>美化和功能增强</p>
</blockquote>
<a id="more"></a>

<p><strong>环境版本说明</strong></p>
<blockquote>
<p>Hexo: <code>v4.2.1</code><br>NexT: <code>v8.0.0_rc.3</code></p>
</blockquote>
<h3 id="安装NexT主题"><a href="#安装NexT主题" class="headerlink" title="安装NexT主题"></a>安装NexT主题</h3><p>NexT主题<a href="https://theme-next.org/" target="_blank" rel="noopener">下载</a><br>下载完成后，解压至<code>themes/next</code>目录下，或者直接拉取Next主题的Github仓库源码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next.git themes/next</span><br></pre></td></tr></table></figure>

<p>将站点目录下<code>_config.yml</code>配置中theme的由<code>landscape</code>修改为<code>next</code></p>
<figure class="highlight diff"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line"><span class="deletion">- theme: landscape</span></span><br><span class="line"><span class="addition">+ theme: next</span></span><br></pre></td></tr></table></figure>

<h3 id="添加数学公式渲染"><a href="#添加数学公式渲染" class="headerlink" title="添加数学公式渲染"></a>添加数学公式渲染</h3><ul>
<li><a href="https://github.com/theme-next/hexo-theme-next/blob/5cb74444ee9c89d8cc414daed4453d09a28d67d9/docs/zh-CN/MATH.md" target="_blank" rel="noopener">官方文档</a></li>
<li><a href="https://www.jianshu.com/p/e74eb43960a1" target="_blank" rel="noopener">Markdown数学公式语法</a></li>
</ul>
<p>这里我自己卸载<code>hexo-renderer-marked</code>和安装<code>hexo-renderer-pandoc</code>插件时，出现无法卸载和安装包错等问题，暂时先使用原有的<code>hexo-renderer-marked</code>渲染器，后续出现无法渲染的问题再更换插件。<br>在<code>themes/next/_config.yml</code>中修改<code>math</code>相关参数，并选择<code>mathjax</code>作为渲染引擎</p>
<figure class="highlight diff"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">math:</span><br><span class="line">  # Default (true) will load mathjax / katex script on demand.</span><br><span class="line">  # That is it only render those page which has `mathjax: true` in Front-matter.</span><br><span class="line">  # If you set it to false, it will load mathjax / katex srcipt EVERY PAGE.</span><br><span class="line">  per_page: true</span><br><span class="line"></span><br><span class="line">  # hexo-renderer-pandoc (or hexo-renderer-kramed) required for full MathJax support.</span><br><span class="line">  mathjax:</span><br><span class="line"><span class="deletion">-     enable: false</span></span><br><span class="line"><span class="addition">+     enable: true</span></span><br><span class="line">    # See: https://mhchem.github.io/MathJax-mhchem/</span><br><span class="line"><span class="deletion">-     mhchem: false</span></span><br><span class="line"><span class="addition">+     mhchem: true</span></span><br><span class="line">    # See: https://mhchem.github.io/MathJax-mhchem/</span><br></pre></td></tr></table></figure>

<p><code>per_page</code>默认(true)的行为是只对<code>Front Matter</code>中含有<code>mathjax: true</code>的文章进行数学公式渲染，如果不含有<code>mathjax: true</code>或者设置<code>mathjax: false</code>，那么将不会对文章进行数学公式渲染。例如：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 这篇文章会渲染数学公式 --&gt;</span></span></span><br><span class="line">---</span><br><span class="line">title: 'Will Render Math'</span><br><span class="line">mathjax: true</span><br><span class="line">---</span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 这篇文章不会渲染数学公式 --&gt;</span></span></span><br><span class="line">---</span><br><span class="line">title: 'Not Render Math'</span><br><span class="line">mathjax: false</span><br><span class="line">---</span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="comment">&lt;!-- 这篇文章也不会渲染数学公式 --&gt;</span></span></span><br><span class="line">---</span><br><span class="line">title: 'Not Render Math Either'</span><br><span class="line">---</span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<p>公式需要使用<code>$</code>包含，使用<code>$$</code>包含可使公式居中显示：</p>
<p>$y = ax^2 + b + 2^{10}$</p>
<p>$$ e = mc^2 \tag{e}\label{eq1}$$</p>
<p>$$\begin{equation}<br>\begin{aligned}<br>a &amp;= b + c \<br>  &amp;= d + e + f + g \<br>  &amp;= h + i<br>\end{aligned}<br>\end{equation}\label{eq2}$$</p>
<p>$$\begin{align}<br>-4 + 5x &amp;= 2+y \nonumber  \<br> w+2 &amp;= -1+w \<br> ab &amp;= cb<br>\end{align}$$</p>
<p>$$x+1\over\sqrt{1-x^2} \tag{i}\label{eq_tag}$$</p>
<p>著名的质能方程$\eqref{eq1}$由爱因斯坦提出 …</p>
<h3 id="添加网站运行时长"><a href="#添加网站运行时长" class="headerlink" title="添加网站运行时长"></a>添加网站运行时长</h3><ul>
<li><a href="https://www.chingow.cn/posts/c7372a12.html" target="_blank" rel="noopener">网站的运行时间</a></li>
<li><a href="http://yearito.cn/posts/hexo-advanced-settings.html" target="_blank" rel="noopener">站点运行时间统计</a></li>
<li><a href="https://blog.csdn.net/weixin_41287260/article/details/103050423" target="_blank" rel="noopener">网站运行时间</a></li>
</ul>
<p>添加网站运行时长修改如下：</p>
<figure class="highlight yml"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line">  <span class="comment"># site running time</span></span><br><span class="line">  <span class="attr">running_time:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># create time of your site</span></span><br><span class="line">    <span class="attr">create:</span> <span class="number">20191231</span></span><br><span class="line">    <span class="comment"># color of number</span></span><br><span class="line">    <span class="attr">color:</span> <span class="string">"#1890ff"</span></span><br></pre></td></tr></table></figure>

<p>如果<code>themes/next/layout/layout/_custom/custom.njk</code>(<code>7.x</code>文件后缀为<code>.swig</code>)不存在，需按照对应路径创建，然后在<code>_layout.njk</code>中添加包含：</p>
<figure class="highlight diff"><figcaption><span>themes/next/layout/_layout.njk</span></figcaption><table><tr><td class="code"><pre><span class="line">  &#123;% include '_third-party/math/index.njk' %&#125;</span><br><span class="line">  &#123;% include '_third-party/quicklink.njk' %&#125;</span><br><span class="line"><span class="addition">+  &#123;% include '_custom/custom.njk' %&#125;</span></span><br><span class="line"></span><br><span class="line">  &#123;&#123;- next_inject('bodyEnd') &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>在<code>custom.njk</code>中添加如下代码：(<strong>这里实际配置时我个人选择将换行删除，使代码混淆成一行</strong>)</p>
<figure class="highlight html"><figcaption><span>themes/next/layout/_custom/custom.njk</span></figcaption><table><tr><td class="code"><pre><span class="line">&#123;# 网站运行时间统计 #&#125;</span><br><span class="line">&#123;%- if theme.footer.running_time.enable %&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/moment@2.22.2/moment.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/moment-precise-range-plugin@1.3.0/moment-precise-range.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 实现高位自动补0，num传入的数字，n需要的字符长度</span></span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">PrefixInteger</span><span class="params">(num, n = 2)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> (<span class="built_in">Array</span>(n).join(<span class="number">0</span>) + num).slice(-n);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">GetRunningTime</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> timesDiff = moment.preciseDiff(moment(), moment(&#123;&#123; theme.footer.running_time.create &#125;&#125;, <span class="string">"YYYYMMDD"</span>), <span class="literal">true</span>);</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">var</span> strText = <span class="string">""</span>;</span></span><br><span class="line"><span class="actionscript">      strText += <span class="string">" "</span> + PrefixInteger(timesDiff.years).toString() + <span class="string">" 年"</span>;</span></span><br><span class="line"><span class="actionscript">      strText += <span class="string">" "</span> + PrefixInteger(timesDiff.months).toString() + <span class="string">" 月"</span>;</span></span><br><span class="line"><span class="actionscript">      strText += <span class="string">" "</span> + PrefixInteger(timesDiff.days).toString() + <span class="string">" 天"</span>;</span></span><br><span class="line"><span class="actionscript">      strText += <span class="string">" "</span> + PrefixInteger(timesDiff.hours).toString() + <span class="string">" 时"</span>;</span></span><br><span class="line"><span class="actionscript">      strText += <span class="string">" "</span> + PrefixInteger(timesDiff.minutes).toString() + <span class="string">" 分"</span>;</span></span><br><span class="line"><span class="actionscript">      strText += <span class="string">" "</span> + PrefixInteger(timesDiff.seconds).toString() + <span class="string">" 秒"</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="handlebars"><span class="xml">      strText = strText.replace(/\d+/g, '<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color:</span></span></span><span class="template-variable">&#123;&#123; theme.footer.running_time.color &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>$&amp;<span class="tag">&lt;/<span class="name">span</span>&gt;</span>');</span></span></span><br><span class="line"><span class="actionscript">      element.innerHTML = <span class="string">"本站已安全运行"</span> + strText;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> element = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 插入到theme(主题)节点后</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// var select = document.querySelector(".theme-info");</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// document.querySelector(".footer-inner").insertBefore(element, select.nextSibling);</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 插入到最后一个节点后</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.querySelector(<span class="string">".footer-inner"</span>).appendChild(element);</span></span><br><span class="line">    GetRunningTime();</span><br><span class="line"><span class="actionscript">    setInterval(<span class="string">"GetRunningTime()"</span>, <span class="number">1000</span>);</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码块进阶用法"><a href="#代码块进阶用法" class="headerlink" title="代码块进阶用法"></a>代码块进阶用法</h3><ul>
<li><a href="http://yearito.cn/posts/hexo-writing-skills.html#%E4%BB%A3%E7%A0%81%E5%9D%97%E8%BF%9B%E9%98%B6%E7%94%A8%E6%B3%95" target="_blank" rel="noopener">写作技巧篇：代码块进阶用法</a></li>
</ul>
<p>可以通过为代码块附加参数的形式为其添加更丰富的信息提示，效果如下：</p>
<figure class="highlight js"><figcaption><span>Hello world</span><a href="https://blog.kang1024.tk/">链接地址</a></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"Hello World!"</span>);</span><br></pre></td></tr></table></figure>

<p>代码块进阶语法规则：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="code">```</span>[language] [title] [url] [link text]</span><br><span class="line">console.log("Hello World!");</span><br><span class="line"><span class="code">```</span></span><br></pre></td></tr></table></figure>

<p>其中，各参数意义如下：</p>
<ol>
<li><code>langugae</code>：语言名称，引导渲染引擎正确解析并高亮显示关键字</li>
<li><code>title</code>：代码块标题，将会显示在左上角</li>
<li><code>url</code>：链接地址，如果没有指定link text则会在右上角显示link</li>
<li><code>link text</code>：链接名称，指定url后有效，将会显示在右上角</li>
</ol>
<p>url必须为有效链接地址才会以链接的形式显示在右上角，否则将作为标题显示在左上角。以url为分界，左侧除了第一个单词会被解析为language，其他所有单词都会被解析为title，而右侧的所有单词都会被解析为link text。</p>
<p>如果不想填写title，可以在language和url之间添加至少三个空格。<br>可以在主题配置文件<code>_config.yml</code>中设置<code>highlight.auto_detect: true</code>来开启自动语言检测高亮。</p>
<p>如果设置语言为<code>diff</code>，可以在代码前添加<code>+</code>和<code>-</code>来使用如上所示的高亮增删行提示效果，在展示代码改动痕迹时比较实用，和github上的diff功能类似。效果如下：</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">highlight:</span><br><span class="line">  enable: true</span><br><span class="line">  line_number: false</span><br><span class="line"><span class="deletion">- auto_detect: false</span></span><br><span class="line"><span class="addition">+ auto_detect: true</span></span><br><span class="line">  tab_replace:</span><br></pre></td></tr></table></figure>

<h3 id="Markdown表格美化"><a href="#Markdown表格美化" class="headerlink" title="Markdown表格美化"></a>Markdown表格美化</h3><ul>
<li><a href="https://hexo.imydl.tech/archives/6742.html" target="_blank" rel="noopener">Hexo下表格的美化和优化</a></li>
</ul>
<p>如果<code>themes\next\source\css\_custom\custom.styl</code>不存在，需按照对应路径创建，然后在<code>main.styl</code>中添加包含：</p>
<figure class="highlight diff"><figcaption><span>themes/next/source/css/main.styl</span></figcaption><table><tr><td class="code"><pre><span class="line">// Custom Layer</span><br><span class="line">// --------------------------------------------------</span><br><span class="line">for $inject_style in hexo-config('injects.style')</span><br><span class="line">  @import $inject_style;</span><br><span class="line"></span><br><span class="line"><span class="addition">+ @import "_custom/custom.styl";</span></span><br></pre></td></tr></table></figure>
<p>在<code>custom.styl</code>中添加如下代码：</p>
<figure class="highlight styl"><figcaption><span>themes\next\source\css\_custom\custom.styl</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// Custom styles.</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">th</span> &#123;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap; <span class="comment">// 表格表头单元格内容不换行</span></span><br><span class="line">  <span class="comment">// text-align: center !important; // 表格表头内容居中，加上!important避免被Markdown样式覆盖</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">td</span> &#123;</span><br><span class="line">  <span class="comment">// text-align: center !important; //表格单元格内容不换行，加上!important避免被Markdown样式覆盖</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">table</span> <span class="selector-tag">td</span>:nth-child(<span class="number">1</span>) &#123;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap; <span class="comment">// 表格第一列单元格内容不换行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>markdown语法<code>:---:</code>表格内容居中，NexT(<code>v7.7.0</code>和<code>v7.8.0</code>)主题不生效，所以使用html语法实现左中右对齐方式：<br><strong>注：</strong>从<code>v7.7.0</code>升级到<code>v8.0.0</code>后，<code>:---:</code>语法效果显示正常。</p>
<table>
<thead>
<tr>
<th>语法</th>
<th>效果</th>
</tr>
</thead>
<tbody><tr>
<td><code>&lt;p align=&quot;left&quot;&gt;左对齐&lt;/p&gt;</code></td>
<td><p align="left">左对齐</p></td>
</tr>
<tr>
<td><code>&lt;p align=&quot;center&quot;&gt;居中对齐&lt;/p&gt;</code></td>
<td><p align="center">居中对齐</p></td>
</tr>
<tr>
<td><code>&lt;p align=&quot;right&quot;&gt;右对齐&lt;/p&gt;</code></td>
<td><p align="right">右对齐</p></td>
</tr>
</tbody></table>
<p>使用<code>style</code>实现单元格宽度，但是会对这个界面的表格生效：</p>
<style>
table th:nth-of-type(1) {
  width: 40%;
}
</style>

<table>
<thead>
<tr>
<th>姓名</th>
<th>性别</th>
<th>年龄</th>
</tr>
</thead>
<tbody><tr>
<td><strong>张三</strong></td>
<td><em>男</em></td>
<td>10</td>
</tr>
<tr>
<td>李四</td>
<td>男</td>
<td>12</td>
</tr>
</tbody></table>
<h3 id="代码块收起与展开"><a href="#代码块收起与展开" class="headerlink" title="代码块收起与展开"></a>代码块收起与展开</h3><ul>
<li><a href="https://guoflight.github.io/posts/28189/" target="_blank" rel="noopener">Markdown代码折叠与收起</a></li>
</ul>
<p>实现代码折叠</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">summary</span>&gt;</span></span>点击查看<span class="xml"><span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span></span><br><span class="line"><span class="code">```cpp</span></span><br><span class="line"><span class="code">std::cout &lt;&lt; "Hello World!" &lt;&lt; std::endl;</span></span><br><span class="line"><span class="code">```</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>效果展示如下：</p>
<details>
<summary>点击查看</summary>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello World!"</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure>
</details>

<h3 id="静态资源压缩"><a href="#静态资源压缩" class="headerlink" title="静态资源压缩"></a>静态资源压缩</h3><ul>
<li><a href="https://maplerain.cc/posts/69416b20.html" target="_blank" rel="noopener">对Hexo博客静态资源进行压缩</a></li>
</ul>
<p>Hexo生成html文件时，产生大量的换行和空格，导致html的可读性下降，同时也拖慢了博客的加载速度。<br>解决方案：通过<code>gulp</code>插件对资源进行压缩，然后在推送到服务器。</p>
<h4 id="安装gulp相关依赖"><a href="#安装gulp相关依赖" class="headerlink" title="安装gulp相关依赖"></a>安装gulp相关依赖</h4><p>因为<code>npm</code>服务器速度很慢，所以选择使用<code>cnpm</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
<p>将<code>gulp</code>安装到全局中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cnpm install gulp -g</span><br></pre></td></tr></table></figure>
<p><strong>方法一：</strong>直接安装相关依赖<code>gulp-imagemin、gulp-minify-css、gulp-minify-html、gulp-uglify</code>到项目中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cnpm install gulp gulp-imagemin gulp-minify-css gulp-minify-html gulp-uglify --save</span><br></pre></td></tr></table></figure>

<p><strong>方法二：</strong>将需要的依赖放在<code>package.json</code>的<code>devDependencies</code>字段中，然后执行<code>cnpm install</code>命令就会自动安装添加的依赖，这样的好处是可以保证如果换台电脑安装版本仍然是一致的，避免版本兼容问题。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"dependencies": &#123;</span><br><span class="line">    "gulp": "^4.0.2",</span><br><span class="line">    "gulp-imagemin": "^7.1.0",</span><br><span class="line">    "gulp-minify-css": "^1.2.4",</span><br><span class="line">    "gulp-minify-html": "^1.0.6",</span><br><span class="line">    "gulp-uglify": "^3.0.2",</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="创建-gulpfile-js"><a href="#创建-gulpfile-js" class="headerlink" title="创建 gulpfile.js"></a>创建 gulpfile.js</h4><p>在Hexo博客的根目录下面，创建一个<code>gulpfile.js</code>文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Plugins模块获取</span></span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">var</span> minifyhtml = <span class="built_in">require</span>(<span class="string">'gulp-minify-html'</span>);</span><br><span class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">'gulp-imagemin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public 目录 css文件</span></span><br><span class="line">gulp.task(<span class="string">'minify-css'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.css'</span>)</span><br><span class="line">        .pipe(minifycss())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public 目录 html文件</span></span><br><span class="line">gulp.task(<span class="string">'minify-html'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.html'</span>)</span><br><span class="line">        .pipe(minifyhtml())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public/js 目录 js文件</span></span><br><span class="line">gulp.task(<span class="string">'minify-js'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.js'</span>)</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩public/posts 目录 图片文件</span></span><br><span class="line">gulp.task(<span class="string">'minify-img'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">'./public/**/*.*'</span>)</span><br><span class="line">        .pipe(imagemin(</span><br><span class="line">            [</span><br><span class="line">                imagemin.gifsicle(&#123;</span><br><span class="line">                    <span class="string">'optimizationLevel'</span>: <span class="number">3</span></span><br><span class="line">                &#125;),</span><br><span class="line">                imagemin.jpegtran(&#123;</span><br><span class="line">                    <span class="string">'progressive'</span>: <span class="literal">true</span></span><br><span class="line">                &#125;),</span><br><span class="line">                imagemin.optipng(&#123;</span><br><span class="line">                    <span class="string">'optimizationLevel'</span>: <span class="number">7</span></span><br><span class="line">                &#125;),</span><br><span class="line">                imagemin.svgo()</span><br><span class="line">            ], &#123;</span><br><span class="line">                <span class="string">'verbose'</span>: <span class="literal">true</span></span><br><span class="line">            &#125;))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./public'</span>))</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分别执行css、html、js和图片的压缩任务</span></span><br><span class="line">gulp.task(<span class="string">'build'</span>, gulp.series(<span class="string">'minify-css'</span>, <span class="string">'minify-html'</span>, <span class="string">'minify-js'</span>, <span class="string">'minify-img'</span>));</span><br></pre></td></tr></table></figure>
<p><strong>注意：</strong><br>图片压缩速度很慢，若不需要压缩图片，请将第52行的代码中的<code>minify-img</code>删除，忽略其它文件压缩同理。<br>自己按照教程部署时，压缩<code>minify-js</code>和<code>minify-img</code>报错如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GulpUglifyError: unable to minify JavaScript</span><br><span class="line">Caused by: SyntaxError: Unexpected token: punc «)»</span><br></pre></td></tr></table></figure>
<p>主要是因为javascirpt语法问题，在es5环境里使用了es6、es7语法，暂时不压缩js，img上传前都会先用工具压缩，先不做处理。<br>压缩css后，部署远程站点后发现网页样式中，部分元素本地预览是居中对齐，但线上显示左对齐，所以这里只对html文件压缩。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 执行html压缩任务</span></span><br><span class="line">gulp.task(<span class="string">'build'</span>, gulp.series(<span class="string">'minify-html'</span>));</span><br></pre></td></tr></table></figure>
<p>或者参考<a href="https://my.oschina.net/johnsken/blog/1796169?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">Gulp打包问题</a>处理<code>es5语法兼容</code>问题。</p>
<p>压缩资源发布：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo g</span><br><span class="line">$ gulp build</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>

<h3 id="CDN加速"><a href="#CDN加速" class="headerlink" title="CDN加速"></a>CDN加速</h3><ul>
<li><a href="http://yearito.cn/posts/hexo-deploy-to-VPS.html" target="_blank" rel="noopener">页面加载性能：CDN加速</a></li>
</ul>
<p>由于将博客从<code>Github</code>迁移到<code>Coding</code>后访问响应速度已经比较快，因此暂时不做CDN加速配置，如需配置，可参考上述博客。</p>
<h3 id="跳过source指定文件渲染"><a href="#跳过source指定文件渲染" class="headerlink" title="跳过source指定文件渲染"></a>跳过source指定文件渲染</h3><ul>
<li><a href="https://iitii.github.io/2019/02/15/1/" target="_blank" rel="noopener">Hexo跳过指定文件的渲染</a></li>
</ul>
<p>修改<code>_config.yml</code>配置文件中的<code>skip_render</code>跳过指定文件渲染。<br><strong>注：</strong><code>_config.yml</code>文件是站点根目录下的，不是主题目录下的。<br>如下配置表示，跳过<code>source/README.md</code>的渲染，应填相对于<code>source</code>文件夹的相对路径。</p>
<figure class="highlight diff"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"># Directory</span><br><span class="line">source_dir: source</span><br><span class="line">public_dir: public</span><br><span class="line">tag_dir: tags</span><br><span class="line">archive_dir: archives</span><br><span class="line">category_dir: categories</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">i18n_dir: :lang</span><br><span class="line"><span class="deletion">- skip_render:</span></span><br><span class="line"><span class="addition">+ skip_render: [README.md]</span></span><br></pre></td></tr></table></figure>

<h3 id="全局字体修改"><a href="#全局字体修改" class="headerlink" title="全局字体修改"></a>全局字体修改</h3><ul>
<li><a href="https://www.chingow.cn/posts/c7372a12.html" target="_blank" rel="noopener">Font 修改字体</a></li>
</ul>
<p>默认字体为<code>Lato</code>，可根据个人喜好选择字体，例如：很有科技感的字体<code>Monda</code>，下面就将它应用到自己的博客。<br>在主题配置文件<code>_config.yml</code>中修改字体配置：<strong>(如果修改没有效果，需要安装配置的字体)</strong></p>
<figure class="highlight diff"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">font:</span><br><span class="line"><span class="deletion">-  enable: false</span></span><br><span class="line"><span class="addition">+  enable: true</span></span><br><span class="line"></span><br><span class="line">  global:</span><br><span class="line">    external: true</span><br><span class="line"><span class="deletion">-    family: Lato</span></span><br><span class="line"><span class="addition">+    family: Monda   # 设置Monda字体</span></span><br><span class="line">    size:</span><br></pre></td></tr></table></figure>

<h3 id="显示加载进度条"><a href="#显示加载进度条" class="headerlink" title="显示加载进度条"></a>显示加载进度条</h3><ul>
<li><a href="https://www.chingow.cn/posts/c7372a12.html" target="_blank" rel="noopener">Top 加载进度条</a></li>
</ul>
<p>当网络不好的时候会出现白屏等待，此时如果能有加载进度提示将会提高用户操作体验。<br>首先，在根目录下执行以下命令安装相关依赖，下载<code>theme-next-pace</code>到<code>themes/next/source/lib/pace</code>下</p>
<figure class="highlight bash"><figcaption><span>themes/next/source/lib/pace</span></figcaption><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-pace themes/next/<span class="built_in">source</span>/lib/pace</span><br></pre></td></tr></table></figure>
<p>在主题配置文件<code>_config.yml</code>中修改进度条配置，<code>theme</code>使用默认配置<code>minimal</code>，也可以使用<code>Themes list</code>中的其他pace主题：</p>
<figure class="highlight diff"><figcaption><span>themes/next/_config.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">pace:</span><br><span class="line"><span class="deletion">-  enable: false</span></span><br><span class="line"><span class="addition">+  enable: true #   开启加载进度条</span></span><br><span class="line">  # Themes list:</span><br><span class="line">  # big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple</span><br><span class="line">  # corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal</span><br><span class="line">  theme: minimal</span><br></pre></td></tr></table></figure>

<div class="note info"><p>Hexo博客的NexT主题美化和功能增强(二) <a href="https://blog.kang1024.tk/21493ef0/">去看看</a></p>
</div>
]]></content>
      <categories>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Hexo和Github/Coding的博客搭建</title>
    <url>/499adbfc/</url>
    <content><![CDATA[<p>前言</p>
<blockquote>
<p>这里简单记录下<code>基于Hexo和Github/Coding</code>的博客搭建教程</p>
</blockquote>
<a id="more"></a>

<p><a href="https://hooray.github.io/posts/15e2d21f/" target="_blank" rel="noopener">参考博客</a></p>
<p><strong>说明：</strong>主要记录下自己搭建过程中遇到的问题，完整教程请参考<a href="https://hooray.github.io/posts/15e2d21f/" target="_blank" rel="noopener">使用Hexo和Github快速搭建个人博客</a>，至于主题(如NexT)安装、美化等网上教程较多，可根据个人喜好选择。</p>
<h3 id="环境版本说明"><a href="#环境版本说明" class="headerlink" title="环境版本说明"></a>环境版本说明</h3><p>Hexo: <code>v4.2.1</code><br>NexT: <code>v8.0.0_rc.3</code></p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p><strong>自己第一次部署时是选择Hexo+Github部署的，但是由于国内访问Github比较慢，经常无法访问，后面又将博客部署在了Coding上，所以我们这里选择将博客同时部署在Github和Coding，国内访问Coding比Github快很多。</strong><br>Hexo是一款基于Node.js的静态博客框架，需要如下准备工作：</p>
<ol>
<li>安装<a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">Node.js</a></li>
<li>安装<a href="https://gitforwindows.org/" target="_blank" rel="noopener">Git</a></li>
<li>注册<a href="https://github.com/" target="_blank" rel="noopener">Github</a></li>
<li>注册<a href="https://coding.net/" target="_blank" rel="noopener">Coding</a></li>
</ol>
<blockquote>
<p>安装Node.js(个人选择了npm)、Git和注册Github不再赘述，可自行百度，注意注册Coding时这里的团队域名，不是项目仓库的名称，而且注册后无法修改，所以设置时请想好域名再注册，比如我设置的团队域名是<code>kang1024</code></p>
</blockquote>
<p><img src="/images/Hexo%E5%8D%9A%E5%AE%A2/2020-05-25_144456.png" alt=""></p>
<h3 id="安装Hexo建站"><a href="#安装Hexo建站" class="headerlink" title="安装Hexo建站"></a>安装Hexo建站</h3><p>安装Hexo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>初始化，创建文件夹存放博客相关源码，如：<code>D:\blog</code>，进入D盘根目录下，右键<code>Git Bash</code>运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init blog</span><br></pre></td></tr></table></figure>
<p>进入<code>blog</code>目录下，安装依赖插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure>
<p>启动服务，本地访问</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>
<p>运行成功，出现如下提示：</p>
<blockquote>
<p>$ hexo s<br>INFO  Start processing<br>INFO  Hexo is running at <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> . Press Ctrl+C to stop.</p>
</blockquote>
<p>此时打开浏览器访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 发现网站搭建成功。</p>
<p><img src="/images/Hexo%E5%8D%9A%E5%AE%A2/2020-05-25_170853.png" alt=""></p>
<h3 id="部署Github-Pages"><a href="#部署Github-Pages" class="headerlink" title="部署Github Pages"></a>部署Github Pages</h3><p>创建仓库，不能设置为<code>private</code>(可能会导致博客无法访问)，仓库名固定写法为<code>your_username.github.io</code>，创建完成后，选择<code>Settings</code>滚动页面查看<code>GitHub Pages</code>，或者<code>Ctrl+F</code>搜索<code>GitHub Pages</code>即可。</p>
<p><img src="/images/Hexo%E5%8D%9A%E5%AE%A2/2020-05-25_171208.png" alt=""></p>
<h3 id="部署Coding-Pages"><a href="#部署Coding-Pages" class="headerlink" title="部署Coding Pages"></a>部署Coding Pages</h3><p>创建仓库，Coding默认为私有仓库，仓库名固定写法为<code>your_username.coding.me</code>，创建成功，然后选择 持续集成-&gt;静态网站，如果找不到静态网站，请检查 项目设置-&gt;项目与成员-&gt;功能开关，<code>代码仓库、持续集成、持续部署</code>是否开启，在静态网站界面填写网站信息保存后即可生成访问链接，生成访问连接后选择立即部署。</p>
<p><img src="/images/Hexo%E5%8D%9A%E5%AE%A2/2020-05-25_171614.png" alt=""><br><img src="/images/Hexo%E5%8D%9A%E5%AE%A2/2020-05-25_172010.png" alt=""></p>
<h3 id="发布到Github和Coding"><a href="#发布到Github和Coding" class="headerlink" title="发布到Github和Coding"></a>发布到Github和Coding</h3><p>修改根目录下的<code>_config.yml</code>，同时发布到github和coding</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">https://github.com/your_username/your_username.github.io.git,master</span></span><br><span class="line">    <span class="attr">coding:</span> <span class="string">https://e.coding.net/your_username/your_username.coding.me.git,master</span></span><br></pre></td></tr></table></figure>
<p>这里建议安装<a href="https://github.com/hexojs/hexo-deployer-git" target="_blank" rel="noopener">hexo-deployer-git</a>自动部署发布工具</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git</span><br></pre></td></tr></table></figure>
<p>安装完成，执行如下命令完成发布：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
<p>待发布成功后，即可通过浏览器访问 <a href="https://your_username.github.io/" target="_blank" rel="noopener">https://your_username.github.io/</a><br><strong>建议：</strong><br>此时登录Github会发现，其实是将Hexo下<code>public</code>目录中生成的静态网页和资源上传到了<code>master</code>分支下，但是本地博客的开发环境没有上传到Github仓库，如果换台电脑的话无法继续更新博客，所以可以在单独创建一个仓库，专门用于上传开发环境，不过个人建议，在<code>your_username.github.io</code>上创建一个分支，比如<code>hexo_blog</code>用于上传开发环境方便管理。<br>这样我们可以将开发环境上传至Github上，随时获取开发环境，将博客发布到Github和Coding，发布到Github主要是基于其知名度与国际化，发布到Coding主要是国内访问速度更快。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo官网</a></li>
<li><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT主题</a></li>
<li><a href="https://theme-next.js.org/" target="_blank" rel="noopener">NexT主题8.x</a></li>
<li><a href="https://hooray.github.io/posts/15e2d21f/" target="_blank" rel="noopener">使用Hexo和Github快速搭建个人博客</a></li>
<li><a href="https://blog.csdn.net/nightmare_dimple/article/details/86661502" target="_blank" rel="noopener">Hexo博客优化之Next主题美化</a></li>
<li><a href="https://fontawesome.com/v4.7.0/icons/" target="_blank" rel="noopener">The Icons 4.7</a></li>
<li><a href="https://github.com/next-theme/hexo-theme-next/issues/4" target="_blank" rel="noopener">更新说明及常见问题</a></li>
</ul>
<h3 id="个人博客地址"><a href="#个人博客地址" class="headerlink" title="个人博客地址"></a>个人博客地址</h3><ul>
<li><a href="https://kang1024.github.io/" target="_blank" rel="noopener">Github</a></li>
<li><a href="https://5ljtet.coding-pages.com/" target="_blank" rel="noopener">Coding</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>github</tag>
        <tag>hexo</tag>
        <tag>coding</tag>
      </tags>
  </entry>
  <entry>
    <title>常见问题备忘</title>
    <url>/6330631c/</url>
    <content><![CDATA[<p>前言</p>
<blockquote>
<p>这里简单记录下<code>工作中遇到的常见问题</code>备忘</p>
</blockquote>
<a id="more"></a>

<h3 id="git-push提示HttpRequestException-encountered，需要重新输入账号密码验证"><a href="#git-push提示HttpRequestException-encountered，需要重新输入账号密码验证" class="headerlink" title="git push提示HttpRequestException encountered，需要重新输入账号密码验证"></a>git push提示<code>HttpRequestException encountered</code>，需要重新输入账号密码验证</h3><p><a href="https://www.cnblogs.com/chucklu/p/5650927.html" target="_blank" rel="noopener">让git for windows记住密码</a><br>提示信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fatal: HttpRequestException encountered.</span><br><span class="line">   发送请求时出错</span><br></pre></td></tr></table></figure>
<p>解决方法：<br>进入git bash终端，输入如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global credential.helper store</span><br></pre></td></tr></table></figure>
<p>检查命令是否成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config -l | grep credential credential.helper=store</span><br></pre></td></tr></table></figure>
<p>或查看%HOME%目录下的<code>.gitconfig</code>文件，会新增如下配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[credential]</span><br><span class="line">	helper &#x3D; store</span><br></pre></td></tr></table></figure>

<p>重新开启git bash会发现git push时不用再输入用户名和密码，此时如果还是提示<code>fatal: HttpRequestException encountered.</code>，安装<a href="https://github.com/microsoft/Git-Credential-Manager-for-Windows/releases" target="_blank" rel="noopener">GCMW</a>即可。</p>
<h3 id="基于宝塔安装的github修改配置后重启服务nginx-timeout"><a href="#基于宝塔安装的github修改配置后重启服务nginx-timeout" class="headerlink" title="基于宝塔安装的github修改配置后重启服务nginx timeout"></a>基于宝塔安装的github修改配置后重启服务<code>nginx timeout</code></h3><p><a href="https://blog.csdn.net/weixin_33978044/article/details/91423781" target="_blank" rel="noopener">GitLab修改配置后nginx无法启动</a><br>提示信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ gitlab-ctl restart</span><br><span class="line">ok: run: gitlab-workhorse: (pid 31048) 0s</span><br><span class="line">ok: run: logrotate: (pid 31057) 1s</span><br><span class="line">timeout: down: nginx: 1s, normally up, want up</span><br><span class="line">ok: run: postgresql: (pid 31499) 0s</span><br><span class="line">ok: run: redis: (pid 31517) 0s</span><br><span class="line">ok: run: sidekiq: (pid 31527) 0s</span><br><span class="line">ok: run: unicorn: (pid 31533) 0s</span><br></pre></td></tr></table></figure>
<p>解决方法：<br>修改nginx启动文件<code>vi /opt/gitlab/sv/nginx/run</code>，修改完成后重启服务即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exec chpst -P &#x2F;opt&#x2F;gitlab&#x2F;embedded&#x2F;sbin&#x2F;nginx -p &#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;nginx</span><br><span class="line">修改为</span><br><span class="line">exec chpst -P &#x2F;opt&#x2F;gitlab&#x2F;embedded&#x2F;sbin&#x2F;gitlab-web -p &#x2F;var&#x2F;opt&#x2F;gitlab&#x2F;nginx</span><br></pre></td></tr></table></figure>

<h3 id="gitlab绑定域名后原有的仓库url地址ip修改为域名"><a href="#gitlab绑定域名后原有的仓库url地址ip修改为域名" class="headerlink" title="gitlab绑定域名后原有的仓库url地址ip修改为域名"></a>gitlab绑定域名后原有的仓库url地址ip修改为域名</h3><p><a href="https://blog.csdn.net/weianlai/article/details/84264480" target="_blank" rel="noopener">GitLab服务器IP地址修改</a><br>绑定域名后新建的仓库，url显示域名，但原有的仓库url仍然显示ip</p>
<p>解决方法：<br>修改<code>gitlab.yml</code>配置文件：</p>
<figure class="highlight diff"><figcaption><span>/var/opt/gitlab/gitlab-rails/etc/gitlab.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">production: &amp;base</span><br><span class="line">  #</span><br><span class="line">  # 1. GitLab app settings</span><br><span class="line">  # <span class="comment">==========================</span></span><br><span class="line"></span><br><span class="line">  ## GitLab settings</span><br><span class="line">  gitlab:</span><br><span class="line">    ## Web server settings (note: host is the FQDN, do not include http://)</span><br><span class="line"><span class="deletion">-    host: 127.0.0.1</span></span><br><span class="line"><span class="addition">+    host: localhost</span></span><br><span class="line">    port: 9080</span><br><span class="line">    https: false</span><br></pre></td></tr></table></figure>
<p>将host的ip修改为域名，执行<code>gitlab-ctl restart</code>重启Gitlab即可</p>
<h3 id="git在windows上提交时会自动将LF替换成CRLF的问题"><a href="#git在windows上提交时会自动将LF替换成CRLF的问题" class="headerlink" title="git在windows上提交时会自动将LF替换成CRLF的问题"></a>git在windows上提交时会自动将LF替换成CRLF的问题</h3><p><a href="https://www.cnblogs.com/dahe1989/archive/2019/04/28/10784581.html" target="_blank" rel="noopener">Git操作中crlf和lf冲突问题</a></p>
<blockquote>
<p><code>CR</code>：Carriage Return，<code>\r</code>，表示回车<br><code>LF</code>：Linefeed，<code>\n</code>，表示换行<br><code>CRLF</code>：Carriage Return &amp; Linefeed，<code>\r\n</code>，表示回车并换行</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">平台</th>
<th align="center">换行</th>
</tr>
</thead>
<tbody><tr>
<td align="center">UNIX/Linux</td>
<td align="center">LF</td>
</tr>
<tr>
<td align="center">Mac OS</td>
<td align="center">LF</td>
</tr>
<tr>
<td align="center">DOS/Windows</td>
<td align="center">CRLF</td>
</tr>
</tbody></table>
<p><code>Github</code>上一些开源代码中是<code>LF</code>换行，但Windows平台使用的<code>CRLF</code>换行符。git默认配置了<code>autocrlf</code>为<code>true</code>，因此Windows下使用git默认所有代码<code>LF</code>都会被替换成<code>CRLF</code>，代码提交时显示0行差异，但仍会被认为是差异文件。<br>修改git全局配置，禁用git自动将<code>LF</code>转为<code>CRLF</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global core.autocrlf <span class="literal">false</span></span><br></pre></td></tr></table></figure>
<h3 id="宝塔gitlab修改管理员密码"><a href="#宝塔gitlab修改管理员密码" class="headerlink" title="宝塔gitlab修改管理员密码"></a>宝塔gitlab修改管理员密码</h3><p><a href="https://www.cnblogs.com/richerdyoung/p/12009232.html" target="_blank" rel="noopener">【Gitlab】宝塔gitlab 修改管理员账号密码</a></p>
<ol>
<li>切换目录：<code>cd /opt/gitlab/bin</code></li>
<li>执行<code>sudo gitlab-rails console production</code>命令开始初始化密码</li>
<li>在<code>irb(main):001:0&gt;</code>后通过<code>u=User.where(id:1).first</code>来查找与切换账号<strong>(<code>User.all</code>可以查看所有用户)</strong></li>
<li>执行<code>u.password=&#39;12345678&#39;</code>设置密码为12345678</li>
<li>执行<code>u.save!</code>进行保存</li>
<li>执行<code>exit</code>退出设置</li>
<li>通过账号<em>root/12345678</em>登录gitlab</li>
</ol>
<h3 id="linux登录出现-bash-4-2-的问题"><a href="#linux登录出现-bash-4-2-的问题" class="headerlink" title="linux登录出现-bash-4.2$的问题"></a>linux登录出现<code>-bash-4.2$</code>的问题</h3><p><a href="https://www.jianshu.com/p/d0f1cb0d83a4" target="_blank" rel="noopener">linux 命令终端提示符显示-bash-4.2#解决方法</a><br>xshell的远程登录linux服务器，终端提示符显示的是<code>-bash-4.2#</code>而不是<code>root@主机名</code>的问题，问题原因：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用户目录下的配置文件丢失，具体文件为.bash_profile和.bashrc</span><br></pre></td></tr></table></figure>
<p>解决方案：<br>从主默认文件重新拷贝一份配置文件到用户目录下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp /etc/skel/.bashrc /root/</span><br><span class="line">cp /etc/skel/.bash_profile /root/</span><br></pre></td></tr></table></figure>
<p>注销用户，重新登录即可恢复正常</p>
]]></content>
      <categories>
        <category>常见问题</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Freenom免费域名注册</title>
    <url>/65dcfcb8/</url>
    <content><![CDATA[<p>前言</p>
<blockquote>
<p>这里简单记录下<code>Freenom免费域名</code>的注册教程</p>
</blockquote>
<a id="more"></a>

<p><a href="https://www.ssffx.com/wangzhanjianshe/51514.html" target="_blank" rel="noopener">参考教程</a></p>
<ul>
<li><p>已注册域名：<code>kang1024.tk</code></p>
</li>
<li><p>域名注册：<a href="https://www.freenom.com/zh/index.html?lang=zh" target="_blank" rel="noopener">Freenom</a><br>账号：<code>130***8802@qq.com</code><br>密码：<code>yjk19******</code></p>
</li>
<li><p>DNS解析：<a href="https://console.dnspod.cn/" target="_blank" rel="noopener">DNSPod</a><br>账号：<code>130***8802@qq.com</code><br>密码：<code>yjk@19******</code></p>
</li>
</ul>
<p><img src="/images/%E5%B7%A5%E5%85%B7%E6%96%87%E6%A1%A3/2020-05-25_182110.png" alt=""><br><img src="/images/%E5%B7%A5%E5%85%B7%E6%96%87%E6%A1%A3/2020-05-25_182207.png" alt=""></p>
]]></content>
      <categories>
        <category>工具文档</category>
      </categories>
      <tags>
        <tag>freenom</tag>
        <tag>免费域名</tag>
      </tags>
  </entry>
  <entry>
    <title>Boost库分类</title>
    <url>/71116eae/</url>
    <content><![CDATA[<p>前言</p>
<blockquote>
<p>这里简单记录下<code>Boost库</code>分类</p>
</blockquote>
<a id="more"></a>

<p><strong>Boost库分类</strong><br><a href="https://github.com/kang1024/daily/tree/master/visual%20studio/boost" target="_blank" rel="noopener">GitHub地址</a></p>
<p><a href="https://blog.csdn.net/zuoyefeng1990/article/details/50508353" target="_blank" rel="noopener">参考博客</a><br>按照实现的功能，Boost可为大致归入以下20个分类，在下面的分类中，有些库同时归入几种类别</p>
<h3 id="字符串和文本处理库"><a href="#字符串和文本处理库" class="headerlink" title="字符串和文本处理库"></a>字符串和文本处理库</h3><ol>
<li><code>Conversion</code>库：对C++类型转换的增强，提供更强的类型安全转换、更高效的类型安全保护、进行范围检查的数值转换和词法转换</li>
<li><code>Format</code>库：实现类似printf的格式化对象，可以把参数格式化到一个字符串，而且是完全类型安全的</li>
<li><code>IOStream</code>库：扩展C++标准库流处理，建立一个流处理框架</li>
<li><code>Lexical Cast</code>库：用于字符串、整数、浮点数的字面转换</li>
<li><code>Regex</code>库：正则表达式，已经被TR1所接受</li>
<li><code>Spirit</code>库：基于EBNF范式的LL解析器框架</li>
<li><code>String Algo</code>库：一组与字符串相关的算法</li>
<li><code>Tokenizer</code>库：把字符串拆成一组记号的方法</li>
<li><code>Wave</code>库：使用spirit库开发的一个完全符合C/C++标准的预处理器</li>
<li><code>Xpressive</code>库：无需编译即可使用的正则表达式库</li>
</ol>
<h3 id="容器库"><a href="#容器库" class="headerlink" title="容器库"></a>容器库</h3><ol>
<li><code>Array</code>库：对C语言风格的数组进行包装</li>
<li><code>Bimap</code>库：双向映射结构库</li>
<li><code>Circular Buffer</code>库：实现循环缓冲区的数据结构</li>
<li><code>Disjoint Sets</code>库：实现不相交集的库</li>
<li><code>Dynamic Bitset</code>库：支持运行时调整容器大小的位集合</li>
<li><code>GIL</code>库：通用图像库</li>
<li><code>Graph</code>库：处理图结构的库</li>
<li><code>ICL</code>库：区间容器库，处理区间集合和映射</li>
<li><code>Intrusive</code>库：侵入式容器和算法</li>
<li><code>Multi-Array</code>库：多维容器</li>
<li><code>Multi-Index</code>库：实现具有多个STL兼容索引的容器</li>
<li><code>Pointer Container</code>库：容纳指针的容器</li>
<li><code>Property Map</code>库：提供键/值映射的属性概念定义</li>
<li><code>Property Tree</code>库：保存了多个属性值的树形数据结构</li>
<li><code>Unordered</code>库：散列容器，相当于hash_xxx</li>
<li><code>Variant</code>库：简单地说，就是持有string, vector等复杂类型的联合体</li>
</ol>
<h3 id="迭代器库"><a href="#迭代器库" class="headerlink" title="迭代器库"></a>迭代器库</h3><ol>
<li><code>GIL</code>库：通用图像库</li>
<li><code>Graph</code>库：处理图结构的库</li>
<li><code>Iterators</code>库：为创建新的迭代器提供框架</li>
<li><code>Operators</code>库：允许用户在自己的类里仅定义少量的操作符，就可方便地自动生成其他操作符重载，而且保证正确的语义实现</li>
<li><code>Tokenizer</code>库：把字符串拆成一组记号的方法</li>
</ol>
<h3 id="算法库"><a href="#算法库" class="headerlink" title="算法库"></a>算法库</h3><ol>
<li><code>Foreach</code>库：容器遍历算法</li>
<li><code>GIL</code>库：通用图像库</li>
<li><code>Graph</code>库：处理图结构的库</li>
<li><code>Min-Max</code>库：可在同一次操作中同时得到最大值和最小值</li>
<li><code>Range</code>库：一组关于范围的概念和实用程序</li>
<li><code>String Algo</code>库：可在不使用正则表达式的情况下处理大多数字符串相关算法操作</li>
<li><code>Utility</code>库：小工具的集合</li>
</ol>
<h3 id="函数对象和高阶编程库"><a href="#函数对象和高阶编程库" class="headerlink" title="函数对象和高阶编程库"></a>函数对象和高阶编程库</h3><ol>
<li><code>Bind</code>库：绑定器的泛化，已被收入TR1</li>
<li><code>Function</code>库：实现一个通用的回调机制，已被收入TR1</li>
<li><code>Functional</code>库：适配器的增强版本</li>
<li><code>Functional/Factory</code>库：用于实现静态和动态的工厂模式</li>
<li><code>Functional/Forward</code>库：用于接受任何类型的参数</li>
<li><code>Functional/Hash</code>库：实现了TR1中的散列函数</li>
<li><code>Lambda</code>库：Lambda表达式，即未命名函数</li>
<li><code>Member Function</code>库：是STL中mem_fun和mem_fun_ref的扩展</li>
<li><code>Ref</code>库：包装了对一个对象的引用，已被收入TR1</li>
<li><code>Result Of</code>库：用于确定一个调用表达式的返回类型，已被收入TR1</li>
<li><code>Signals</code>库：实现线程安全的观察者模式</li>
<li><code>Signals2</code>库：基于Signal的另一种实现</li>
<li><code>Utility</code>库：小工具的集合</li>
<li><code>Phoenix</code>库：实现在C++中的函数式编程</li>
</ol>
<h3 id="泛型编程库"><a href="#泛型编程库" class="headerlink" title="泛型编程库"></a>泛型编程库</h3><ol>
<li><code>Call Traits</code>库：封装可能是最好的函数传参方式</li>
<li><code>Concept Check</code>库：用来检查是否符合某个概念</li>
<li><code>Enable If</code>库：允许模板函数或模板类在偏特化时仅针对某些特定类型有效</li>
<li><code>Function Types</code>库：提供对函数、函数指针、函数引用和成员指针等类型进行分类分解和合成的功能</li>
<li><code>GIL</code>库：通用图像库</li>
<li><code>In Place Factory/Typed In Place Factory</code>库：工厂模式的一种实现</li>
<li><code>Operators</code>库：允许用户在自己的类里仅定义少量的操作符，就可方便地自动生成其他操作符重载，而且保证正确的语义实现</li>
<li><code>Property Map</code>库：提供键值映射的属性概念定义</li>
<li><code>Static Assert</code>库：把断言的诊断时刻由运行期提前到编译期，让编译器检查可能发生的错误</li>
<li><code>Type Traits</code>库：在编译时确定类型是否具有某些特征</li>
<li><code>TTI</code>库：实现类型萃取的反射功能</li>
</ol>
<h3 id="模板元编程"><a href="#模板元编程" class="headerlink" title="模板元编程"></a>模板元编程</h3><ol>
<li><code>Fusion</code>库：提供基于tuple的编译期容器和算法</li>
<li><code>MPL</code>库：模板元编程框架</li>
<li><code>Proto</code>库：构建专用领域嵌入式语言</li>
<li><code>Static Assert</code>库：把断言的诊断时刻由运行期提前到编译期，让编译器检查可能发生的错误</li>
<li><code>Type Traits</code>库：在编译时确定类型是否具有某些特征</li>
</ol>
<h3 id="预处理元编程库"><a href="#预处理元编程库" class="headerlink" title="预处理元编程库"></a>预处理元编程库</h3><ol>
<li><code>Preprocessors</code>库：提供预处理元编程工具</li>
</ol>
<h3 id="并发编程库"><a href="#并发编程库" class="headerlink" title="并发编程库"></a>并发编程库</h3><ol>
<li><code>Asio</code>库：基于操作系统提供的异步机制，采用前摄设计模式实现了可移植的异步IO操作</li>
<li><code>Interprocess</code>库：实现了可移植的进程间通信功能，包括共享内存、内存映射文件、信号量、文件锁、消息队列等</li>
<li><code>MPI</code>库：用于高性能的分布式并行开发</li>
<li><code>Thread</code>库：为C++增加线程处理能力，支持Windows和POSIX线程</li>
<li><code>Context</code>库：提供了在单个线程上的协同式多任务处理的支持，该库可以用于实现用户级的多任务处理的机制，比如说协程coroutines，用户级协作线程或者类似于C#语言中yield关键字的实现</li>
<li><code>Atomic</code>库：实现C++11样式的atomic&lt;&gt;，提供原子数据类型的支持和对这些原子类型的原子操作的支持</li>
<li><code>Coroutine</code>库：实现对协程的支持，协程与线程的不同之处在于，协程是基于合作式多任务的，而多线程是基于抢先式多任务的</li>
<li><code>Lockfree</code>库：提供对无锁数据结构的支持</li>
</ol>
<h3 id="数学和数字库"><a href="#数学和数字库" class="headerlink" title="数学和数字库"></a>数学和数字库</h3><ol>
<li><code>Accumulators</code>库：用于增量计算的累加器的框架</li>
<li><code>Integer</code>库：提供一组有关整数处理的类</li>
<li><code>Interval</code>库：处理区间概念的数学问题</li>
<li><code>Math</code>库：数学领域的模板类和算法</li>
<li><code>Math Common Factor</code>库：用于支持最大公约数和最小公倍数</li>
<li><code>Math Octonion</code>库：用于支持八元数</li>
<li><code>Math Quaternion</code>库：用于支持四元数</li>
<li><code>Math/Special Functions</code>库：数学上一些常用的函数</li>
<li><code>Math/Statistical Distributions</code>库：用于单变量统计分布操作</li>
<li><code>Multi-Array</code>库：多维容器</li>
<li><code>Numeric Conversion</code>库：用于安全数字转换的一组函数</li>
<li><code>Operators</code>库：允许用户在自己的类里仅定义少量的操作符，就可方便地自动生成其他操作符重载，而且保证正确的语义实现</li>
<li><code>Random</code>库：专注于伪随机数的实现，有多种算法可以产生高质量的伪随机数</li>
<li><code>Rational</code>库：实现了没有精度损失的有理数</li>
<li><code>uBLAS</code>库：用于线性代数领域的数学库</li>
<li><code>Geometry</code>库：用于解决几何问题的概念、原语和算法</li>
<li><code>Ratio</code>库：根据C++ 0x标准N2661号建议，实现编译期的分数操作</li>
<li><code>Multiprecision</code>库：提供比C++内置的整数、分数和浮点数精度更高的多精度数值运算功能</li>
<li><code>Odeint</code>库：用于求解常微分方程的初值问题</li>
</ol>
<h3 id="排错和测试库"><a href="#排错和测试库" class="headerlink" title="排错和测试库"></a>排错和测试库</h3><ol>
<li><code>Concept Check</code>库：用来检查是否符合某个概念</li>
<li><code>Static Assert</code>库：把断言的诊断时刻由运行期提前到编译期，让编译器检查可能发生的错误</li>
<li><code>Test</code>库：提供了一个用于单元测试的基于命令行界面的测试套件</li>
</ol>
<h3 id="数据结构库"><a href="#数据结构库" class="headerlink" title="数据结构库"></a>数据结构库</h3><ol>
<li><code>Any</code>库：支持对任意类型的值进行类型安全的存取</li>
<li><code>Bimap</code>库：双向映射结构库</li>
<li><code>Compressed Pair</code>库：优化的对pair对象的存储</li>
<li><code>Fusion</code>库：提供基于tuple的编译期容器和算法</li>
<li><code>ICL</code>库：区间容器库，处理区间集合和映射</li>
<li><code>Multi-Index</code>库：为底层的容器提供多个索引</li>
<li><code>Pointer Container</code>库：容纳指针的容器</li>
<li><code>Property Tree</code>库：保存了多个属性值的树形数据结构</li>
<li><code>Tuple</code>库：元组，已被TR1接受</li>
<li><code>Uuid</code>库：用于表示和生成UUID</li>
<li><code>Variant</code>库：有类别的泛型联合类</li>
<li><code>Heap</code>库：对std::priority_queue扩展，实现优先级队列</li>
<li><code>Type Erasure</code>库：实现运行时的多态</li>
</ol>
<h3 id="图像处理库"><a href="#图像处理库" class="headerlink" title="图像处理库"></a>图像处理库</h3><ol>
<li><code>GIL</code>库：通用图像库</li>
</ol>
<h3 id="输入输出库"><a href="#输入输出库" class="headerlink" title="输入输出库"></a>输入输出库</h3><ol>
<li><code>Assign</code>库：用简洁的语法实现对STL容器赋值或者初始化</li>
<li><code>Format</code>库：实现类似printf的格式化对象，可以把参数格式化到一个字符串，而且是完全类型安全的</li>
<li><code>IO State Savers</code>库：用来保存流的当前状态，自动恢复流的状态等</li>
<li><code>IOStreams</code>库：扩展C++标准库流处理，建立一个流处理框架</li>
<li><code>Program Options</code>库：提供强大的命令行参数处理功能</li>
<li><code>Serialization</code>库：实现C++数据结构的持久化</li>
</ol>
<h3 id="跨语言混合编程库"><a href="#跨语言混合编程库" class="headerlink" title="跨语言混合编程库"></a>跨语言混合编程库</h3><ol>
<li><code>Python</code>库：用于实现Python和C++对象的无缝接口和混合编程</li>
</ol>
<h3 id="内存管理库"><a href="#内存管理库" class="headerlink" title="内存管理库"></a>内存管理库</h3><ol>
<li><code>Pool</code>库：基于简单分隔存储思想实现了一个快速、紧凑的内存池库</li>
<li><code>Smart Ptr</code>库：智能指针</li>
<li><code>Utility</code>库：小工具的集合</li>
</ol>
<h3 id="解析库"><a href="#解析库" class="headerlink" title="解析库"></a>解析库</h3><ol>
<li><code>Spirit</code>库：基于EBNF范式的LL解析器框架</li>
</ol>
<h3 id="编程接口库"><a href="#编程接口库" class="headerlink" title="编程接口库"></a>编程接口库</h3><ol>
<li><code>Function</code>库：实现一个通用的回调机制，已被收入TR1</li>
<li><code>Parameter</code>库：提供使用参数名来指定函数参数的机制</li>
</ol>
<h3 id="综合类库"><a href="#综合类库" class="headerlink" title="综合类库"></a>综合类库</h3><ol>
<li><code>Compressed Pair</code>库：优化的对pair对象的存储</li>
<li><code>CRC</code>库：实现了循环冗余校验码功能</li>
<li><code>Date Time</code>库：一个非常全面灵活的日期时间库</li>
<li><code>Exception</code>库：针对标准库中异常类的缺陷进行强化，提供&lt;&lt;操作符重载，可以向异常传入任意数据</li>
<li><code>Filesystem</code>库：可移植的文件系统操作库，可以跨平台操作目录、文件，已被TR2接受</li>
<li><code>Flyweight</code>库：实现享元模式，享元对象不可修改，只能赋值</li>
<li><code>Lexical Cast</code>库：用于字符串、整数、浮点数的字面转换</li>
<li><code>Meta State Machine</code>库：用于表示UML2有限状态机的库</li>
<li><code>Numeric Conversion</code>库：用于安全数字转换的一组函数</li>
<li><code>Optional</code>库：使用容器的语义，包装了可能产生无效值的对象，实现了未初始化的概念</li>
<li><code>Polygon</code>库：处理平面多边形的一些算法</li>
<li><code>Program Options</code>库：提供强大的命令行参数处理功能</li>
<li><code>Scope Exit</code>库：使用preprocessor库的预处理技术实现在退出作用域时资源自动释放</li>
<li><code>Statechart</code>库：提供有限自动状态机框架</li>
<li><code>Swap</code>库：为交换两个变量的值提供便捷方法</li>
<li><code>System</code>库：使用轻量级的对象封装操作系统底层的错误代码和错误信息，已被TR2接受</li>
<li><code>Timer</code>库：提供简易的度量时间和进度显示功能，可以用于性能测试等需要计时的任务</li>
<li><code>Tribool</code>库：三态布尔逻辑值，在true和false之外引入indeterminate不确定状态</li>
<li><code>Typeof</code>库：模拟C++0x新增加的typeof和auto关键字，以减轻变量类型声明的工作，简化代码</li>
<li><code>Units</code>库：实现了物理学的量纲处理</li>
<li><code>Utility</code>库：小工具集合</li>
<li><code>Value Initialized</code>库：用于保证变量在声明时被正确初始化</li>
<li><code>Chrono</code>库：实现了C++0x标准中N2661号建议所支持的时间功能</li>
<li><code>Log</code>库：实现日志功能</li>
<li><code>Predef</code>库：提供一批统一兼容探测其他宏的预定义宏</li>
</ol>
<h3 id="编译器问题的变通方案库"><a href="#编译器问题的变通方案库" class="headerlink" title="编译器问题的变通方案库"></a>编译器问题的变通方案库</h3><ol>
<li><code>Compatibility</code>库：为不符合标准库要求的环境提供帮助</li>
<li><code>Config</code>库：将程序的编译配置分解为三个部分：平台、编译器和标准库，帮助库开发者解决特定平台特定编译器的兼容问题</li>
</ol>
]]></content>
      <categories>
        <category>工作学习</category>
      </categories>
      <tags>
        <tag>boost</tag>
      </tags>
  </entry>
  <entry>
    <title>linux五种IO模型</title>
    <url>/7115c338/</url>
    <content><![CDATA[<p>前言</p>
<blockquote>
<p>这里简单记录下<code>linux五种IO模型</code>总结</p>
</blockquote>
<a id="more"></a>

<h3 id="基本概念说明"><a href="#基本概念说明" class="headerlink" title="基本概念说明"></a>基本概念说明</h3><p><a href="https://segmentfault.com/a/1190000003063859" target="_blank" rel="noopener">参考博客</a></p>
<blockquote>
<p>用户空间和内核空间<br>进程切换<br>进程阻塞<br>文件描述符fd<br>缓存I/O</p>
</blockquote>
<h4 id="用户空间和内核空间"><a href="#用户空间和内核空间" class="headerlink" title="用户空间和内核空间"></a>用户空间和内核空间</h4><p>现代操作系统都是采用虚拟存储器，对32位操作系统而言，它的寻址空间(虚拟存储空间)为4GB(2<sup>32</sup>)。操作系统的核心是内核(kernel)，独立于普通的应用程序，可以访问受保护的内存空间，也有访问底层硬件设备的所有权限。为了保证用户进程不能直接操作内核，保证内核的安全，操作系统将虚拟空间划分为两部分：内核空间和用户空间。针对linux操作系统而言，将最高的1GB字节(从虚拟地址0xC0000000到0xFFFFFFFF)，供内核使用，称为内核空间；而将降低的3GB字节(从虚拟地址0x00000000到0xBFFFFFFF)，供应用程序使用，称为用户空间。</p>
<h4 id="进程切换"><a href="#进程切换" class="headerlink" title="进程切换"></a>进程切换</h4><p>为了控制进程的执行，内核必须有能力挂起正在CPU上运行的进程，并恢复以前挂起的某个进程执行，这种行为被称为进程切换。因此可以说，任何进程都是在操作系统内核的支持下运行的，是与内核紧密相关的。<br>进程切换，即从一个进程的运行切换到另一个进程上的运行，这个过程经过下面的变化：</p>
<ol>
<li>保存处理机上下文，包括程序计数器和其他寄存器；</li>
<li>更新PCB(Process Control Block，进程控制块)信息；</li>
<li>把PCB移入相应的队列，如就绪、在某事件阻塞等队列；</li>
<li>选择另一个进程执行，并更新其PCB；</li>
<li>更新内存管理的数据结构；</li>
<li>恢复处理机的上下文。</li>
</ol>
<p><strong>总而言之，进程切换就是很消耗资源。</strong></p>
<h4 id="进程阻塞"><a href="#进程阻塞" class="headerlink" title="进程阻塞"></a>进程阻塞</h4><p>正在执行的进程，由于等待的某些事件未发生，如请求系统资源失败、等待某种操作的完成、新数据未达到或无新任务执行等，则由系统自动执行阻塞原语(Block)，使进程由运行状态变为阻塞状态。可见，进程的阻塞是进程自身的一种主动行为，也因此只有处于运行态(获得CPU)的进程，才可能将其转为阻塞状态。<strong>当进入阻塞状态，进程不占用CPU资源</strong></p>
<h4 id="文件描述符fd"><a href="#文件描述符fd" class="headerlink" title="文件描述符fd"></a>文件描述符fd</h4><p>文件描述符(File Descriptor)是计算机科学中的一个术语，是用于表述指向文件的引用的抽象化概念。<br>文件描述符在形式上是一个非负整数。实际上，它是一个索引值，指向内核为每一个进程所维护的该进程打开文件的记录表。当程序打开一个现有文件或创建一个新文件时，内核向进程返回一个文件描述符。在程序设计中，一些涉及底层的程序编写往往会围绕着文件描述符展开，但是文件描述符只适用于unix和linux操作系统。</p>
<h4 id="缓存I-O"><a href="#缓存I-O" class="headerlink" title="缓存I/O"></a>缓存I/O</h4><p>缓存I/O又被称作标准I/O，大多数文件系统的默认I/O都是缓存I/O。在linux的缓存I/O机制中，操作系统会将I/O的数据缓存在文件系统的页缓存(page cache)中，也就是说，数据会先被拷贝到操作系统内核的缓冲区中，然后才会从操作系统内核的缓冲区拷贝到应用程序的地址空间。<br><strong>缓存I/O的缺点：</strong><br>数据在传输过程中需要在用户空间和内核空间之间进行多次的数据拷贝操作，这些数据拷贝操作所带来的CPU以及内存开销是非常大的。</p>
<h3 id="五种IO模型"><a href="#五种IO模型" class="headerlink" title="五种IO模型"></a>五种IO模型</h3><p><a href="https://blog.csdn.net/ZWE7616175/article/details/80591587" target="_blank" rel="noopener">参考博客</a><br>参考书籍：《unix网络编程 卷一》<code>第2部分 6.2 I/O复用：select和poll函数</code></p>
<p>对于一个套接字上的输入操作，第一步通常涉及等待数据从网络中到达。当所等待分组到达时，它被复制到内核中的某个缓存区。第二步就是把数据从内核缓冲区拷贝到应用进程缓冲区中。通常包含两个不同的阶段：</p>
<ol>
<li>等待数据准备好；</li>
<li>从内核向进程拷贝数据。</li>
</ol>
<p>正因为这两个阶段，linux系统产生了以下五种网络模型：</p>
<blockquote>
<p>阻塞IO模型(blocking IO)<br>非阻塞IO模型(nonblocking IO)<br>IO多路复用模型(IO multiplexing)<br>信号驱动IO模型(signal driven IO)<br>异步IO模型(asynchronous IO)</p>
</blockquote>
<h4 id="阻塞IO模型-blocking-IO"><a href="#阻塞IO模型-blocking-IO" class="headerlink" title="阻塞IO模型(blocking IO)"></a>阻塞IO模型(blocking IO)</h4><blockquote>
<p>A拿着一支鱼竿在河边钓鱼，并且一直在鱼竿前等，在等的时候不做其他的事情，十分专心。只有鱼上钩的时，才结束掉等的动作，把鱼钓上来。</p>
</blockquote>
<p>A拿的鱼竿就是一个<code>文件描述符</code>。<br>在内核将数据报准备好之前，系统调用会一直等待所有的套接字，默认的是阻塞方式。这个模型是我们最常见的，程序调用和我们编写的基本程序是一致的，程序的read必须在write之后执行，当write阻塞住，read就不能执行，一直处于等待状态。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">auto</span> fd = connect();</span><br><span class="line">write(fd);</span><br><span class="line">read(fd);</span><br><span class="line">close(fd);</span><br></pre></td></tr></table></figure>

<p><img src="/images/%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0/2020-05-23_182912.png" alt=""></p>
<h4 id="非阻塞IO模型-nonblocking-IO"><a href="#非阻塞IO模型-nonblocking-IO" class="headerlink" title="非阻塞IO模型(nonblocking IO)"></a>非阻塞IO模型(nonblocking IO)</h4><blockquote>
<p>B也在河边钓鱼，但是B不想将自己的所有时间都花费在钓鱼上，在等鱼上钩这个时间段中，B也在做其他的事情(一会看看书，一会读读报纸，一会又去看其他人的钓鱼等)，但B在做这些事情的时候，每隔一个固定的时间检查鱼是否上钩。一旦检查到有鱼上钩，就停下手中的事情，把鱼钓上来。</p>
</blockquote>
<p>B在检查鱼竿是否有鱼，是一个<code>轮询</code>的过程。<br>每次用户询问内核是否有数据报准备好，即<code>文件描述符</code>缓存区是否就绪。当有数据报准备好时，就进行拷贝数据报的操作。当没有数据报准备好时，也不阻塞程序，内核直接返回未准备就绪的信号，等待用户程序的下一个轮询。<br>但是，轮询对于CPU来说是较大的浪费，一般只有在特定的场景下才使用。</p>
<p><img src="/images/%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0/2020-05-23_183527.png" alt=""></p>
<h4 id="IO多路复用模型-IO-multiplexing"><a href="#IO多路复用模型-IO-multiplexing" class="headerlink" title="IO多路复用模型(IO multiplexing)"></a>IO多路复用模型(IO multiplexing)</h4><blockquote>
<p>C同样也在河边钓鱼，但是C生活水平比较好，C拿了很多的鱼竿，一次性有很多鱼竿在等，C不断的查看每个鱼竿是否有鱼上钩，有鱼上钩即可将鱼钓上来。</p>
</blockquote>
<p>IO多路复用是多了一个select函数，select函数有一个参数是<code>文件描述符集合</code>，对这些文件描述符循环监听，当某个文件描述符就绪时，就对这个文件描述符进行处理。<br>其中，<code>select</code>只负责等待，<code>recvform</code>只负责拷贝。<br>IO多路复用属于阻塞IO，但是可以对多个文件描述符进行阻塞监听，所以效率较阻塞IO的高。</p>
<p><img src="/images/%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0/2020-05-23_183845.png" alt=""></p>
<h4 id="信号驱动IO模型-signal-driven-IO"><a href="#信号驱动IO模型-signal-driven-IO" class="headerlink" title="信号驱动IO模型(signal driven IO)"></a>信号驱动IO模型(signal driven IO)</h4><blockquote>
<p>D也在河边钓鱼，但与A、B不同的是，D比较聪明，他给鱼竿上挂一个铃铛，当有鱼上钩的时候，这个铃铛就会被碰响，D就会将鱼钓上来。</p>
</blockquote>
<p>D鱼竿上的铃铛就是一个<code>信号</code><br>信号驱动IO模型，应用进程告诉内核，当数据报准备好的时候，给应用进程发送一个信号，对SIGIO信号进行捕捉，并且调用应用进程的信号处理函数来获取数据报。</p>
<p><img src="/images/%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0/2020-05-23_183814.png" alt=""></p>
<h4 id="异步IO模型-asynchronous-IO"><a href="#异步IO模型-asynchronous-IO" class="headerlink" title="异步IO模型(asynchronous IO)"></a>异步IO模型(asynchronous IO)</h4><blockquote>
<p>E也想钓鱼，但E有事情，于是他雇来了F，让F帮他拿着鱼竿钓鱼，一旦有鱼上钩，F就会把鱼钓上来通知给E，并把鱼送给E。</p>
</blockquote>
<p>当应用程序调用<code>aio_read</code>时，内核一方面去取数据报内容返回，另一方面将程序控制权还给应用进程，应用进程继续处理其他事情，是一种非阻塞的状态。<br>当内核中有数据报就绪时，由内核将数据报拷贝到应用程序中，返回aio_read中定义好的函数处理程序。<br>很少有linux系统支持异步IO，windows的<code>IOCP</code>就是该模型。</p>
<p><img src="/images/%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0/2020-05-23_183941.png" alt=""></p>
<h4 id="各种IO模型的比较"><a href="#各种IO模型的比较" class="headerlink" title="各种IO模型的比较"></a>各种IO模型的比较</h4><p><img src="/images/%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0/2020-05-23_193938.png" alt=""></p>
<p><strong>总结</strong>：阻塞程度由高到低，效率由低到高</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">阻塞IO &gt; 非阻塞IO &gt; IO多路复用 &gt; 信号驱动IO &gt; 异步IO</span><br></pre></td></tr></table></figure>

<h3 id="IO多路复用模型-重点"><a href="#IO多路复用模型-重点" class="headerlink" title="IO多路复用模型(重点)"></a>IO多路复用模型(重点)</h3><p><a href="https://www.jianshu.com/p/397449cadc9a" target="_blank" rel="noopener">参考博客</a></p>
<h4 id="select"><a href="#select" class="headerlink" title="select"></a>select</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">select</span> <span class="params">(<span class="keyword">int</span> maxfdp1, fd_set* readfds, fd_set* writefds, fd_set* exceptfds, struct timeval* timeout)</span></span>;</span><br></pre></td></tr></table></figure>
<p>【参数说明】<br>【返回值】</p>
<h4 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">poll</span> <span class="params">(struct pollfd* fds, <span class="keyword">unsigned</span> <span class="keyword">int</span> nfds, <span class="keyword">int</span> timeout)</span></span>;</span><br></pre></td></tr></table></figure>
<p>【参数说明】<br>【返回值】</p>
<h4 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_create</span><span class="params">(<span class="keyword">int</span> size)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_ctl</span><span class="params">(<span class="keyword">int</span> epfd, <span class="keyword">int</span> op, <span class="keyword">int</span> fd, struct epoll_event* event)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">epoll_wait</span><span class="params">(<span class="keyword">int</span> epfd, struct epoll_event* events, <span class="keyword">int</span> maxevents, <span class="keyword">int</span> timeout)</span></span>;</span><br></pre></td></tr></table></figure>
<p>【参数说明】<br>【返回值】</p>
<h4 id="三种机制比较"><a href="#三种机制比较" class="headerlink" title="三种机制比较"></a>三种机制比较</h4><table>
<thead>
<tr>
<th align="center"></th>
<th>select</th>
<th>poll</th>
<th>epoll</th>
</tr>
</thead>
<tbody><tr>
<td align="center">操作方式</td>
<td>遍历</td>
<td>遍历</td>
<td>回调</td>
</tr>
<tr>
<td align="center">底层实现</td>
<td>数组</td>
<td>链表</td>
<td>哈希表</td>
</tr>
<tr>
<td align="center">时间复杂度</td>
<td>O(n)</td>
<td>O(n)</td>
<td>O(1)</td>
</tr>
<tr>
<td align="center">IO效率</td>
<td>每次调用都进行线性遍历</td>
<td>每次调用都进行线性遍历</td>
<td>事件通知方式，每当fd就绪，系统注册的回调函数就会被调用，将就绪fd放到readyList里面</td>
</tr>
<tr>
<td align="center">最大连接数</td>
<td>1024(x86)/2048(x64)</td>
<td>无上限</td>
<td>无上限</td>
</tr>
<tr>
<td align="center">fd拷贝</td>
<td>每次调用select，都需要把fd集合从用户态拷贝到内核态</td>
<td>每次调用poll，都需要把fd集合从用户态拷贝到内核态</td>
<td>调用epoll_ctl时拷贝进内核并保存，之后每次epoll_wait不拷贝</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>工作学习</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>IO复用</tag>
      </tags>
  </entry>
  <entry>
    <title>tcp协议</title>
    <url>/e59437eb/</url>
    <content><![CDATA[<p>前言</p>
<blockquote>
<p>这里简单记录下<code>tcp协议</code>总结</p>
</blockquote>
<a id="more"></a>

<p><img src="/images/%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0/2020-05-19_195316.png" alt=""></p>
<p><img src="/images/%E5%B7%A5%E4%BD%9C%E5%AD%A6%E4%B9%A0/2020-05-20_001804.png" alt=""></p>
<h3 id="tcp协议"><a href="#tcp协议" class="headerlink" title="tcp协议"></a>tcp协议</h3><h4 id="建立与终止"><a href="#建立与终止" class="headerlink" title="建立与终止"></a>建立与终止</h4><ul>
<li>三次握手四次挥手</li>
</ul>
<h4 id="重传机制"><a href="#重传机制" class="headerlink" title="重传机制"></a>重传机制</h4><h4 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h4><h4 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h4><p>拥塞控制是作用于网络的，它是防止过多的数据注入到网络中，避免出现网络负载过大的情况，由拥塞窗口实现</p>
<ul>
<li>慢启动</li>
<li>拥塞避免</li>
<li>快速重传</li>
<li>快速恢复</li>
</ul>
<h4 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h4><p>流量控制是作用于接收者的，它是控制发送者的发送速度从而使接收者来得及接收，防止分组丢失的，由滑动窗口实现</p>
<ul>
<li>滑动窗口</li>
</ul>
<h4 id="tcp粘包"><a href="#tcp粘包" class="headerlink" title="tcp粘包"></a>tcp粘包</h4><ul>
<li><p>产生粘包的两种情况</p>
<blockquote>
<ol>
<li>当连续发送数据时，由于tcp的nagle算法，会将较小的内容拼接成大的内容，一次性打给服务端，因此造成粘包</li>
<li>当发送内容较大时，由于服务端的recv方法的中的buffer_size较小，不能一次性接收全部内容，在下一次请求到达时，接受的内容依然是上次没有接收完的内容，因此造成粘包</li>
</ol>
</blockquote>
</li>
<li><p>解决上述两种情况：</p>
<blockquote>
<ol>
<li>发送端将数据包封装成固定长度(不足部分通过补0填充)，这样接收端就可以读取固定长度解包</li>
<li>发送端给数据包添加包头，包含数据包长度，接收端就可以根绝包头的长度解析数据包</li>
<li>设置特殊字符消息边界，根据边界字符分离数据包</li>
</ol>
</blockquote>
</li>
</ul>
<h3 id="tcp与udp"><a href="#tcp与udp" class="headerlink" title="tcp与udp"></a>tcp与udp</h3><ul>
<li>tcp/udp都是传输层协议，但是二者具有不同的特性：<table>
<thead>
<tr>
<th></th>
<th>tcp</th>
<th>udp</th>
</tr>
</thead>
<tbody><tr>
<td>可靠性</td>
<td>可靠</td>
<td>不可靠</td>
</tr>
<tr>
<td>连接性</td>
<td>面向连接</td>
<td>无连接</td>
</tr>
<tr>
<td>报文</td>
<td>面向字节流</td>
<td>面向报文</td>
</tr>
<tr>
<td>效率</td>
<td>低</td>
<td>高</td>
</tr>
<tr>
<td>双工性</td>
<td>全双工</td>
<td>一对一、一对多、多对多</td>
</tr>
<tr>
<td>流量控制</td>
<td>滑动窗口</td>
<td>无</td>
</tr>
<tr>
<td>拥塞控制</td>
<td>慢开始、拥塞避免、快重传、快恢复</td>
<td>无</td>
</tr>
<tr>
<td>传输速度</td>
<td>慢</td>
<td>快</td>
</tr>
<tr>
<td>应用场景</td>
<td>对效率要求低，对准确性要求高或者要求有连接的场景</td>
<td>对效率要求高，对准确性要求低的场景</td>
</tr>
</tbody></table>
</li>
</ul>
]]></content>
      <categories>
        <category>工作学习</category>
      </categories>
      <tags>
        <tag>tcp</tag>
      </tags>
  </entry>
  <entry>
    <title>c++相关知识点</title>
    <url>/27d62e6f/</url>
    <content><![CDATA[<p>前言</p>
<blockquote>
<p>这里简单记录下<code>c++相关知识点</code>总结</p>
</blockquote>
<a id="more"></a>

<h3 id="C-相关"><a href="#C-相关" class="headerlink" title="C++相关"></a>C++相关</h3><ul>
<li>继承和组合，应用场景</li>
<li>菱形继承，画出内存布局</li>
<li>只能在堆或只能在栈上分配类对象 <a href="https://blog.csdn.net/weixin_34033624/article/details/93272600" target="_blank" rel="noopener">博客地址</a><blockquote>
<p>只能在堆上分配类对象，<strong>将类的析构函数设为私有，编译器无法调用析构函数释放内存，则无法在栈上建立内存</strong><br>只能在栈上分配类对象，<strong>将<code>operator new()</code>设为私有，即可禁止对象被new在堆上</strong></p>
</blockquote>
</li>
<li>常见排序算法<table>
<thead>
<tr>
<th align="center">类别</th>
<th align="center">排序方法</th>
<th align="center">平均情况</th>
<th align="center">最好情况</th>
<th align="center">最坏情况</th>
<th align="center">辅助空间</th>
<th align="center">稳定性</th>
</tr>
</thead>
<tbody><tr>
<td align="center">插入排序</td>
<td align="center">直接插入</td>
<td align="center">O($n^2$)</td>
<td align="center">O($n$)</td>
<td align="center">O($n^2$)</td>
<td align="center">O($1$)</td>
<td align="center">稳定</td>
</tr>
<tr>
<td align="center">插入排序</td>
<td align="center">希尔排序</td>
<td align="center">O($n^{1.3}$)</td>
<td align="center">O($n$)</td>
<td align="center">O($n^2$)</td>
<td align="center">O($1$)</td>
<td align="center">不稳定</td>
</tr>
<tr>
<td align="center">选择排序</td>
<td align="center">选择排序</td>
<td align="center">O($n^2$)</td>
<td align="center">O($n^2$)</td>
<td align="center">O($n^2$)</td>
<td align="center">O($1$)</td>
<td align="center">不稳定</td>
</tr>
<tr>
<td align="center">选择排序</td>
<td align="center">堆排序</td>
<td align="center">O($n*\log_2{n})$)</td>
<td align="center">O($n*\log_2{n}$)</td>
<td align="center">O($n*\log_2{n}$)</td>
<td align="center">O($1$)</td>
<td align="center">不稳定</td>
</tr>
<tr>
<td align="center">交换排序</td>
<td align="center">冒泡排序</td>
<td align="center">O($n^2$)</td>
<td align="center">O($n$)</td>
<td align="center">O($n^2$)</td>
<td align="center">O($1$)</td>
<td align="center">稳定</td>
</tr>
<tr>
<td align="center">交换排序</td>
<td align="center">快速排序</td>
<td align="center">O($n*\log_2{n}$)</td>
<td align="center">O($n*\log_2{n}$)</td>
<td align="center">O($n^2$)</td>
<td align="center">O($\log_2{n}$)</td>
<td align="center">不稳定</td>
</tr>
<tr>
<td align="center">归并排序</td>
<td align="center">归并排序</td>
<td align="center">O($n*\log_2{n}$)</td>
<td align="center">O($n*\log_2{n}$)</td>
<td align="center">O($n*\log_2{n}$)</td>
<td align="center">O($n$)</td>
<td align="center">稳定</td>
</tr>
<tr>
<td align="center">基数排序</td>
<td align="center">基数排序</td>
<td align="center">O($d*(r+n)$)</td>
<td align="center">O($d*(r+n)$)</td>
<td align="center">O($d*(r+n)$)</td>
<td align="center">O($r+n$)</td>
<td align="center">稳定</td>
</tr>
</tbody></table>
<blockquote>
<p>注：基数排序的复杂度中，r代表关键字的基数，d代表长度，n代表关键字的个数<br><a href="https://www.runoob.com/w3cnote/ten-sorting-algorithm.html" target="_blank" rel="noopener">https://www.runoob.com/w3cnote/ten-sorting-algorithm.html</a></p>
</blockquote>
</li>
<li>c++关键字<blockquote>
<p><a href="https://www.runoob.com/w3cnote/cpp-keyword-intro.html" target="_blank" rel="noopener">https://www.runoob.com/w3cnote/cpp-keyword-intro.html</a></p>
</blockquote>
</li>
</ul>
<h3 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h3><blockquote>
<p>作用：使用对象关闭内存，避免手动new和delete<br>头文件：<code>memory</code><br>auto_ptr由c++98提供，已被c++11抛弃</p>
</blockquote>
<ul>
<li>auto_ptr</li>
<li>unique_ptr</li>
<li>shared_ptr</li>
<li>weak_ptr</li>
</ul>
<h3 id="c-对象模型"><a href="#c-对象模型" class="headerlink" title="c++对象模型"></a><strong>c++对象模型</strong></h3><h3 id="数据结构链表"><a href="#数据结构链表" class="headerlink" title="数据结构链表"></a>数据结构链表</h3><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><ul>
<li>三大特点<blockquote>
<p>封装<br>继承<br>多态</p>
</blockquote>
</li>
<li>五大基本原则<blockquote>
<p>单一职责原则(SRP)<br>开放封闭原则(OCP)<br>里氏替换原则(LSP)<br>依赖倒置原则(DIP)<br>接口隔离原则(ISP)</p>
</blockquote>
</li>
</ul>
<h3 id="四种强制类型转换"><a href="#四种强制类型转换" class="headerlink" title="四种强制类型转换"></a>四种强制类型转换</h3><ul>
<li>const_cast<blockquote>
<p>修改类型的const或volatile属性，去除常量性的对象必须是指针或引用</p>
</blockquote>
</li>
<li>static_cast<blockquote>
<p>类似c语言的强制类型转换，用于c++内置基本数据类型的转换，类指针或引用上行转换是安全的，下行转换没有动态类型检查，是不安全的<br>c++ primer中说道：c++的任何的隐式转换都是使用static_cast来实现</p>
</blockquote>
</li>
<li>dynamic_cast<blockquote>
<p>动态(面向对象的多态和程序运行时的状态)类型转换，不能用于内置数据类型转换，转换时基类一定含有虚函数，否则会编译报错<br>上行转换时效果和static_cast一样，下行转换时具备类型检查，转换失败抛出异常，比static_cast更安全</p>
</blockquote>
</li>
<li>reinterpret_cast<blockquote>
<p>主要用途：1. 改变指针或引用的类型；2. 将指针或引用转换为一个足够长度的整形；3. 将整型转换为指针或引用类型<br>reinterpret_cast<type-id>(expression) type-id 必须是一个指针、引用、算术类型、函数针或者成员指针。<br>它可以把一个指针转换成一个整数，也可以把一个整数转换成一个指针（先把一个指针转换成一个整数，在把该整数转换成原类型的指针）<br><strong>请谨慎使用 reinterpret_cast</strong></p>
</blockquote>
</li>
</ul>
<h3 id="sizeof-空类-构造，虚析构函数，父类仅有方法-子类一个int变量"><a href="#sizeof-空类-构造，虚析构函数，父类仅有方法-子类一个int变量" class="headerlink" title="sizeof 空类+构造，虚析构函数，父类仅有方法+子类一个int变量"></a>sizeof 空类+构造，虚析构函数，父类仅有方法+子类一个int变量</h3><p>环境：windows10 + vs2019</p>
<blockquote>
<p>空类+构造，<code>sizeof=1 ==&gt; sizeof(class)</code><br>虚析构函数，<code>sizeof=4 ==&gt; sizeof(void*)</code><br>父类仅有方法+子类一个int变量，<code>sizeof=4 ==&gt; sizeof(int)</code></p>
</blockquote>
<h3 id="模板多态和虚多态"><a href="#模板多态和虚多态" class="headerlink" title="模板多态和虚多态"></a>模板多态和虚多态</h3><h3 id="c-11"><a href="#c-11" class="headerlink" title="c++11"></a>c++11</h3>]]></content>
      <categories>
        <category>Cpp相关</category>
      </categories>
      <tags>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title>cmake生成mysql-connector-c++ vs工程</title>
    <url>/b33b9133/</url>
    <content><![CDATA[<p>前言</p>
<blockquote>
<p>这里简单记录下<code>cmake生成mysql-connector-c++</code>的vs工程项目</p>
</blockquote>
<a id="more"></a>

<p><a href="https://blog.csdn.net/buaalei/article/details/50787489" target="_blank" rel="noopener">参考博客</a></p>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>windows10 + vs2013-x86</p>
<h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p><code>mysql</code><a href="http://mirrors.sohu.com/mysql/" target="_blank" rel="noopener">下载地址</a></p>
<ol>
<li>下载并解压<code>boost_1_66_0.zip</code></li>
<li>下载并解压<code>mysql-connector-c++-1.1.9.zip</code></li>
<li>下载并解压<code>mysql-connector-c-6.1.6-win32.zip</code> <strong>注：vs2013工程不能使用太高版本，否则my_global.h会有编译错误</strong></li>
<li>下载并安装<code>cmake</code></li>
</ol>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><ol>
<li>运行cmake-gui，source code目录选择mysql-connector-c++-1.1.9主目录，build binaries选择生成工程目录</li>
<li>点击下方的configure按钮，向导选择<code>Visual Studio 12</code>编译器，出现提示错误</li>
<li>点击上方的Add Entry按钮，增加字符串变量，<code>BOOST_ROOT</code>为boost_1_66_0的目录，再点击下方的configure按钮，在中间的变量列表中修改<code>MYSQL_INCLUDE_DIR</code>为mysql-connector-c++-1.1.9\include目录，<code>MYSQL_LIB</code>为mysql-connector-c-6.1.6-win32\lib\libmysql.lib</li>
<li>再点击下方的configure按钮</li>
<li>点击下方的Generate按钮，提示生成成功</li>
<li>选择菜单<code>Tools-&gt;Show My Changes</code>，显示改变的内容，选择Commandline options：部分内容并拷贝备用</li>
<li>在mysql-connector-c++-1.1.9源码目录下新建一批处理文件：make.bat，并编辑输入以下内容：<code>cmake -G &quot;Visual Studio 12&quot;</code>加上刚才拷贝的内容，保存</li>
<li>双击make.bat执行，结束后生成vs2013工程文件</li>
<li>打开生成的vs2013工程文件，可以全部编译，也可以只编译mysqlcppconn和mysqlcppconn-static项目，生成dll和lib文件</li>
</ol>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol>
<li>在项目中引用库mysqlcppconn.lib，运行时libmysql.dll和mysqlcppconn.dll都需要</li>
<li>在项目预处理器定义<code>CPPCONN_PUBLIC_FUNC=</code>可以消除编译警告</li>
<li>不要用MySQL Server安装自带的lib和dll，使用时会有问题，要使用自己编译的lib和dll，libmysql.dll使用mysql-connector-c-6.1.9-win32提供的</li>
</ol>
<h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><p>由于cmake生成的工程中mysqlcppconn-static生成的静态库中没有包含libmysql.lib，所以需要自己使用静态库时手动引入</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"libmysql.lib"</span>)</span></span><br></pre></td></tr></table></figure>
<p>因此可以调整工程属性，在工程mysqlcppconn-static中引入libmysql.lib，右键工程属性-&gt;库管理器-&gt;附加选项，添加<code>C:\Program Files (x86)\MySQL\mysql-connector-c-6.1.6-win32\lib\libmysql.lib;</code></p>
]]></content>
      <categories>
        <category>工具文档</category>
      </categories>
      <tags>
        <tag>cmake</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>c++99个常见错误</title>
    <url>/da074ee2/</url>
    <content><![CDATA[<p>前言</p>
<blockquote>
<p>这里简单记录下<code>《c++: 99个常见错误》</code>的学习笔记</p>
</blockquote>
<a id="more"></a>

<p><strong>《c++: 99个常见错误》避免编码和设计中的常见问题   <code>[美] Stephen C. Dewhurst(著)；高博(译)</code></strong></p>
<h2 id="第一章-基础问题"><a href="#第一章-基础问题" class="headerlink" title="第一章 基础问题"></a>第一章 基础问题</h2><h3 id="1-过分积极的注释"><a href="#1-过分积极的注释" class="headerlink" title="1. 过分积极的注释"></a>1. 过分积极的注释</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">a = b; <span class="comment">//将b赋值给a</span></span><br><span class="line">c = b; <span class="comment">//将b赋值给a，可能注释错的，但是维护时还需要去review</span></span><br></pre></td></tr></table></figure>

<h3 id="2-幻数-魔法数"><a href="#2-幻数-魔法数" class="headerlink" title="2. 幻数(魔法数)"></a>2. 幻数(魔法数)</h3><h3 id="3-全局变量"><a href="#3-全局变量" class="headerlink" title="3. 全局变量"></a>3. 全局变量</h3><h2 id="第二章-语法问题"><a href="#第二章-语法问题" class="headerlink" title="第二章 语法问题"></a>第二章 语法问题</h2><h3 id="13-数组定义和初始化混淆"><a href="#13-数组定义和初始化混淆" class="headerlink" title="13. 数组定义和初始化混淆"></a>13. 数组定义和初始化混淆</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>* p = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">10</span>); <span class="comment">//一个int对象，初始化为10</span></span><br><span class="line"><span class="keyword">int</span>* q = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>]; <span class="comment">//包含10个int的数组</span></span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">vec</span><span class="params">(<span class="number">10</span>)</span></span>; <span class="comment">//直接用标准可的组件，不用显式申请内存，也不用显式回收</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Cpp相关</category>
      </categories>
      <tags>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title>stl标准模板库</title>
    <url>/f4921d09/</url>
    <content><![CDATA[<p>前言</p>
<blockquote>
<p>这里简单记录下<code>stl标准模板库</code>学习笔记</p>
</blockquote>
<a id="more"></a>

<h3 id="c-备忘"><a href="#c-备忘" class="headerlink" title="c++备忘"></a>c++备忘</h3><ul>
<li><p>宏参数<code>#、##、##__VA_ARGS__</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可变参数宏</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MODEL_NAEM              <span class="meta-string">"my_test"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> printf_log(fmt, ...)    printf(<span class="meta-string">"[LOGINFO] %s: [%s:%d]"</span> fmt, MODEL_NAEM, __FUNCTION__, __LINE__, ##__VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PRINT(fmt, value)       printf(<span class="meta-string">"the value if "</span> #value <span class="meta-string">" is %d\n"</span>, value)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ADD_TO_AN(num, value)   a##num += value</span></span><br><span class="line"></span><br><span class="line">printf_log(<span class="string">"%d-%d-%d\n"</span>, <span class="number">2019</span>, <span class="number">11</span>, <span class="number">28</span>);</span><br><span class="line"></span><br><span class="line">PRINT(<span class="string">"%d"</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a1 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> a2 = <span class="number">2</span>;</span><br><span class="line">ADD_TO_AN(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">ADD_TO_AN(<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d, %d"</span>, a1, a2);</span><br></pre></td></tr></table></figure>
</li>
<li><p>生成指定范围随机数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Random1(low, up)    (rand() % (up - low - 1) + low + 1) <span class="comment">//(low, up)</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Random2(low, up)    (rand() % (up - low) + low)         <span class="comment">//[low, up)</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Random3(low, up)    (rand() % (up - low) + low + 1)     <span class="comment">//(low, up]</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Random4(low, up)    (rand() % (up - low + 1) + low)     <span class="comment">//[low, up]</span></span></span><br></pre></td></tr></table></figure></li>
<li><p>用于<code>std::string</code>的格式化函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">string_format</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* fmt, ...)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> strRet;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">nullptr</span> != fmt) &#123;</span><br><span class="line">        va_list args = <span class="literal">nullptr</span>;</span><br><span class="line">        va_start(args, fmt);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> nLength = _vsnprintf(<span class="literal">nullptr</span>, <span class="number">0</span>, fmt, args);</span><br><span class="line">        <span class="keyword">if</span> (nLength &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="function"><span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;<span class="keyword">char</span>&gt; <span class="title">uptr</span><span class="params">(<span class="built_in">std</span>::make_unique&lt;<span class="keyword">char</span>&gt;(nLength + <span class="number">1</span>))</span></span>;</span><br><span class="line">            _vsnprintf(uptr.get(), nLength + <span class="number">1</span>, fmt, args);</span><br><span class="line">            strRet = uptr.get();</span><br><span class="line">        &#125;</span><br><span class="line">        va_end(args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> strRet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">using</span> item_return = T&amp;&amp;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> item_return&lt;T&gt; <span class="title">convert</span><span class="params">(T&amp;&amp; arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">static_cast</span>&lt;T&amp;&amp;&gt;(arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span>... Args&gt;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::<span class="built_in">string</span> <span class="title">string_format</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* format, Args&amp;&amp;... args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> buff[<span class="number">1024</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="built_in">snprintf</span>(buff, <span class="keyword">sizeof</span>(buff), format, convert(<span class="built_in">std</span>::forward&lt;Args&gt;(args))...);</span><br><span class="line">    <span class="keyword">return</span> buff;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//for test demo</span></span><br><span class="line"><span class="keyword">time_t</span> t = time(<span class="literal">NULL</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tm</span> <span class="title">tm</span> = &#123;</span> <span class="number">0</span> &#125;;</span><br><span class="line">localtime_s(&amp;tm, &amp;t);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> s = string_format(<span class="string">"%d-%d-%d"</span>, tm.tm_year + <span class="number">1900</span>, tm.tm_mon + <span class="number">1</span>, tm.tm_mday);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p><strong><code>stl (Standard Template Library)</code> 标准模板库 学习笔记</strong><br>Source Code:</p>
<blockquote>
<p><code>boost</code>: <a href="https://www.boost.org/users/download/" target="_blank" rel="noopener">https://www.boost.org/users/download/</a><br><code>sgi_stl</code>: cygnus C++ 2.91 for Windows安装于C:\cygnus，所有头文件置于C:\cygnus\cygwin-b20\include\g++下共128个文件<br><code>pj_stl</code>: pj版本被Visual C++采用，所以可以在Visual C++的include子目录下(如: C:\xxx\VC\include)找到所有头文件</p>
</blockquote>
<p>容器分类：</p>
<ul>
<li>顺序容器(元素排序取决于插入顺序)<blockquote>
<p>vector, deque, list, forward_list, array, string</p>
</blockquote>
</li>
<li>关联容器(元素排序取决于内部规则)<blockquote>
<p>set, map, multiset, multimap</p>
</blockquote>
</li>
<li>无序关联容器<blockquote>
<p>unordered_set, unordered_map, unordered_multiset, unordered_multimap</p>
</blockquote>
</li>
<li>容器适配器(可自定义底层数据结构)<blockquote>
<p>stack, queue, priority_queue(优先级队列)</p>
</blockquote>
</li>
</ul>
<p>容器迭代器：</p>
<ul>
<li>随机访问迭代器<blockquote>
<p>vector, deque, array</p>
</blockquote>
</li>
<li>双向迭代器<blockquote>
<p>list, set, map, multiset, multimap, unordered_set, unordered_map, unordered_multiset, unordered_multimap</p>
</blockquote>
</li>
<li>前向迭代器<blockquote>
<p>forward_list</p>
</blockquote>
</li>
<li>无迭代器<blockquote>
<p>stack, queue, priority_queue</p>
</blockquote>
</li>
</ul>
<h3 id="vector向量"><a href="#vector向量" class="headerlink" title="vector向量"></a><code>vector</code>向量</h3><p>头文件：<code>#include &lt;vector&gt;</code><br>特性：</p>
<blockquote>
<ol>
<li>常用作数组的替代品</li>
<li>允许尾部直接插入删除</li>
<li>允许下标随机访问</li>
<li>常用的内部实现是动态数组</li>
</ol>
</blockquote>
<p>常用操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">std::vector&lt;T&gt; v;</span><br><span class="line">下标访问 v[i]</span><br><span class="line">取长度 v.size()</span><br><span class="line">重置大小 v.resize(x)</span><br><span class="line">尾部插入 v.push_back(x)</span><br><span class="line">尾部删除 v.pop_back()</span><br><span class="line">任意位置插入 v.insert(v.begin()+i, x) &#x2F;&#x2F;后面的元素后移</span><br><span class="line">任意位置删除 v.erase(v.begin()+i) &#x2F;&#x2F;后面的元素前移</span><br><span class="line">遍历(可以迭代器方式，但是下标方式更简单)</span><br><span class="line">for(int i &#x3D; 0; i &lt; v.size(); ++i)</span><br></pre></td></tr></table></figure>

<h3 id="list链表"><a href="#list链表" class="headerlink" title="list链表"></a><code>list</code>链表</h3><p>头文件：<code>#include &lt;list&gt;</code><br>特性：</p>
<blockquote>
<ol>
<li>允许头部/尾部的直接插入/删除</li>
<li>不允许下标访问</li>
<li>常用的内部实现是双向链表</li>
</ol>
</blockquote>
<p>常用操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">std::list&lt;T&gt; l;</span><br><span class="line">取长度 l.size()</span><br><span class="line">尾部插入 l.push_back(x)</span><br><span class="line">尾部删除 l.pop_back()</span><br><span class="line">头部插入 l.push_front(x)</span><br><span class="line">头部删除 l.pop_front()</span><br><span class="line">特定位置插入 itor&#x3D;l.insert(itor, x)</span><br><span class="line">特定位置删除 itor&#x3D;l.erase(itor)</span><br><span class="line">排序 l.sort()</span><br><span class="line">清空 l.clear()</span><br><span class="line">遍历 for(auto itor &#x3D; l.begin(); itor !&#x3D; l.end(); ++itor)</span><br></pre></td></tr></table></figure>

<h3 id="tuple元组"><a href="#tuple元组" class="headerlink" title="tuple元组"></a><code>tuple</code>元组</h3><p>头文件：<code>#include &lt;tuple&gt;</code><br>特性：</p>
<blockquote>
<ol>
<li>c++11 新增</li>
<li>捆绑N个类型的数据</li>
<li>常用std::make_tuple构造</li>
<li>可用于函数返回多个结果</li>
</ol>
</blockquote>
<p>常用操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">auto t &#x3D; std::make_tuple(a, b, c);</span><br><span class="line">取第N个数据 auto a &#x3D; std::get&lt;N&gt;(t);</span><br><span class="line">解包 std::tie(a, b, c) &#x3D; t;</span><br><span class="line">函数多返回值 std::tie(a, b, c) &#x3D; f(); &#x2F;&#x2F;f return tuple</span><br></pre></td></tr></table></figure>

<p>示例：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> str;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::pair&lt;<span class="keyword">int</span>, <span class="built_in">std</span>::<span class="built_in">string</span>&gt; p = make_pair(<span class="number">123</span>, <span class="string">"abc"</span>);</span><br><span class="line"><span class="built_in">std</span>::tie(a, str) = p;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">char c = '';</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> str;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::tuple&lt;<span class="keyword">int</span>, <span class="keyword">char</span>, <span class="built_in">std</span>::<span class="built_in">string</span>&gt; t = make_tuple(<span class="number">123</span>, <span class="string">'x'</span>, <span class="string">"aaa"</span>);</span><br><span class="line"><span class="built_in">std</span>::tie(a, c, str) = t;</span><br></pre></td></tr></table></figure>

<h3 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h3><p>加括号避免与宏定义冲突</p>
<blockquote>
<ol>
<li>常用的最小/最大运算<code>(max/min)</code>:</li>
<li>头文件：<code>#include &lt;algorithm&gt;</code></li>
</ol>
</blockquote>
<p>方法1：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">int</span> min = (<span class="built_in">std</span>::min)(x, y);</span><br><span class="line"><span class="keyword">int</span> max = (<span class="built_in">std</span>::max)(x, y);</span><br></pre></td></tr></table></figure>
<p>方法2：(该方法必须事先知道，x和y的类型，且二者类型一致)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">int</span> min = <span class="built_in">std</span>::min&lt;<span class="keyword">int</span>&gt;(x, y);</span><br><span class="line"><span class="keyword">int</span> max = <span class="built_in">std</span>::max&lt;<span class="keyword">int</span>&gt;(x, y);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Cpp相关</category>
      </categories>
      <tags>
        <tag>cpp</tag>
      </tags>
  </entry>
  <entry>
    <title>redis常见问题总结</title>
    <url>/2d495023/</url>
    <content><![CDATA[<p>前言</p>
<blockquote>
<p>这里简单记录下<code>redis常见问题</code>的总结</p>
</blockquote>
<a id="more"></a>

<p><a href="https://zhuanlan.zhihu.com/p/87707225" target="_blank" rel="noopener">参考文章</a></p>
<h3 id="为什么要使用redis"><a href="#为什么要使用redis" class="headerlink" title="为什么要使用redis"></a>为什么要使用<code>redis</code></h3><p>主要原因：<strong><em>性能和并发</em></strong>，<code>redis</code>还可以实现分布式锁，但是分布式锁可以使用中间件<code>ZooKeeper</code>或数据库等代替</p>
<ul>
<li>性能<blockquote>
<p>当需要执行耗时比较久，且结果不会发生频繁变动的SQL，就特别适合将运行结果放入缓存，后面的请求去缓存中读取，使得请求能够迅速响应</p>
</blockquote>
</li>
<li>并发<blockquote>
<p>在高并发的情况下，所有的请求直接访问数据库，会导致数据库出现连接异常，这时就需要使用redis做缓存，让请求先访问redis缓存，而不是直接访问数据库</p>
</blockquote>
</li>
</ul>
<h3 id="使用redis有什么缺点"><a href="#使用redis有什么缺点" class="headerlink" title="使用redis有什么缺点"></a>使用<code>redis</code>有什么缺点</h3><ul>
<li>缓存和数据库双写一致性问题</li>
<li>缓存击穿问题</li>
<li>缓存雪崩问题</li>
<li>缓存的并发竞争问题<br>具体解决方案，详见下文</li>
</ul>
<h3 id="单线程的redis为什么这么快"><a href="#单线程的redis为什么这么快" class="headerlink" title="单线程的redis为什么这么快"></a>单线程的<code>redis</code>为什么这么快</h3><blockquote>
<p><em><code>redis6.0</code>针对性能优化引入多线程网络IO</em></p>
</blockquote>
<ul>
<li>纯内存操作</li>
<li>单线程，避免频繁的上下文切换</li>
<li>采用非阻塞的I/O多路复用机制(<code>epoll</code>)<br><code>redis</code>还提供了<code>select</code>、<code>epoll</code>、<code>evport</code>、<code>kqueue</code>等多路复用函数库</li>
</ul>
<h3 id="redis的数据类型以及应用场景"><a href="#redis的数据类型以及应用场景" class="headerlink" title="redis的数据类型以及应用场景"></a><code>redis</code>的数据类型以及应用场景</h3><ul>
<li>String(字符串)<br>常用命令：<code>GET、SET、INCR、DECR</code><br>应用场景：简单的<code>key-value</code>类型，value不仅是string，也可以是数字；<code>INCR/INCRBY</code>可以实现计数；<code>SETEX</code>可以实现分布式锁</li>
<li>Hash(哈希)<br>常用命令：<code>HGET、HSET、HGETALL</code><br>应用场景：一个对象多个属性，value是map，可以存储用户信息，比如：用户包含 姓名，性别，年龄等</li>
<li>List(列表)<br>常用命令：<code>LPUSH、RPUSH、LPOP、RPOP、LRANGE</code><br>应用场景：<code>LPUSH+RPOP、RPUSH+LPOP</code>可以实现消息队列，也可以实现数据结构<code>栈</code>和<code>队列</code>的功能</li>
<li>Set(集合)<br>常用命令：<code>SADD、SPOP、SDIFF、SINTER、SUNION、SMEMBERS</code><br>应用场景：<code>SDIFF、SINTER、SUNION</code>可以求集合的差集、交集、并集，比如：计算自己独有的喜好，共同喜好，全部的喜好等</li>
<li>Zset(sorted set 有序集合)<br>常用命令：<code>ZADD、ZREM、ZRANGE、ZCARD</code><br>应用场景：<code>ZREVRANK</code>可以实现排行榜，查询获取topK</li>
<li>HyperLogLog(算法)<br>常用命令：<code>PFADD、PFCOUNT、PFMERGE</code><br>应用场景：可以实现基数统计，但不存储元素本身</li>
<li>Pub/Sub(发布/订阅)<br>消息发布及消息订阅，可以实现实时聊天系统</li>
<li>Transactions(事务)<br>提供基本的命令打包执行功能，可以保证多条命令顺序执行</li>
<li><strong><em>pipeline(管道技术)</em></strong><br><a href="https://www.jianshu.com/p/d7373487e867" target="_blank" rel="noopener">参考博客</a><br>redis执行一条命令分为4个过程：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">发送命令--&gt;命令排队--&gt;命令执行--&gt;返回结果</span><br></pre></td></tr></table></figure>
这个过程称为RTT(Round Trip Time，往返时间)，<code>MGET、MSET</code>有效节省了RTT，提高效率，但是不支持批量操作(如<code>MDEL</code>)，需要N次RTT，必然会消耗大量网络IO，同样redis需要调用多次read()和write()系统方法，系统方法会将数据从用户态转移到内核态，这样对进程上下文切换也有比较大的影响。<br>为了提高redis的读写能力，就有了pipeline的出现，我们对于多个命令执行，不再同步等待每个命令的返回结果，最终一次性读取所有服务端的响应，这样就解决多次RTT和read()与write()的问题，因为redis命令执行非常快，但是网络交互很慢，所以pipeline就是控制网络时间和上下文切换，提高了执行效率<br>使用管道需要注意的问题：<blockquote>
<ol>
<li>redis原生批命令是原子性的，但是pipeline不保证执行的原子性，如有命令执行失败(不会回滚，也不会影响未执行的)，将会丢失执行结果，所以使用pipeline时，需要自己保证执行命令的数据安全性；</li>
<li>pipeline只适用不需要同步获取执行结果的场景，比如<code>HINCR、HSET</code>等更新操作，不适用于<code>GET、HGET</code>等查询操作；</li>
<li>pipeline打包命令不能没有节制，如果pipeline打包命令数据过多，会导致一次pipeline同步等待时间过长，影响客户端体验甚至会造成网络阻塞；</li>
</ol>
</blockquote>
</li>
</ul>
<h3 id="redis的过期策略以及内存淘汰机制"><a href="#redis的过期策略以及内存淘汰机制" class="headerlink" title="redis的过期策略以及内存淘汰机制"></a><code>redis</code>的过期策略以及内存淘汰机制</h3><p>redis采用的是定期删除+惰性删除策略</p>
<ol>
<li>为什么不是用定时删除<br>定时删除，用一个定时器来负责监视key，过期则自动删除，虽然内存可以及时释放，但是十分消耗CPU资源。在高并发的请求下，CPU要将时间应用在处理请求上，而不是删除key，因此没有采用该策略</li>
<li>定期删除+惰性删除的工作原理<br>定期删除，redis默认每隔100ms检查是否有过期的key，过期则删除。注意：redis不是每隔100ms将所有key检查一次，而是随机抽取检查(如果每隔100ms全部key进行检查，可能导致redis卡死，造成灾难性的后果)，因此，只采用定期删除策略，可能会导致很多key到期没有被删除。于是，就需要配合惰性删除策略，在获取key时，redis会先进行检查，对key进行过期删除操作<br><strong>定期删除+惰性删除存在的问题：</strong><blockquote>
<p>定期删除是随机抽取检查删除过期key，如果没有删除过期key，并且没有及时去请求key，所以也没有触发惰性删除策略，这样，redis内存持续增长，那么就应该采用内存淘汰机制</p>
</blockquote>
</li>
<li>内存淘汰机制<br>在<code>redis.conf</code>中有一行配置，配置内存淘汰的策略<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># maxmemory-policy volatile-lru</span><br></pre></td></tr></table></figure>
<blockquote>
<p>noeviction：当内存不足时，新写入操作会报错(<code>应该不会用</code>)<br>allkeys-lru：当内存不足时，在键空间中，移除最近最少使用的key，一定不能做持久化存储(<code>推荐使用</code>)<br>allkeys-random：当内存不足时，在键空间中，随机移除某个key(<code>应该不会用</code>)，至少应该删除最少使用key而不是随机删<br>volatile-lru：当内存不足时，在设置了过期时间的键空间中，移除最近最少使用的key，适合把redis当缓存，又做持久化存储(<code>不推荐使用</code>)<br>volatile-random：当内存不足时，在设置了过期时间的键空间中，随机移除某个key(<code>不推荐使用</code>)<br>volatile-ttl：当内存不足时，在设置了过期时间的键空间中，有更早过期时间的key优先移除(<code>不推荐使用</code>)</p>
</blockquote>
</li>
</ol>
<h3 id="redis和数据库双写一致性问题"><a href="#redis和数据库双写一致性问题" class="headerlink" title="redis和数据库双写一致性问题"></a><code>redis</code>和数据库双写一致性问题</h3><p>数据库和缓存双写，必然存在数据一致性</p>
<ul>
<li>强一致性，不能使用数据库缓存</li>
<li>最终一致性，采取正确更新策略，先更新数据库，再更新缓存<blockquote>
<ol>
<li>数据库更新失败，则更新返回失败；</li>
<li>数据库更新成功，缓存更新失败，将数据发到MQ，监控MQ继续更新缓存；</li>
<li>数据库更新成功，缓存更新功能，则更新返回成功</li>
</ol>
</blockquote>
</li>
</ul>
<h3 id="如何应对redis缓存击穿和缓存雪崩问题"><a href="#如何应对redis缓存击穿和缓存雪崩问题" class="headerlink" title="如何应对redis缓存击穿和缓存雪崩问题"></a>如何应对<code>redis</code>缓存击穿和缓存雪崩问题</h3><p>这两个问题一般中小型项目基本很难碰到，只有高并发的项目，流量达到百万以上，需要考虑的问题</p>
<ul>
<li><p>缓存击穿，即大量请求缓存中不存在的数据，结果所有请求都打到数据库上，从而导致数据库连接异常<br>解决方案：</p>
<blockquote>
<ol>
<li>采用互斥锁，缓存失效时，先获取锁，得到锁，从数据库请求数据后释放锁，其他请求获取锁失败，则休眠一段时候后重试。增加锁机制，可以减轻数据库压力，同时也会降低吞吐量</li>
<li>采用异步更新机制，从缓存中查询key无论成功与否，都直接返回。value维护缓存失效时间，缓存失效异步加载数据库更新缓存。该方案项目启动时需要先加载数据库，做缓存预热</li>
<li>提供能快速判断请求是否有效的拦截机制，比如：布隆过滤器，将缓存key维护一个bitmap，如果key不存在，则不需要访问redis缓存，可以快速拦截无效请求</li>
<li>接口限流与熔断降级，重要接口需要做好限流策略，防止恶意刷接口，同时需要做降级准备，当接口的关键服务不可用时，进行熔断，具备失败快速返回机制</li>
</ol>
</blockquote>
</li>
<li><p>缓存雪崩，即同一时间大面积缓存失效，这时又来大量的请求，结果请求都打到数据库上，从而导致数据库连接异常<br>解决方案：</p>
<blockquote>
<ol>
<li>采用互斥锁，同上方案1，但明显会降低吞吐量</li>
<li>设置缓存失效时间加上一个随机时间，尽量让缓存失效时间均匀分布，尽可能避免缓存集体失效</li>
<li>缓存备份，即双缓存，缓存A设置失效时间30分钟，缓存B不设失效时间，先访问缓存A，缓存A没有访问缓存B(脏读)，异步线程更新缓存A和缓存B</li>
</ol>
</blockquote>
</li>
</ul>
<h3 id="如何解决redis的并发竞争key问题"><a href="#如何解决redis的并发竞争key问题" class="headerlink" title="如何解决redis的并发竞争key问题"></a>如何解决<code>redis</code>的并发竞争key问题</h3><p>问题描述：并发竞争key问题，即多个子系统同时对一个key进行操作，执行顺序和我们期望顺序不同，最终导致执行结果不同<br>解决方案：</p>
<ul>
<li>分布式锁+时间戳</li>
</ul>
<ol>
<li>整体技术方案<br>准备一个分布式锁，对key进行操作时需要先获取锁，获取锁成功才能对key进行操作<br>加锁的目的实际上就是把并行读写改成串行读写的方式，从而避免资源竞争</li>
<li>分布式锁<br>传统的加锁方式lock只适合单点环境，因为这是分布式环境，需要分布式锁<br>分布式锁可以基于很多种方式实现，但基本原理是一致的：用一个状态值来表示锁，通过状态值来标识对锁的占有和释放</li>
<li>分布式锁的要求<blockquote>
<ol>
<li>在分布式环境下，任意时刻只有一个客户端的一个线程访问</li>
<li>高效高可用的获取锁和释放锁</li>
<li>具备可重入特性(重新进入，由多个任务并发使用，不必担心数据错误)</li>
<li>具备锁的失效机制，防止死锁</li>
<li>具备非阻塞锁的特性，没有获取到锁，直接返回获取锁失败</li>
</ol>
</blockquote>
</li>
<li>分布式锁的实现<blockquote>
<p>数据库(<code>锁表，增删记录</code>)<br>Memcached(<code>add</code>)<br>Redis(<code>setex</code>)<br>Zookeeper(<code>临时节点</code>)</p>
</blockquote>
</li>
<li>时间戳<br>如果对key操作不要求顺序，那么通过分布式锁抢占，就可以实现key的操作；<br>如果对key操作要求顺序，加入有一个key，系统A将key设置为valueA，系统B将key设置为valueB，期望key的value按照<code>valueA--&gt;valueB</code>的顺序变化，那么就需要保存一个时间戳，例如：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">系统A key &#123;valueA, 3:00&#125;</span><br><span class="line">系统B key &#123;valueB, 3:05&#125;</span><br></pre></td></tr></table></figure>
假设系统B先获取到锁，将key设置为{valueB, 3:05}，当系统A抢占到锁时，发现自己的时间戳valueA早于缓存中的时间戳valueB，此时就不做key的更新操作，以此类推</li>
</ol>
<ul>
<li>消息队列<br>在高并发的情况下，可以通过消息中间件进行处理，将并行的读写进行串行化，把redis的更新操作放进队列使其串行，保证可以一个一个顺序执行</li>
</ul>
<h3 id="redis的三种运行模式"><a href="#redis的三种运行模式" class="headerlink" title="redis的三种运行模式"></a><code>redis</code>的三种运行模式</h3><p><a href="https://www.cnblogs.com/leffss/p/11993646.html" target="_blank" rel="noopener">参考博客1</a><br><a href="https://blog.csdn.net/u014209205/article/details/82113258" target="_blank" rel="noopener">参考博客2</a></p>
<ul>
<li><p>单机模式 – <strong>standaloan</strong>(<code>基本不用做生产环境</code>)<br>优点：</p>
<blockquote>
<ol>
<li>架构简单，部署方便</li>
<li>性价比高，缓存使用时无需备用节点</li>
<li>性能高</li>
</ol>
</blockquote>
<p>缺点：</p>
<blockquote>
<ol>
<li>不能保证数据可靠性，因此不能用于数据可靠性要求高的业务</li>
<li>性能受限于单核CPU的处理能力(redis是单线程机制)，所以适合操作命令简单，计算较少的场景(这里的性能与网络IO无关)</li>
</ol>
</blockquote>
</li>
<li><p>主从模式 – <strong>master/slaver模式</strong>(<code>redis2.8版本之前的模式</code>)<br>优点：</p>
<blockquote>
<ol>
<li>可靠性高，双机主备能够在主机宕机时将从机升级为主机提供服务，保证服务的平稳运行；数据持久化方面，能有效解决数据异常丢失问题</li>
<li>读写分离策略，从节点可以扩展主库节点的读能力，有效应对高并发的场景</li>
</ol>
</blockquote>
<p>缺点：</p>
<blockquote>
<ol>
<li>故障恢复复杂，需要手动将从节点提升为主节点并进行故障转移工作</li>
<li>主库的写能力和存储能力受到单机的限制</li>
<li>无法实现动态扩容</li>
</ol>
</blockquote>
</li>
<li><p>哨兵模式 – <strong>sentinel模式</strong>(<code>redis2.8及之后的模式</code>)<br>优点：</p>
<blockquote>
<ol>
<li>具备主从模式的所有优点</li>
<li>主从可以自动切换，可用性更高</li>
</ol>
</blockquote>
<p>缺点：</p>
<blockquote>
<ol>
<li>相对主从模式更复杂一些</li>
<li>资源浪费，slave节点做为备份节点不提供服务</li>
<li>主要针对主节点进行监控高可用切换，无法做到从节点故障转移</li>
<li>动态扩容比较复杂</li>
</ol>
</blockquote>
</li>
<li><p>集群模式 – <strong>cluster模式</strong>(<code>redis3.0版本之后的模式</code>)<br>优点：</p>
<blockquote>
<ol>
<li>有效解决了redis在分布式方便的需求，节点数据共享，可动态调整数据分布</li>
<li>负载均衡可以解决单机内存、并发和流量瓶颈等问题</li>
<li>扩展性：可实现动态扩容，提高扩展性和可用性，降低运维成本</li>
<li>高可用：部分节点不可用，能够实现故障转移，master选举，保证集群可用</li>
<li>无中心化分布式系统，取代LVS + Twemproxy层三层架构，系统复杂性降低，读写性能提高</li>
</ol>
</blockquote>
<p>缺点：</p>
<blockquote>
<ol>
<li>架构比较新，最佳实践较少</li>
<li>为了性能提升，客户端需要缓存路由表信息</li>
<li>数据异步复制，不保证数据强一致性</li>
<li>MultiOp和Pipeline支持有限</li>
<li>支持单机版的redis处理单一键命令，不支持多个键的操作<code>set、mset、mget</code>以及事务，同时不支持多<code>db</code></li>
</ol>
</blockquote>
</li>
</ul>
<h3 id="redis的持久化机制"><a href="#redis的持久化机制" class="headerlink" title="redis的持久化机制"></a><code>redis</code>的持久化机制</h3><ul>
<li><code>RDB持久化</code>：保存某个时间点的全量数据快照</li>
</ul>
<ol>
<li>手动触发<blockquote>
<p>SAVE：阻塞Redis服务进程，直到RDB文件被创建完毕<br>BGSVAE：调用fork创建一个子进程创建RDB文件，不会阻塞服务进程，<code>LASTSAVE</code>指令可以查看最近的备份时间</p>
</blockquote>
</li>
<li>自动触发<blockquote>
<p>根据<code>redis.conf</code>配置里的<code>save m n</code>定时触发(用的是BGSAVE)</p>
</blockquote>
</li>
</ol>
<ul>
<li><code>AOF持久化</code>：保存写状态</li>
</ul>
<ol>
<li><p>记录除了查询以外的所有变更数据库状态的指令</p>
</li>
<li><p>以append的形式追加保存到AOF文件中(增量)</p>
</li>
<li><p>日志重写解决AOF文件不断增大的问题，原理如下：</p>
<blockquote>
<p>调用fork创建一个子进程<br>子进程把新的AOF写到临时文件里，不依赖原来的AOF文件(<code>处理重复命令合并，减小文件尺寸和内存占用，加快恢复时间</code>)<br>主进程持续将新的指令同时写到内存和原来的AOF文件<br>主进程获取子进程重写AOF完成信号，往新的AOF同步增量<br>使用新的AOF文件替换掉旧的AOF文件</p>
</blockquote>
</li>
<li><p>触发机制：always、everysec、no</p>
<table>
<thead>
<tr>
<th align="center">命令</th>
<th>always</th>
<th>everysec</th>
<th>no</th>
</tr>
</thead>
<tbody><tr>
<td align="center">优点</td>
<td>同步，非常慢，不会丢失数据</td>
<td>异步，足够快，不影响性能</td>
<td>从不同步，处理命令速度快</td>
</tr>
<tr>
<td align="center">缺点</td>
<td>IO开销大</td>
<td>丢失1s的数据</td>
<td>不可控</td>
</tr>
</tbody></table>
<p><strong>RDB和AOF的优缺点</strong></p>
<table>
<thead>
<tr>
<th align="center">策略</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody><tr>
<td align="center">RDB</td>
<td>全量数据快照，文件小，恢复快，适合灾备</td>
<td>无法频繁备份，数据量大会由于IO问题影响性能</td>
</tr>
<tr>
<td align="center">AOF</td>
<td>可读性高，适合增量数据备份，数据不容易破损</td>
<td>文件体积大，恢复时间长</td>
</tr>
</tbody></table>
</li>
</ol>
<ul>
<li><code>RDB-AOF混合持久化</code></li>
</ul>
<p><em>BGSAVE做全量持久化，AOF做增量持久化</em><br>缺点：兼容性差，一旦开启混合持久化，在低版本(4.0以下)不支持AOF文件，无法恢复，同时全量持久化的RDB文件，阅读行较差</p>
]]></content>
      <categories>
        <category>工作学习</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>c++调用sqlite3接口示例</title>
    <url>/c5fababd/</url>
    <content><![CDATA[<p>前言</p>
<blockquote>
<p>这里简单记录下<code>c++调用sqlite3</code>接口示例</p>
</blockquote>
<a id="more"></a>

<p><a href="https://blog.csdn.net/segen_jaa/article/details/7938959" target="_blank" rel="noopener">参考博客</a></p>
<h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><p>windows10 + vs2019</p>
<h3 id="生成slite3-lib"><a href="#生成slite3-lib" class="headerlink" title="生成slite3.lib"></a>生成<code>slite3.lib</code></h3><ol>
<li><p><code>sqlite</code>文件<a href="http://www.sqlite.org/download.html" target="_blank" rel="noopener">下载</a><br>版本：<code>for Windows SQLite version 3.31.1</code><br><code>sqlite-dll-win32-x86-3310100.zip</code>：包含<code>sqlite3.def</code>和<code>sqlite3.dll</code>文件<br><code>sqlite-tools-win32-x86-3310100.zip</code>：包含<code>sqldiff.exe</code>、<code>sqlite3.exe</code>和<code>sqlite3_analyzer.exe</code>文件<br><code>sqlite-amalgamation-3310100.zip</code>：包含<code>sqlite3.h</code>文件</p>
</li>
<li><p>生成<code>slite3.lib</code></p>
</li>
</ol>
<ul>
<li>将<code>sqlite-dll-win32-x86-3310100.zip</code>和<code>sqlite-tools-win32-x86-3310100.zip</code>解压到<code>D:\sqlite</code></li>
<li>运行<code>Developer Command Prompt for VS 2019</code>命令行程序<br>启动位置：开始程序-&gt;Visual Studio 2019-&gt;Visual Studio Tools-&gt;Developer Command Prompt for VS 2019</li>
<li>执行控制台命令，即可生成<code>sqlite3.lib</code>文件<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&gt; cd /d D:\sqlite</span><br><span class="line">&gt; lib /def:sqlite3.def /machine:ix86</span><br></pre></td></tr></table></figure></li>
<li>解压<code>sqlite-amalgamation-3310100.zip</code>即可获得<code>sqlite3.h</code>文件</li>
</ul>
<h3 id="创建测试数据"><a href="#创建测试数据" class="headerlink" title="创建测试数据"></a>创建测试数据</h3><ul>
<li>启动控制台，进入<code>D:\sqlite</code>目录</li>
<li>执行命令，创建<code>test.db</code>测试文件</li>
</ul>
<table>
<thead>
<tr>
<th align="center">字段</th>
<th align="center">类型</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">id</td>
<td align="center">integer</td>
<td align="center">主键自增</td>
</tr>
<tr>
<td align="center">name</td>
<td align="center">varchar(64)</td>
<td align="center">用户名</td>
</tr>
<tr>
<td align="center">age</td>
<td align="center">integer</td>
<td align="center">年龄</td>
</tr>
</tbody></table>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">D:\sqlite&gt; sqlite3.exe test.db</span><br><span class="line">SQLite version 3.31.1 2020-01-27 19:55:54</span><br><span class="line">Enter ".help<span class="string">" for usage hints.</span></span><br><span class="line"><span class="string">sqlite&gt; create table user</span></span><br><span class="line"><span class="string">   ...&gt; (</span></span><br><span class="line"><span class="string">   ...&gt; id integer primary key autoincrement,</span></span><br><span class="line"><span class="string">   ...&gt; name varchar(64),</span></span><br><span class="line"><span class="string">   ...&gt; age integer</span></span><br><span class="line"><span class="string">   ...&gt; );</span></span><br><span class="line"><span class="string">sqlite&gt; .quit</span></span><br></pre></td></tr></table></figure>

<h3 id="创建示例工程"><a href="#创建示例工程" class="headerlink" title="创建示例工程"></a>创建示例工程</h3><p>创建win32工程，包含<code>sqlite3.h</code>和<code>sqlite3.lib</code><br>示例代码：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"sqlite3.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="SQLite管理工具"><a href="#SQLite管理工具" class="headerlink" title="SQLite管理工具"></a>SQLite管理工具</h3><p>可视化管理工具，个人使用<a href="https://sqlitestudio.pl/" target="_blank" rel="noopener">SQLiteStudio</a></p>
]]></content>
      <categories>
        <category>Cpp相关</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>sqlite3</tag>
      </tags>
  </entry>
  <entry>
    <title>宝塔面板搭建教程</title>
    <url>/4c599579/</url>
    <content><![CDATA[<p>前言</p>
<blockquote>
<p>这里简单记录下<code>宝塔面板</code>的搭建教程</p>
</blockquote>
<a id="more"></a>

<h3 id="控制台登录"><a href="#控制台登录" class="headerlink" title="控制台登录"></a>控制台登录</h3><blockquote>
<p>Bt-Panel: <code>http://ip:port/9c04d6b5/</code><br>username: <code>xxx</code><br>password: <code>GpT3xBx7Htct</code></p>
</blockquote>
<h3 id="宝塔论坛"><a href="#宝塔论坛" class="headerlink" title="宝塔论坛"></a>宝塔论坛</h3><blockquote>
<p><a href="https://www.bt.cn/bbs/thread-19376-1-1.html" target="_blank" rel="noopener">https://www.bt.cn/bbs/thread-19376-1-1.html</a></p>
</blockquote>
<h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh</span><br></pre></td></tr></table></figure>

<h3 id="软件更新"><a href="#软件更新" class="headerlink" title="软件更新"></a>软件更新</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl http://download.bt.cn/install/update6.sh | bash</span><br></pre></td></tr></table></figure>

<h3 id="软件卸载"><a href="#软件卸载" class="headerlink" title="软件卸载"></a>软件卸载</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget http://download.bt.cn/install/bt-uninstall.sh &amp;&amp; sh bt-uninstall.sh</span><br></pre></td></tr></table></figure>
<h3 id="查看面板入口"><a href="#查看面板入口" class="headerlink" title="查看面板入口"></a>查看面板入口</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ /etc/init.d/bt default</span><br></pre></td></tr></table></figure>

<h3 id="关闭安全入口"><a href="#关闭安全入口" class="headerlink" title="关闭安全入口"></a>关闭安全入口</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rm -f /www/server/panel/data/admin_path.pl</span><br></pre></td></tr></table></figure>
<p><font color=red> 注意：【关闭安全入口】将使您的面板登录地址被直接暴露在互联网上，非常危险，请谨慎操作 </font><br>宝塔Linux面板 <a href="https://www.bt.cn/bbs/thread-18367-1-1.html" target="_blank" rel="noopener">请求帮助</a></p>
]]></content>
      <categories>
        <category>工具文档</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>宝塔面板</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux(CentOS 7)常用命令</title>
    <url>/2a2c68d6/</url>
    <content><![CDATA[<p>前言</p>
<blockquote>
<p>这里简单记录下<code>Linux(CentOS 7)</code>常用的基本命令</p>
</blockquote>
<a id="more"></a>

<h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><p>阿里云服务器 CentOS 7.7 64位</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ uname -a</span><br><span class="line">Linux 3.10.0-1062.18.1.el7.x86_64 <span class="comment">#1 SMP Tue Mar 17 23:49:17 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure>

<h3 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h3><p>查看服务状态</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ service firewalld status / systemctl status firewalld.service</span><br></pre></td></tr></table></figure>
<p>服务启动/停止/重启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ service firewalld start / systemctl start firewalld.service</span><br><span class="line">$ service firewalld stop / systemctl stop firewalld.service</span><br><span class="line">$ service firewalld restart / systemctl restart firewalld.service</span><br></pre></td></tr></table></figure>
<p>服务开机自启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl <span class="built_in">enable</span> firewalld.service</span><br></pre></td></tr></table></figure>
<p>禁止服务开机自启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl <span class="built_in">disable</span> firewalld.service</span><br></pre></td></tr></table></figure>
<p>查看已启动的服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl list-units --<span class="built_in">type</span>=service</span><br></pre></td></tr></table></figure>
<p>查看开机自启的服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl list-unit-files | grep enabled</span><br></pre></td></tr></table></figure>

<h3 id="docker相关"><a href="#docker相关" class="headerlink" title="docker相关"></a>docker相关</h3><p>启动容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker start redis</span><br></pre></td></tr></table></figure>
<p>停止容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker stop redis</span><br></pre></td></tr></table></figure>
<p>删除容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker rm redis</span><br></pre></td></tr></table></figure>
<p>查看容器状态/<code>id</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker ps -a</span><br></pre></td></tr></table></figure>
<p>设置容器自启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker update --restart=always redis / docker update --restart=always 81bcb97c4f5e</span><br></pre></td></tr></table></figure>

<h3 id="防火墙开放端口"><a href="#防火墙开放端口" class="headerlink" title="防火墙开放端口"></a>防火墙开放端口</h3><p>防火墙开放端口(开放端口后需要重启防火墙<code>firewall-cmd --reload</code>)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ firewall-cmd --zone=public --add-port=8080/tcp --permanent</span><br></pre></td></tr></table></figure>
<p>防火墙移除端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ firewall-cmd --zone=public --remove-port=8080/tcp --permanent</span><br></pre></td></tr></table></figure>
<p>查看端口是否开放</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ firewall-cmd --query-port=8080/tcp</span><br></pre></td></tr></table></figure>
<p>查看已开放端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ firewall-cmd --list-port / firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure>

<h3 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h3><ol>
<li><p>编辑<code>/etc/crontab</code>文件</p>
<figure class="highlight plain"><figcaption><span>/etc/crontab</span></figcaption><table><tr><td class="code"><pre><span class="line"># Example of job definition:</span><br><span class="line"># .---------------- minute (0 - 59)</span><br><span class="line"># |  .------------- hour (0 - 23)</span><br><span class="line"># |  |  .---------- day of month (1 - 31)</span><br><span class="line"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span><br><span class="line"># |  |  |  |  .---- day of week (0 - 6) (Sunday&#x3D;0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span><br><span class="line"># |  |  |  |  |</span><br><span class="line"># *  *  *  *  * user-name  command to be executed</span><br><span class="line"></span><br><span class="line"># 定时任务的每段为：分，时，日，月，周，用户，命令</span><br><span class="line"></span><br><span class="line">0 4 * * * root reboot # 每天凌晨四点执行</span><br><span class="line">*&#x2F;1 * * * * root echo &quot;this is a test, date: &quot;$(date) &gt; &#x2F;root&#x2F;date.log # 每分钟执行</span><br></pre></td></tr></table></figure>
<p>重启服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 重启crontab, 使配置生效</span></span><br><span class="line">$ service crond restart</span><br></pre></td></tr></table></figure>
<p>注：<code>/etc/crontab</code>的默认权限为<code>755</code>，增加定时任务，重启服务后发现不生效</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看log</span></span><br><span class="line">$ tail -f /var/<span class="built_in">log</span>/cron</span><br><span class="line">crond[6463]: (CRON) INFO (Shutting down)</span><br><span class="line">crond[6463]: (CRON) INFO (RANDOM_DELAY will be scaled with factor 5% <span class="keyword">if</span> used.)</span><br><span class="line">crond[6463]: (root) BAD FILE MODE (/etc/crontab)</span><br><span class="line">crond[6463]: (CRON) INFO (running with inotify support)</span><br><span class="line">crond[6463]: (CRON) INFO (@reboot <span class="built_in">jobs</span> will be run at computer<span class="string">'s startup.)</span></span><br></pre></td></tr></table></figure>
<p><a href="https://www.iamhippo.com/2016-09/458.html" target="_blank" rel="noopener">参考教程</a>修改<code>/etc/crontab</code>权限为<code>644</code>重启服务，定时任务生效</p>
</li>
<li><p>命令<code>crontab</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编辑定时任务</span></span><br><span class="line">$ crontab -e</span><br><span class="line"><span class="comment"># 查看定时任务</span></span><br><span class="line">$ crontab -l</span><br><span class="line"><span class="comment"># 重启crontab, 使配置生效</span></span><br><span class="line">$ service crond restart</span><br></pre></td></tr></table></figure>
<p>注：<code>crontab -e</code>编辑格式，不需要指定用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># * * * * * command</span><br><span class="line">0 4 * * * &#x2F;usr&#x2F;sbin&#x2F;reboot</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="查看文件占用"><a href="#查看文件占用" class="headerlink" title="查看文件占用"></a>查看文件占用</h3><p>查看磁盘占用(大文件占用)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ df -h</span><br></pre></td></tr></table></figure>
<p>查看当前目录文件大小</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ du -sh *</span><br></pre></td></tr></table></figure>
<p>查看某个目录的文件大小并排序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">du -hm --max-depth=1 /var/ | sort -n</span><br></pre></td></tr></table></figure>
<p><code>yum</code>缓存路径<code>/var/cache/yum</code><br>清空<code>yum</code>缓存</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum clean all</span><br></pre></td></tr></table></figure>

<h3 id="journal日志"><a href="#journal日志" class="headerlink" title="journal日志"></a>journal日志</h3><p>查看日志占用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ journalctl --disk-usage</span><br></pre></td></tr></table></figure>
<p>用echo命令清空日志文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">""</span> &gt; system.journal</span><br></pre></td></tr></table></figure>
<p>ps. <em>该方法只会清空一次，后面还是需要手动清空，这里建议使用以下命令让<code>journalctl</code>自动维护空间</em><br>只保留近一周的日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ journalctl --vacuum-time=1w</span><br></pre></td></tr></table></figure>
<p>只保留<code>500MB</code>的日志</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ journalctl --vacuum-size=500M</span><br></pre></td></tr></table></figure>
<p>直接删除<code>/var/log/journal/</code>目录下的日志文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rm -rf /var/<span class="built_in">log</span>/journal/20200220105402131453637367482142/system.journal</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工具文档</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 8安装Docker失败</title>
    <url>/21b873d9/</url>
    <content><![CDATA[<p>前言</p>
<blockquote>
<p>这里简单记录下<code>CentOS 8安装Docker</code>失败的解决方案</p>
</blockquote>
<a id="more"></a>

<p><a href="https://blog.yeefire.com/2020_03/centos8_install_docker.html" target="_blank" rel="noopener">参考教程</a></p>
<h3 id="卸载podman"><a href="#卸载podman" class="headerlink" title="卸载podman"></a>卸载<code>podman</code></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ dnf remove -y podman</span><br></pre></td></tr></table></figure>

<h3 id="安装docker-ce官方源"><a href="#安装docker-ce官方源" class="headerlink" title="安装docker-ce官方源"></a>安装<code>docker-ce</code>官方源</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ dnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line">$ dnf update -y</span><br></pre></td></tr></table></figure>

<h3 id="安装docker-ce"><a href="#安装docker-ce" class="headerlink" title="安装docker-ce"></a>安装<code>docker-ce</code></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ dnf install -y docker-ce docker-ce-cli</span><br></pre></td></tr></table></figure>
<p>安装<code>docker-ce</code>时<code>containerd.io</code>这个包会出现版本依赖的问题，如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZwfpcur27gtv0Z ~]<span class="comment"># dnf install -y docker-ce docker-ce-cli</span></span><br><span class="line">Last metadata expiration check: 0:00:51 ago on Fri 10 Apr 2020 01:17:30 PM CST.</span><br><span class="line">Error: </span><br><span class="line"> Problem: package docker-ce-3:19.03.8-3.el7.x86_64 requires containerd.io &gt;= 1.2.2-3, but none of the providers can be installed</span><br><span class="line">  - cannot install the best candidate <span class="keyword">for</span> the job</span><br><span class="line">  - package containerd.io-1.2.10-3.2.el7.x86_64 is excluded</span><br><span class="line">  - package containerd.io-1.2.13-3.1.el7.x86_64 is excluded</span><br><span class="line">  - package containerd.io-1.2.2-3.3.el7.x86_64 is excluded</span><br><span class="line">  - package containerd.io-1.2.2-3.el7.x86_64 is excluded</span><br><span class="line">  - package containerd.io-1.2.4-3.1.el7.x86_64 is excluded</span><br><span class="line">  - package containerd.io-1.2.5-3.1.el7.x86_64 is excluded</span><br><span class="line">  - package containerd.io-1.2.6-3.3.el7.x86_64 is excluded</span><br><span class="line">(try to add <span class="string">'--skip-broken'</span> to skip uninstallable packages or <span class="string">'--nobest'</span> to use not only best candidate packages)</span><br></pre></td></tr></table></figure>

<p>解决方案：</p>
<ol>
<li>安装老版本的<code>docker-ce</code></li>
<li>升级<code>container.io</code></li>
</ol>
<p>选择方案2，因为官方的repo源里面的<code>container.io</code>版本比较老，下载符合版本要求的<code>container.io</code>包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ dnf install -y https://download.docker.com/linux/centos/7/x86_64/edge/Packages/containerd.io-1.2.6-3.3.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>
<p><code>container.io</code>更新完成后，安装<code>docker-ce</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ dnf install -y docker-ce docker-ce-cli</span><br></pre></td></tr></table></figure>
<p>如果下载慢，可以通过其他途径下载并依次安装下面的包</p>
<p><a href="https://download.docker.com/linux/centos/7/x86_64/edge/Packages/containerd.io-1.2.6-3.3.el7.x86_64.rpm" target="_blank" rel="noopener">containerd.io-1.2.6-3.3.el7.x86_64.rpm</a></p>
<p><a href="https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-cli-19.03.8-3.el7.x86_64.rpm" target="_blank" rel="noopener">docker-ce-cli-19.03.8-3.el7.x86_64.rpm</a></p>
<p><a href="https://download.docker.com/linux/centos/7/x86_64/stable/Packages/docker-ce-19.03.8-3.el7.x86_64.rpm" target="_blank" rel="noopener">docker-ce-19.03.8-3.el7.x86_64.rpm</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ yum install -y containerd.io-1.2.6-3.3.el7.x86_64.rpm</span><br><span class="line">$ yum install -y docker-ce-cli-19.03.8-3.el7.x86_64.rpm</span><br><span class="line">$ yum install -y docker-ce-19.03.8-3.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>

<h3 id="服务自启"><a href="#服务自启" class="headerlink" title="服务自启"></a>服务自启</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl <span class="built_in">enable</span> --now docker</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工具文档</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>TinyProxy搭建教程</title>
    <url>/e1612862/</url>
    <content><![CDATA[<p>前言</p>
<blockquote>
<p>这里简单记录下<code>TinyProxy</code>服务器的搭建教程</p>
</blockquote>
<a id="more"></a>

<p><a href="https://blog.csdn.net/a1023182899/article/details/102882553" target="_blank" rel="noopener">参考教程</a></p>
<h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><p>阿里云服务器 CentOS 7.5 64位</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ uname -a</span><br><span class="line">Linux 3.10.0-1062.18.1.el7.x86_64 <span class="comment">#1 SMP Tue Mar 17 23:49:17 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure>

<h3 id="安装TinyProxy"><a href="#安装TinyProxy" class="headerlink" title="安装TinyProxy"></a>安装TinyProxy</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-- 安装TinyProxy</span><br><span class="line">$ yum install tinyproxy</span><br><span class="line">$ sudo vim /etc/tinyproxy/tinyproxy.conf</span><br><span class="line">Port 8888 <span class="comment"># 默认是8888端口</span></span><br><span class="line">Allow 127.0.0.1 <span class="comment"># 使用#注释掉则所有IP都可以连接</span></span><br><span class="line">-- 开机启动</span><br><span class="line">$ systemctl <span class="built_in">enable</span> tinyproxy.service</span><br><span class="line">-- 启动</span><br><span class="line">$ sudo service tinyproxy start</span><br></pre></td></tr></table></figure>

<h3 id="设置安全组规则"><a href="#设置安全组规则" class="headerlink" title="设置安全组规则"></a>设置安全组规则</h3><p>打开<a href="https://homenew.console.aliyun.com/" target="_blank" rel="noopener">阿里云控制台</a>，添加安全组规则，开放<code>8888</code>端口<br>设置完成后，小娜输入搜索<code>网络代理设置</code>输入服务器公网ip和端口，即可使用Chrome浏览器访问代理网络，Firefox需要手动设置代理</p>
<h3 id="一段时间后无法使用"><a href="#一段时间后无法使用" class="headerlink" title="一段时间后无法使用"></a>一段时间后无法使用</h3><p><a href="https://github.com/StreisandEffect/streisand/issues/1381" target="_blank" rel="noopener">github issue</a><br>解决方法：<code>service tinyproxy restart</code>或者<code>reboot</code></p>
]]></content>
      <categories>
        <category>工具文档</category>
      </categories>
      <tags>
        <tag>tinyproxy</tag>
      </tags>
  </entry>
  <entry>
    <title>GitLab搭建教程</title>
    <url>/2144d6ec/</url>
    <content><![CDATA[<p>前言</p>
<blockquote>
<p>这里简单记录下<code>GitLab</code>的搭建教程</p>
</blockquote>
<a id="more"></a>

<p><a href="https://www.cnblogs.com/dotnet261010/p/9811161.html" target="_blank" rel="noopener">参考教程1</a><br><a href="http://java.isture.com/tools/gitlab/gitlab%E6%90%AD%E5%BB%BA.html" target="_blank" rel="noopener">参考教程2</a></p>
<h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><p>阿里云服务器 CentOS 7.5 64位</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ uname -a</span><br><span class="line">Linux 3.10.0-1062.18.1.el7.x86_64 <span class="comment">#1 SMP Tue Mar 17 23:49:17 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</span></span><br></pre></td></tr></table></figure>

<h3 id="安装必要的依赖"><a href="#安装必要的依赖" class="headerlink" title="安装必要的依赖"></a>安装必要的依赖</h3><ol>
<li><p>安装ssh协议</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装ssh</span></span><br><span class="line">$ sudo yum install -y curl policycoreutils-python openssh-server</span><br><span class="line"><span class="comment"># 开机自启</span></span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> sshd</span><br><span class="line"><span class="comment"># 启动ssh</span></span><br><span class="line">$ sudo systemctl start sshd</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装防火墙</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装防火墙</span></span><br><span class="line">$ yum install firewalld systemd -y</span><br><span class="line"><span class="comment"># 开机自启</span></span><br><span class="line">$ systemctl <span class="built_in">enable</span> firewalld</span><br><span class="line"><span class="comment"># 安装防火墙</span></span><br><span class="line">$ service firewalld start</span><br><span class="line"><span class="comment"># 添加HTTP服务到firewalld</span></span><br><span class="line">$ sudo firewall-cmd --permanent --add-service=http</span><br><span class="line"><span class="comment"># 重启防火墙</span></span><br><span class="line">$ sudo systemctl reload firewalld</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装postfix以发送邮件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装postfix</span></span><br><span class="line">$ sudo yum install postfix</span><br><span class="line"><span class="comment"># 开机自启</span></span><br><span class="line">$ sudo systemctl <span class="built_in">enable</span> postfix</span><br><span class="line"><span class="comment"># 启动postfix</span></span><br><span class="line">$ sudo systemctl start postfix</span><br></pre></td></tr></table></figure>
<p>如果启动失败，报错<code>Failed to start Postfix Mail Transport Agent.</code>，修改如下配置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/postfix/main.cf</span><br><span class="line">inet_interfaces = all</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="安装GitLab服务"><a href="#安装GitLab服务" class="headerlink" title="安装GitLab服务"></a>安装GitLab服务</h3><ol>
<li><p>下载gitlab镜像 <a href="https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/" target="_blank" rel="noopener">清华大学开源镜像站</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-12.9.2-ce.0.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装GitLab</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rpm -i gitlab-ce-12.9.2-ce.0.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改服务ip和端口</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vim /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure>
<p>将<code>external_url</code> 修改为 <code>http://ip:port</code>，例如 <code>http://127.0.0.1:8090</code></p>
</li>
<li><p>将<code>8090</code>端口添加到防火墙中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ firewall-cmd --zone=public --add-port=8090/tcp --permanent</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启防火墙</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl reload firewalld</span><br></pre></td></tr></table></figure>
</li>
<li><p>重置GitLab</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动GitLab</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gitlab-ctl restart</span><br></pre></td></tr></table></figure>
</li>
<li><p>开机自启</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ systemctl <span class="built_in">enable</span> gitlab-runsvdir.service</span><br></pre></td></tr></table></figure>
</li>
<li><p>访问GitLab<br>浏览器直接输入<code>http://ip:port</code>访问即可</p>
</li>
</ol>
<h3 id="升级GitLab"><a href="#升级GitLab" class="headerlink" title="升级GitLab"></a>升级GitLab</h3><ol>
<li><p>下载gitlab镜像 <a href="https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/" target="_blank" rel="noopener">清华大学开源镜像站</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-12.9.3-ce.0.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>
</li>
<li><p>关闭部分GitLab服务</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gitlab-ctl stop unicorn</span><br><span class="line">$ gitlab-ctl stop sidekiq</span><br><span class="line">$ gitlab-ctl stop nginx</span><br><span class="line"><span class="comment"># 或者 &amp;&amp; 执行</span></span><br><span class="line">$ gitlab-ctl stop unicorn &amp;&amp; gitlab-ctl stop sidekiq &amp;&amp; gitlab-ctl stop nginx</span><br></pre></td></tr></table></figure>
</li>
<li><p>升级GitLab</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ rpm -Uvh gitlab-ce-12.9.3-ce.0.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>
</li>
<li><p>重新配置gitlab</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启gitlab</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gitlab-ctl restart</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看版本号</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat /opt/gitlab/embedded/service/gitlab-rails/VERSION</span><br><span class="line">$ gitlab-rake gitlab:env:info</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="配置自动备份"><a href="#配置自动备份" class="headerlink" title="配置自动备份"></a>配置自动备份</h3><ol>
<li><p>配置文件<code>/etc/gitlab/gitlab.rb</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gitlab_rails[&#39;manage_backup_path&#39;] &#x3D; true</span><br><span class="line">gitlab_rails[&#39;backup_path&#39;] &#x3D; &quot;&#x2F;data&#x2F;gitlab&#x2F;backups&quot; #备份目录</span><br><span class="line">gitlab_rails[&#39;backup_archive_permissions&#39;] &#x3D; 0644 #生成的文件权限</span><br><span class="line">gitlab_rails[&#39;backup_keep_time&#39;] &#x3D; 864000 #保留10天</span><br></pre></td></tr></table></figure>
</li>
<li><p>手动执行备份</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></figure>
<p>备份文件生成至 <code>/data/gitlab/backups</code><br>文件名例如：<code>1587048780_2020_04_16_12.9.2_gitlab_backup.tar</code></p>
</li>
<li><p>自动定时备份</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ crontab -e</span><br><span class="line"><span class="comment"># 每天5点执行备份</span></span><br><span class="line">0 5 * * * /opt/gitlab/bin/gitlab-rake gitlab:backup:create CRON=1</span><br></pre></td></tr></table></figure>
</li>
<li><p>恢复备份</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 停止连接数据库的进程</span></span><br><span class="line">$ sudo gitlab-ctl stop unicorn</span><br><span class="line">$ sudo gitlab-ctl stop sidekiq</span><br><span class="line"><span class="comment"># 拷贝备份至默认路径</span></span><br><span class="line">$ cp 1587048780_2020_04_16_12.9.2_gitlab_backup.tar /var/opt/gitlab/backups/</span><br><span class="line"><span class="comment"># 恢复1587048780这个备份文件，将覆盖GitLab数据库！</span></span><br><span class="line">$ sudo gitlab-rake gitlab:backup:restore BACKUP=1587048780</span><br><span class="line"><span class="comment"># 重启 GitLab</span></span><br><span class="line">$ sudo gitlab-ctl restart</span><br><span class="line"><span class="comment"># 检查 GitLab</span></span><br><span class="line">$ sudo gitlab-rake gitlab:check SANITIZE=<span class="literal">true</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="安装问题说明"><a href="#安装问题说明" class="headerlink" title="安装问题说明"></a>安装问题说明</h3><p>上述步骤执行后，浏览器访问出现<code>502</code></p>
<ol>
<li>查看配置文件<code>/etc/gitlab/gitlab.rb</code>中的端口号是否被占用</li>
<li>GitLab服务占用内存太多，导致服务器崩溃<br>参考教程<br><a href="https://blog.csdn.net/ianly123/article/details/82984736?depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1&utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromBaidu-1" target="_blank" rel="noopener">教程1</a><br><a href="https://blog.csdn.net/wangxicoding/article/details/43738137?locationNum=7" target="_blank" rel="noopener">教程2</a></li>
</ol>
<p>自己安装过程中的问题：</p>
<blockquote>
<p>安装完成浏览器访问出现<code>502</code>，因为看到资料说<code>GitLab</code>默认端口为<code>8080</code>，所以配置<code>external_url</code> 时修改为 <code>http://ip:8080</code>，按照上述文章，经过一番折腾，尝试过创建<code>swap</code>分区，但问题依然没有解决，并反复确认发现<code>8080</code>并没有被占用，后又执行<code>gitlab-ctl status</code>，多次执行发现unicorn的pid一直在变大，而其他服务正常，说明<code>unicorn</code>启动失败，查看日志<code>gitlab-ctl tail unicorn</code>，然后查看配置文件<code>/etc/gitlab/gitlab.rb</code>，发现<code># unicorn[&#39;port&#39;] = 8080</code>，说明unicorn的默认端口为<code>8080</code>，将<code>external_url</code> 修改为 <code>http://ip:8090</code>，重置GitLab并重启，访问正常。</p>
</blockquote>
<blockquote>
<p>注：其实<a href="https://www.cnblogs.com/dotnet261010/p/9811161.html" target="_blank" rel="noopener">参考教程</a>中是将端口设置为<code>9090</code>的，由于看到资料说默认端口是<code>8080</code>才设置的<code>http://ip:8080</code>导致出现<code>502</code>，但也对安装过程有了更深刻的印象</p>
</blockquote>
<h3 id="启动后内存占用高"><a href="#启动后内存占用高" class="headerlink" title="启动后内存占用高"></a>启动后内存占用高</h3><p>修改配置<code>/etc/gitlab/gitlab.rb</code> <a href="http://www.loveqzhi.cn/index.php/archives/43/" target="_blank" rel="noopener">参考教程</a></p>
<ol>
<li><p>减小<code>进程数</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">unicorn[&#39;work_processes&#39;] &#x3D; 2</span><br></pre></td></tr></table></figure>
<p>默认是2，官方建议是CPU核心数加一，可以提高服务器的响应速度。<br>如果内存只有4G，或者服务器上有其它业务，请勿修改，以免内存不足。<br>注：这个参数最小值是2，设为1，服务器可能会卡死。</p>
</li>
<li><p>减小<code>postgresql</code>缓存</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">postgresql[&#39;shared_buffers&#39;] &#x3D; &quot;128MB&quot;</span><br></pre></td></tr></table></figure>
<p>默认是256MB，可适当改小</p>
</li>
<li><p>减少<code>postgresql</code>并发数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">postgresql[&#39;max_worker_processes&#39;] &#x3D; 4</span><br></pre></td></tr></table></figure>
<p>默认是8，可适当改小</p>
</li>
<li><p>减少<code>sidekiq</code>并发数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sidekiq[&#39;concurrency&#39;] &#x3D; 8</span><br></pre></td></tr></table></figure>
<p>默认是25，可适当改小</p>
</li>
<li><p>启用<code>swap</code>分区<br><a href="https://www.cnblogs.com/aresxin/p/Centos7-kai-qiswap-fen-qu.html" target="_blank" rel="noopener">教程</a></p>
</li>
</ol>
<p>修改完配置以后，需要执行下面的命令使配置生效：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo gitlab-ctl reconfigure</span><br><span class="line">$ sudo gitlab-ctl restart</span><br></pre></td></tr></table></figure>

<p><strong>备注：</strong>按照上述方案修改后，阿里云<code>2核4G</code>的服务器，安装12.x版本Gitlab占用依然达到<code>2G</code>以上，由于服务器上不止运行Gitlab，并且对Gitlab版本要求不高，所以选择了宝塔上的<code>GitLab中文社区版 8.8.5</code>。</p>
]]></content>
      <categories>
        <category>工具文档</category>
      </categories>
      <tags>
        <tag>gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>c++11学习笔记</title>
    <url>/3b9183d8/</url>
    <content><![CDATA[<p>前言</p>
<blockquote>
<p>这里简单记录下<code>《深入应用c++11 祁宇 著》</code>的学习笔记</p>
</blockquote>
<a id="more"></a>

<p><strong>c++11学习笔记   <code>《深入应用c++11 祁宇 著》</code></strong><br><a href="https://www.cnblogs.com/qicosmos/" target="_blank" rel="noopener">作者博客</a><br><a href="https://github.com/kang1024/daily/tree/master/visual%20studio/cxx11" target="_blank" rel="noopener">GitHub地址</a></p>
<h2 id="第一篇-改进我们的程序"><a href="#第一篇-改进我们的程序" class="headerlink" title="第一篇 改进我们的程序"></a>第一篇 改进我们的程序</h2><h3 id="第1章-使用C-11让程序更简洁、更现代"><a href="#第1章-使用C-11让程序更简洁、更现代" class="headerlink" title="第1章 使用C++11让程序更简洁、更现代"></a>第1章 使用C++11让程序更简洁、更现代</h3><h4 id="1-1-类型推导auto-decltype"><a href="#1-1-类型推导auto-decltype" class="headerlink" title="1-1 类型推导auto decltype"></a>1-1 类型推导<code>auto</code> <code>decltype</code></h4><ul>
<li><p><code>auto</code>的推导规则：</p>
<blockquote>
<p>当不声明为指针或者引用时，<code>auto</code>的推导结果和初始化表达式抛弃引用和<code>cv</code>限定符后的类型一致；<br>当声明为指针或者引用时，<code>auto</code>的推导结果将保持初始化表达式的<code>cv</code>限定符属性；</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//存储说明符</span></span><br><span class="line"><span class="keyword">auto</span>      <span class="comment">//...</span></span><br><span class="line"><span class="keyword">register</span>  <span class="comment">//修饰符暗示编译程序相应的变量将被频繁地使用，不能&amp; https://blog.csdn.net/21aspnet/article/details/257511</span></span><br><span class="line"><span class="keyword">static</span>    <span class="comment">//...</span></span><br><span class="line"><span class="keyword">extern</span>    <span class="comment">//告诉编译器是外部变量</span></span><br><span class="line"><span class="keyword">mutable</span>   <span class="comment">//修饰的变量，将永远处于可变的状态，突破const</span></span><br><span class="line"><span class="comment">//cv限定符</span></span><br><span class="line"><span class="keyword">const</span>     <span class="comment">//...</span></span><br><span class="line"><span class="keyword">volatile</span>  <span class="comment">//防止编译器优化</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>auto</code>的限制</p>
<blockquote>
<ol>
<li>不能用于函数参数</li>
<li>不能用于非静态<code>const</code>成员变量</li>
<li>无法定义数组</li>
<li>无法推导出模板参数</li>
</ol>
</blockquote>
</li>
<li><p><code>decltype</code>的推导规则</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">decltype</span>(<span class="built_in">exp</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<ol>
<li>exp是标识符、类访问表达式，<code>decltype(exp)</code>和exp的类型一致</li>
<li>exp是函数调用，<code>decltype(exp)</code>和和exp的返回值类型一致</li>
<li>若exp是一个左值，则<code>decltype(exp)</code>是exp类型的左值引用，否则和exp类型一致</li>
</ol>
</blockquote>
<p><strong>规则2</strong>备注说明 对于纯右值而言，只有<code>class</code>类型会保留<code>cv</code>限定符，其他一般忽略掉<code>cv</code>限定，如下：</p>
<blockquote>
<p>??? vs2019测试结果和该说法不符，<code>class</code>类型也会忽略<code>cv</code>限定</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> &#123;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">int</span> <span class="title">func_cint</span><span class="params">(<span class="keyword">void</span>)</span></span>;  <span class="comment">//纯右值</span></span><br><span class="line"><span class="function"><span class="keyword">const</span> Foo <span class="title">func_cfoo</span><span class="params">(<span class="keyword">void</span>)</span></span>;  <span class="comment">//纯右值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">decltype</span>(func_cint()) a = <span class="number">0</span>;        <span class="comment">//a--&gt;int</span></span><br><span class="line"><span class="keyword">decltype</span>(func_cfoo()) f = Foo();    <span class="comment">//f--&gt;const Foo ??? vs2019 --&gt;Foo</span></span><br></pre></td></tr></table></figure>
<p><strong>规则3</strong>备注说明 带括号的表达式和加法运算表达式</p>
<blockquote>
<p>foo.x 是左值，可知(foo.x)也是左值，因此decltype的结果是右值引用<br>foo是const，foo.x是一个const int类型左值，所以decltype的结果是const int&amp;<br>m + n 返回一个右值；m += n 返回一个左值</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Foo</span> &#123;</span> <span class="keyword">int</span> x; &#125;;</span><br><span class="line"><span class="keyword">const</span> Foo foo = Foo();</span><br><span class="line"></span><br><span class="line"><span class="keyword">decltype</span>(foo.x) a = <span class="number">0</span>; <span class="comment">//a--&gt;int</span></span><br><span class="line"><span class="keyword">decltype</span>((foo.x)) b = a; <span class="comment">//b--&gt;const int&amp;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m = <span class="number">0</span>, n = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">decltype</span>(m + n) c = <span class="number">0</span>; <span class="comment">//c--&gt;int</span></span><br><span class="line"><span class="keyword">decltype</span>(m += n) d = a; <span class="comment">//d--&gt;const int&amp;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>返回类型后置语法–<code>auto</code>和<code>decltype</code>的结合使用</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> U&gt;</span><br><span class="line">auto add(T t, U u) -&gt; decltype(t + u) &#123;</span><br><span class="line">    <span class="keyword">return</span> (t + u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">auto</span> x = add(<span class="number">1</span>, <span class="number">2.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//////////////////////////////</span></span><br><span class="line"><span class="function"><span class="keyword">int</span>&amp; <span class="title">foo</span><span class="params">(<span class="keyword">int</span>&amp; i)</span> </span>&#123; <span class="keyword">return</span> i; &#125;;</span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">foo</span><span class="params">(<span class="keyword">float</span>&amp; f)</span> </span>&#123; <span class="keyword">return</span> f; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line">auto func(T&amp; val) -&gt;decltype(foo(val)) &#123;</span><br><span class="line">    <span class="keyword">return</span> foo(val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">auto</span> x = func(i);</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>auto</code>和<code>decltype</code>的区别</p>
<blockquote>
<ol>
<li><code>auto</code>修饰的的变量必须初始化；<code>decltype</code>可以推导未初始化的变量</li>
<li><code>decltype</code>可以获得表达式的类型，并且可以推导出定义本身的类型，不会像<code>auto</code>可能丢弃引用和<code>cv</code>限定符</li>
</ol>
</blockquote>
</li>
</ul>
<h4 id="1-2-模板的细节改进"><a href="#1-2-模板的细节改进" class="headerlink" title="1-2 模板的细节改进"></a>1-2 模板的细节改进</h4><p><em><code>c++11改进了编译器的解析规则，尽可能地将多个右尖括号(&gt;)解析成模板参数结束符</code></em></p>
<blockquote>
<ol>
<li>在<code>c++98/03</code>的泛型编程中，连续两个右尖括号(&gt;&gt;)会被编译器解释成右移操作符，而不是模板参数表的结束；</li>
<li><code>Foo&lt;A&lt;int&gt;&gt;</code>这种写法不被支持，要写成<code>Foo&lt;A&lt;int&gt; &gt;</code><em>注意两个右尖括号之间的空格</em>；</li>
</ol>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> Val&gt;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">xxx_map_t</span> = <span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>, Val&gt;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//c++98/03</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">func_t1</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*type)</span><span class="params">(T, T)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line">func_t1&lt;<span class="keyword">int</span>&gt;::type xx_1;</span><br><span class="line"></span><br><span class="line"><span class="comment">//c++11</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">using</span> func_t2 = <span class="keyword">void</span> (*)(T, T);</span><br><span class="line">func_t2&lt;<span class="keyword">int</span>&gt; xx_2;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">identity</span> &#123;</span></span><br><span class="line">    <span class="keyword">typedef</span> T type;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T = <span class="keyword">int</span>&gt;</span><br><span class="line"><span class="keyword">void</span> func(<span class="keyword">typename</span> identity&lt;T&gt;::type val, T = <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="keyword">typeid</span>(T).name() &lt;&lt; <span class="string">", "</span> &lt;&lt; val &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func(<span class="number">123</span>);          <span class="comment">//T--&gt;int</span></span><br><span class="line">func(<span class="number">123</span>, <span class="number">123.456</span>)  <span class="comment">//T--&gt;double</span></span><br></pre></td></tr></table></figure>
<blockquote>
<ol>
<li>当默认模板参数和模板参数自动推导同时使用时，若函数模板无法自动推导出参数类型，则编译器将使用自动推导出的参数类型；否则将使用自动推导类型</li>
<li><code>identity</code>外敷模板 <strong>禁用了形参val的类型自动推导</strong> ，由于<code>func</code>制定了模板参数T默认为<code>int</code>，因此<code>func(123)</code>的val参数为<code>int</code>类型；在<code>func(123, 123.456)</code>的第二参数为 <code>double</code>类型，模板参数T将优先自动推导为<code>double</code>，因此<code>func(123, 123.456)</code>的val参数为<code>double</code>类型</li>
</ol>
</blockquote>
<p>ps. <em>默认模板参数不是模板参数自动推导的“建议”，模板参数自动推导总是根据实参推导来的，当自动推导类型生效时，默认模板参数类型会被忽略</em></p>
<h4 id="1-3-列表初始化"><a href="#1-3-列表初始化" class="headerlink" title="1-3 列表初始化"></a>1-3 列表初始化</h4><h4 id="1-4-基于范围的for循环"><a href="#1-4-基于范围的for循环" class="headerlink" title="1-4 基于范围的for循环"></a>1-4 基于范围的<code>for</code>循环</h4><h3 id="第2章-使用C-11改进程序性能"><a href="#第2章-使用C-11改进程序性能" class="headerlink" title="第2章 使用C++11改进程序性能"></a>第2章 使用C++11改进程序性能</h3><p><code>[TODO]</code></p>
<h3 id="第3章-使用C-11消除重复，提高代码质量"><a href="#第3章-使用C-11消除重复，提高代码质量" class="headerlink" title="第3章 使用C++11消除重复，提高代码质量"></a>第3章 使用C++11消除重复，提高代码质量</h3><p><code>[TODO]</code></p>
<h3 id="第4章-使用C-11解决内存泄露的问题"><a href="#第4章-使用C-11解决内存泄露的问题" class="headerlink" title="第4章 使用C++11解决内存泄露的问题"></a>第4章 使用C++11解决内存泄露的问题</h3><p><code>[TODO]</code></p>
<h3 id="第5章-使用C-11让多线程开发变得简单"><a href="#第5章-使用C-11让多线程开发变得简单" class="headerlink" title="第5章 使用C++11让多线程开发变得简单"></a>第5章 使用C++11让多线程开发变得简单</h3><p><code>[TODO]</code></p>
<h3 id="第6章-使用C-11中便利的工具"><a href="#第6章-使用C-11中便利的工具" class="headerlink" title="第6章 使用C++11中便利的工具"></a>第6章 使用C++11中便利的工具</h3><p><code>[TODO]</code></p>
<h3 id="第7章-使用C-11的其他特征"><a href="#第7章-使用C-11的其他特征" class="headerlink" title="第7章 使用C++11的其他特征"></a>第7章 使用C++11的其他特征</h3><p><code>[TODO]</code></p>
<h2 id="第二篇-C-11工程级应用"><a href="#第二篇-C-11工程级应用" class="headerlink" title="第二篇 C++11工程级应用"></a>第二篇 C++11工程级应用</h2><h3 id="第8章-使用C-11改进我们的模式"><a href="#第8章-使用C-11改进我们的模式" class="headerlink" title="第8章 使用C++11改进我们的模式"></a>第8章 使用C++11改进我们的模式</h3><p><code>[TODO]</code><br><a href="https://github.com/kang1024/daily/tree/master/visual%20studio/cxx11/8_design_mode" target="_blank" rel="noopener">查看源码</a></p>
<h3 id="第9章-使用C-11开发一个半同步半异步线程池"><a href="#第9章-使用C-11开发一个半同步半异步线程池" class="headerlink" title="第9章 使用C++11开发一个半同步半异步线程池"></a>第9章 使用C++11开发一个半同步半异步线程池</h3><p><a href="https://www.cnblogs.com/qicosmos/archive/2013/05/30/3108010.html" target="_blank" rel="noopener">原文博客</a><br><a href="https://github.com/kang1024/daily/tree/master/visual%20studio/cxx11/9_thread_pool" target="_blank" rel="noopener">查看源码</a></p>
<h3 id="第10章-使用C-11开发一个轻量级的AOP库"><a href="#第10章-使用C-11开发一个轻量级的AOP库" class="headerlink" title="第10章 使用C++11开发一个轻量级的AOP库"></a>第10章 使用C++11开发一个轻量级的AOP库</h3><p><a href="https://www.cnblogs.com/qicosmos/p/4772389.html" target="_blank" rel="noopener">原文博客</a><br><a href="https://github.com/kang1024/daily/tree/master/visual%20studio/cxx11/10_aop_cxx" target="_blank" rel="noopener">查看源码</a></p>
<h3 id="第11章-使用C-11开发一个轻量级的IoC容器"><a href="#第11章-使用C-11开发一个轻量级的IoC容器" class="headerlink" title="第11章 使用C++11开发一个轻量级的IoC容器"></a>第11章 使用C++11开发一个轻量级的IoC容器</h3><p><a href="https://www.cnblogs.com/qicosmos/archive/2013/04/22/3035074.html" target="_blank" rel="noopener">原文博客</a><br><code>[DOING]</code><br>–<code>p267</code><br><a href="https://github.com/kang1024/daily/tree/master/visual%20studio/cxx11/11_ioc_cxx" target="_blank" rel="noopener">查看源码</a></p>
<h3 id="第12章-使用C-11开发一个对象的消息总线库"><a href="#第12章-使用C-11开发一个对象的消息总线库" class="headerlink" title="第12章 使用C++11开发一个对象的消息总线库"></a>第12章 使用C++11开发一个对象的消息总线库</h3><p><a href="https://www.cnblogs.com/qicosmos/archive/2013/04/28/3048919.html" target="_blank" rel="noopener">原文博客</a><br><code>[TODO]</code><br><a href="https://github.com/kang1024/daily/tree/master/visual%20studio/cxx11/12_msg_bus" target="_blank" rel="noopener">查看源码</a></p>
<h3 id="第13章-使用C-11封装sqlite库"><a href="#第13章-使用C-11封装sqlite库" class="headerlink" title="第13章 使用C++11封装sqlite库"></a>第13章 使用C++11封装sqlite库</h3><p><a href="https://www.cnblogs.com/qicosmos/p/3805156.html" target="_blank" rel="noopener">原文博客</a><br><code>[TODO]</code><br><a href="https://github.com/kang1024/daily/tree/master/visual%20studio/cxx11/13_smart_db" target="_blank" rel="noopener">查看源码</a></p>
<h3 id="第14章-使用C-11开发一个linq-to-objects库"><a href="#第14章-使用C-11开发一个linq-to-objects库" class="headerlink" title="第14章 使用C++11开发一个linq to objects库"></a>第14章 使用C++11开发一个linq to objects库</h3><p><code>[TODO]</code><br><a href="https://github.com/kang1024/daily/tree/master/visual%20studio/cxx11/14_linq_obj" target="_blank" rel="noopener">查看源码</a></p>
<h3 id="第15章-使用C-11开发一个轻量级的并行task库"><a href="#第15章-使用C-11开发一个轻量级的并行task库" class="headerlink" title="第15章 使用C++11开发一个轻量级的并行task库"></a>第15章 使用C++11开发一个轻量级的并行task库</h3><p><a href="https://www.cnblogs.com/qicosmos/p/3534967.html" target="_blank" rel="noopener">原文博客</a><br><code>[TODO]</code><br><a href="https://github.com/kang1024/daily/tree/master/visual%20studio/cxx11/15_task_cxx" target="_blank" rel="noopener">查看源码</a></p>
<h3 id="第16章-使用C-11开发一个简单的通信程序"><a href="#第16章-使用C-11开发一个简单的通信程序" class="headerlink" title="第16章 使用C++11开发一个简单的通信程序"></a>第16章 使用C++11开发一个简单的通信程序</h3><p><a href="https://www.cnblogs.com/qicosmos/p/3461116.html" target="_blank" rel="noopener">原文博客</a><br><a href="https://github.com/kang1024/daily/tree/master/visual%20studio/cxx11/16_asio_msg" target="_blank" rel="noopener">查看源码</a></p>
]]></content>
      <categories>
        <category>Cpp相关</category>
      </categories>
      <tags>
        <tag>cpp</tag>
        <tag>cpp11</tag>
      </tags>
  </entry>
  <entry>
    <title>windbg常用命令</title>
    <url>/86acdf67/</url>
    <content><![CDATA[<p>前言</p>
<blockquote>
<p>这里简单记录下<code>windbg</code>的常用命令</p>
</blockquote>
<a id="more"></a>

<h2 id="加载符号文件"><a href="#加载符号文件" class="headerlink" title="加载符号文件"></a>加载符号文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">E:\windbg\mysymbols;SRV*E:\windbg\mysymbols*http:&#x2F;&#x2F;msdl.microsoft.com&#x2F;download&#x2F;symbols</span><br></pre></td></tr></table></figure>

<h2 id="切换到异常上下文"><a href="#切换到异常上下文" class="headerlink" title="切换到异常上下文"></a>切换到异常上下文</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.ecxr</span><br></pre></td></tr></table></figure>

<h2 id="查看线程栈"><a href="#查看线程栈" class="headerlink" title="查看线程栈"></a>查看线程栈</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">单个线程：kv</span><br><span class="line">所有线程：~*kv</span><br></pre></td></tr></table></figure>

<h2 id="切换线程"><a href="#切换线程" class="headerlink" title="切换线程"></a>切换线程</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~[threadid]s</span><br><span class="line">切换到2号线程：~2s</span><br></pre></td></tr></table></figure>

<h2 id="显示临界区"><a href="#显示临界区" class="headerlink" title="显示临界区"></a>显示临界区</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">!cs 0xxxxxxx</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>工作学习</category>
      </categories>
      <tags>
        <tag>windbg</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown常用语法</title>
    <url>/c6b59e99/</url>
    <content><![CDATA[<p>前言</p>
<blockquote>
<p>这里简单记录下<code>Markdown</code>的常用语法</p>
</blockquote>
<a id="more"></a>

<h3 id="常用语法"><a href="#常用语法" class="headerlink" title="常用语法"></a>常用语法</h3><div class="note info"><p>更多语法规则：详见<a href="https://www.runoob.com/markdown/md-tutorial.html" target="_blank" rel="noopener">RUNOOB.COM</a></p>
</div>

<table>
<thead>
<tr>
<th>标题</th>
<th>语法</th>
</tr>
</thead>
<tbody><tr>
<td>这是一级标题</td>
<td># 这是一级标题</td>
</tr>
<tr>
<td>这是二级标题</td>
<td>## 这是二级标题</td>
</tr>
<tr>
<td>这是三级标题</td>
<td>### 这是三级标题</td>
</tr>
<tr>
<td>这是四级标题</td>
<td>#### 这是四级标题</td>
</tr>
<tr>
<td>这是五级标题</td>
<td>##### 这是五级标题</td>
</tr>
<tr>
<td>这是六级标题</td>
<td>###### 这是六级标题</td>
</tr>
</tbody></table>
<ol>
<li>第一项<ul>
<li>第一项元素1</li>
</ul>
</li>
<li>第二项<ul>
<li>第二项元素1</li>
<li>第二项元素2</li>
</ul>
</li>
</ol>
<p><em>这是斜体</em></p>
<p><strong>这是粗体</strong></p>
<p><strong><em>这是粗斜体</em></strong></p>
<p><del>这是删除线</del></p>
<p>这里有个脚注<a href="markdown">^试试这里</a></p>
<p><font color=#FF0000> 这是红色 </font></p>
<blockquote>
<p>区块1</p>
<blockquote>
<p>区块2</p>
<blockquote>
<p>区块3</p>
</blockquote>
</blockquote>
</blockquote>
<ul>
<li><p><a href="https://www.runoob.com/markdown/md-tutorial.html" target="_blank" rel="noopener">学习教程1</a></p>
</li>
<li><p><a href="https://www.jianshu.com/p/191d1e21f7ed" target="_blank">学习教程2</a></p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">姓名</th>
<th align="center">性别</th>
<th align="center">年龄</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>张三</strong></td>
<td align="center"><em>男</em></td>
<td align="center">10</td>
</tr>
<tr>
<td align="center">李四</td>
<td align="center">男</td>
<td align="center">12</td>
</tr>
</tbody></table>
<p><img src="https://www.runoob.com/wp-content/uploads/2019/03/iconfinder_markdown_298823.png" alt="Markdown"></p>
<p><font face="Consolas" color=red size=6> curl实现HTTP的post/get请求 </font></p>
<p>markdown代码块支持的语言 <a href="https://www.jianshu.com/p/1f223eb78ad8" target="_blank" rel="noopener">前往查看</a></p>
<h3 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h3><p><a href="https://www.runoob.com/font-awesome/fontawesome-reference.html" target="_blank" rel="noopener">Font Awesome 参考手册</a></p>
<style>
table th:nth-of-type(1) {
  width: 50%;
}
</style>

<table>
<thead>
<tr>
<th align="center">语法</th>
<th align="center">效果</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>&lt;i class=&quot;fa fa-star&quot;&gt;&lt;/i&gt;</code></td>
<td align="center"><i class="fa fa-star"></i></td>
</tr>
<tr>
<td align="center"><code>&lt;i class=&quot;fa fa-star-o&quot;&gt;&lt;/i&gt;</code></td>
<td align="center"><i class="fa fa-star-o"></i></td>
</tr>
<tr>
<td align="center"><code>&lt;i class=&quot;fa fa-star-half&quot;&gt;&lt;/i&gt;</code></td>
<td align="center"><i class="fa fa-star-half"></i></td>
</tr>
<tr>
<td align="center"><code>&lt;i class=&quot;fa fa-check&quot;&gt;&lt;/i&gt;</code></td>
<td align="center"><i class="fa fa-check"></i></td>
</tr>
<tr>
<td align="center"><code>&lt;i class=&quot;fa fa-close&quot;&gt;&lt;/i&gt;</code></td>
<td align="center"><i class="fa fa-close"></i></td>
</tr>
<tr>
<td align="center"><code>&lt;i class=&quot;fa fa-times&quot;&gt;&lt;/i&gt;</code></td>
<td align="center"><i class="fa fa-times"></i></td>
</tr>
<tr>
<td align="center"><code>2&lt;sup&gt;1024&lt;/sup&gt;</code></td>
<td align="center">2<sup>1024</sup></td>
</tr>
<tr>
<td align="center"><code>H&lt;sup&gt;2&lt;/sup&gt;O</code></td>
<td align="center">H<sub>2</sub>O</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>工具文档</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello-Hexo</title>
    <url>/a1751c09/</url>
    <content><![CDATA[<p>前言</p>
<blockquote>
<p>这里简单记录下<code>Hexo发布博客</code>的常用命令</p>
</blockquote>
<a id="more"></a>

<p><img src="/images/Hexo%E5%8D%9A%E5%AE%A2/Hexo.png" alt=""><br><img src="/images/Hexo%E5%8D%9A%E5%AE%A2/NexT.png" alt=""><br><img src="http://theme-next.iissnan.com/assets/img/NextSchemes3.png" alt=""></p>
<p><a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/Node.js-v13.6.0-brightgreen" alt="Node.js version"></a>  <a href="https://www.liaoxuefeng.com/wiki/1022910821149312/1023025597810528" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/npm%20package-v6.13.4-green" alt="NPM version"></a>  <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/Hexo-v4.2.1-red" alt="Hexo version"></a>  <a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/NexT-v8.0.0_rc.3-blue" alt="NexT version"></a>  <a href="https://opensource.org/licenses/MIT" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/License-MIT-orange" alt="License"></a></p>
<h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node  v13.6.0</span><br><span class="line">npm   v6.13.4</span><br><span class="line">hexo  v4.2.1</span><br><span class="line">next  v8.0.0_rc.3</span><br></pre></td></tr></table></figure>

<h3 id="清理缓存"><a href="#清理缓存" class="headerlink" title="清理缓存"></a>清理缓存</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>

<h3 id="启动本地服务"><a href="#启动本地服务" class="headerlink" title="启动本地服务"></a>启动本地服务</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<h3 id="部署到远程站点"><a href="#部署到远程站点" class="headerlink" title="部署到远程站点"></a>部署到远程站点</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><p><strong>安装卸载的<code>install/uninstall</code>可以简写为<code>i/un</code></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># git发布插件</span></span><br><span class="line">$ cnpm install hexo-deployer-git --save</span><br><span class="line"><span class="comment"># 生成唯一永久连接插件</span></span><br><span class="line">$ cnpm install hexo-abbrlink --save</span><br><span class="line"><span class="comment"># 搜索功能插件</span></span><br><span class="line">$ cnpm install hexo-generator-searchdb --save</span><br><span class="line"><span class="comment"># 字数和阅读时长统计插件</span></span><br><span class="line">$ cnpm install hexo-symbols-count-time --save</span><br><span class="line"><span class="comment"># 文章置顶插件</span></span><br><span class="line">$ cnpm install hexo-generator-index-pin-top --save</span><br><span class="line"><span class="comment"># 资源压缩插件</span></span><br><span class="line">$ cnpm install gulp gulp-imagemin gulp-minify-css gulp-minify-html gulp-uglify --save</span><br><span class="line"><span class="comment"># 数学公式插件</span></span><br><span class="line">$ cnpm install hexo-renderer-pandoc --save</span><br></pre></td></tr></table></figure>
<p><strong>注：</strong>因为<code>npm</code>服务器速度很慢，所以可以选择使用<code>cnpm</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h3 id="插件卸载"><a href="#插件卸载" class="headerlink" title="插件卸载"></a>插件卸载</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cnpm uninstall hexo-generator-index --save</span><br><span class="line">$ cnpm uninstall hexo-renderer-marked --save</span><br></pre></td></tr></table></figure>

<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul>
<li><a href="https://www.jianshu.com/p/7b8faf77d1af" target="_blank" rel="noopener">常用命令</a></li>
<li><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo官网</a></li>
<li><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT主题</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo博客</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
